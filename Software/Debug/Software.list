
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006ba8  08006ba8  00016ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c28  08006c28  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08006c28  08006c28  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c28  08006c28  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08006c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200000d0  08006d00  000200d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006d00  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013775  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028bb  00000000  00000000  0003386e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00036130  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  000371a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f60a  00000000  00000000  000380f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d0aa  00000000  00000000  00047702  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057e23  00000000  00000000  000547ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac5cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a00  00000000  00000000  000ac64c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b90 	.word	0x08006b90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d4 	.word	0x200000d4
 800020c:	08006b90 	.word	0x08006b90

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	d1ed      	bne.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__gesf2>:
 8001044:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001048:	e006      	b.n	8001058 <__cmpsf2+0x4>
 800104a:	bf00      	nop

0800104c <__lesf2>:
 800104c:	f04f 0c01 	mov.w	ip, #1
 8001050:	e002      	b.n	8001058 <__cmpsf2+0x4>
 8001052:	bf00      	nop

08001054 <__cmpsf2>:
 8001054:	f04f 0c01 	mov.w	ip, #1
 8001058:	f84d cd04 	str.w	ip, [sp, #-4]!
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	bf18      	it	ne
 800106a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800106e:	d011      	beq.n	8001094 <__cmpsf2+0x40>
 8001070:	b001      	add	sp, #4
 8001072:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001076:	bf18      	it	ne
 8001078:	ea90 0f01 	teqne	r0, r1
 800107c:	bf58      	it	pl
 800107e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001082:	bf88      	it	hi
 8001084:	17c8      	asrhi	r0, r1, #31
 8001086:	bf38      	it	cc
 8001088:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800108c:	bf18      	it	ne
 800108e:	f040 0001 	orrne.w	r0, r0, #1
 8001092:	4770      	bx	lr
 8001094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001098:	d102      	bne.n	80010a0 <__cmpsf2+0x4c>
 800109a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800109e:	d105      	bne.n	80010ac <__cmpsf2+0x58>
 80010a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010a4:	d1e4      	bne.n	8001070 <__cmpsf2+0x1c>
 80010a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010aa:	d0e1      	beq.n	8001070 <__cmpsf2+0x1c>
 80010ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <__aeabi_cfrcmple>:
 80010b4:	4684      	mov	ip, r0
 80010b6:	4608      	mov	r0, r1
 80010b8:	4661      	mov	r1, ip
 80010ba:	e7ff      	b.n	80010bc <__aeabi_cfcmpeq>

080010bc <__aeabi_cfcmpeq>:
 80010bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010be:	f7ff ffc9 	bl	8001054 <__cmpsf2>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	bf48      	it	mi
 80010c6:	f110 0f00 	cmnmi.w	r0, #0
 80010ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010cc <__aeabi_fcmpeq>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff fff4 	bl	80010bc <__aeabi_cfcmpeq>
 80010d4:	bf0c      	ite	eq
 80010d6:	2001      	moveq	r0, #1
 80010d8:	2000      	movne	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmplt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffea 	bl	80010bc <__aeabi_cfcmpeq>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmple>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffe0 	bl	80010bc <__aeabi_cfcmpeq>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpge>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffd2 	bl	80010b4 <__aeabi_cfrcmple>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpgt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffc8 	bl	80010b4 <__aeabi_cfrcmple>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_f2iz>:
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30f      	bcc.n	800115a <__aeabi_f2iz+0x2a>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d90d      	bls.n	8001160 <__aeabi_f2iz+0x30>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001150:	fa23 f002 	lsr.w	r0, r3, r2
 8001154:	bf18      	it	ne
 8001156:	4240      	negne	r0, r0
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2iz+0x3a>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d105      	bne.n	8001176 <__aeabi_f2iz+0x46>
 800116a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800116e:	bf08      	it	eq
 8001170:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 fc41 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f806 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f004 fe44 	bl	8005e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fc5b 	bl	8001a72 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f000 fc23 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000064 	.word	0x20000064
 80011f0:	20000004 	.word	0x20000004
 80011f4:	20000000 	.word	0x20000000

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000004 	.word	0x20000004
 8001218:	200000fc 	.word	0x200000fc

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	200000fc 	.word	0x200000fc

08001230 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_SetTickFreq+0x3c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	79fa      	ldrb	r2, [r7, #7]
 8001244:	429a      	cmp	r2, r3
 8001246:	d00c      	beq.n	8001262 <HAL_SetTickFreq+0x32>
  {
    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_SetTickFreq+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ffa3 	bl	8001198 <HAL_InitTick>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <HAL_SetTickFreq+0x32>
    {
      uwTickFreq = Freq;
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_SetTickFreq+0x3c>)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000004 	.word	0x20000004
 8001270:	20000000 	.word	0x20000000

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffce 	bl	800121c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_Delay+0x40>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffbe 	bl	800121c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e0be      	b.n	8001458 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d109      	bne.n	80012fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f004 fdc0 	bl	8005e7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fa7d 	bl	80017fc <ADC_ConversionStop_Disable>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 8099 	bne.w	8001446 <HAL_ADC_Init+0x18e>
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 8095 	bne.w	8001446 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001324:	f023 0302 	bic.w	r3, r3, #2
 8001328:	f043 0202 	orr.w	r2, r3, #2
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001338:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7b1b      	ldrb	r3, [r3, #12]
 800133e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001340:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	4313      	orrs	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001350:	d003      	beq.n	800135a <HAL_ADC_Init+0xa2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <HAL_ADC_Init+0xa8>
 800135a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135e:	e000      	b.n	8001362 <HAL_ADC_Init+0xaa>
 8001360:	2300      	movs	r3, #0
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7d1b      	ldrb	r3, [r3, #20]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d119      	bne.n	80013a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7b1b      	ldrb	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d109      	bne.n	800138c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	3b01      	subs	r3, #1
 800137e:	035a      	lsls	r2, r3, #13
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	e00b      	b.n	80013a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f043 0220 	orr.w	r2, r3, #32
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_ADC_Init+0x1a8>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d4:	d003      	beq.n	80013de <HAL_ADC_Init+0x126>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d104      	bne.n	80013e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	051b      	lsls	r3, r3, #20
 80013e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_ADC_Init+0x1ac>)
 8001404:	4013      	ands	r3, r2
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	429a      	cmp	r2, r3
 800140a:	d10b      	bne.n	8001424 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001422:	e018      	b.n	8001456 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	f023 0312 	bic.w	r3, r3, #18
 800142c:	f043 0210 	orr.w	r2, r3, #16
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	f043 0201 	orr.w	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001444:	e007      	b.n	8001456 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	f043 0210 	orr.w	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001456:	7dfb      	ldrb	r3, [r7, #23]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	ffe1f7fd 	.word	0xffe1f7fd
 8001464:	ff1f0efe 	.word	0xff1f0efe

08001468 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Start+0x1a>
 800147e:	2302      	movs	r3, #2
 8001480:	e062      	b.n	8001548 <HAL_ADC_Start+0xe0>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f964 	bl	8001758 <ADC_Enable>
 8001490:	4603      	mov	r3, r0
 8001492:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d151      	bne.n	800153e <HAL_ADC_Start+0xd6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <HAL_ADC_Start+0x70>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_ADC_Start+0x8a>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	f023 0206 	bic.w	r2, r3, #6
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_Start+0x90>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f06f 0202 	mvn.w	r2, #2
 8001508:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001514:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001518:	d108      	bne.n	800152c <HAL_ADC_Start+0xc4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	e00c      	b.n	8001546 <HAL_ADC_Start+0xde>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	e003      	b.n	8001546 <HAL_ADC_Start+0xde>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x20>
 8001584:	2302      	movs	r3, #2
 8001586:	e0dc      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1da>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b06      	cmp	r3, #6
 8001596:	d81c      	bhi.n	80015d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b05      	subs	r3, #5
 80015aa:	221f      	movs	r2, #31
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4019      	ands	r1, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b05      	subs	r3, #5
 80015c4:	fa00 f203 	lsl.w	r2, r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34
 80015d0:	e03c      	b.n	800164c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d81c      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3b23      	subs	r3, #35	; 0x23
 80015ec:	221f      	movs	r2, #31
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4019      	ands	r1, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b23      	subs	r3, #35	; 0x23
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
 8001612:	e01b      	b.n	800164c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	3b41      	subs	r3, #65	; 0x41
 8001626:	221f      	movs	r2, #31
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	4019      	ands	r1, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b41      	subs	r3, #65	; 0x41
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b09      	cmp	r3, #9
 8001652:	d91c      	bls.n	800168e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68d9      	ldr	r1, [r3, #12]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	3b1e      	subs	r3, #30
 8001666:	2207      	movs	r2, #7
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	4019      	ands	r1, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6898      	ldr	r0, [r3, #8]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	3b1e      	subs	r3, #30
 8001680:	fa00 f203 	lsl.w	r2, r0, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	e019      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6919      	ldr	r1, [r3, #16]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	2207      	movs	r2, #7
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4019      	ands	r1, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6898      	ldr	r0, [r3, #8]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d003      	beq.n	80016d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ce:	2b11      	cmp	r3, #17
 80016d0:	d132      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_ADC_ConfigChannel+0x1e4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d125      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d126      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016f8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d11a      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_ADC_ConfigChannel+0x1e8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a13      	ldr	r2, [pc, #76]	; (8001754 <HAL_ADC_ConfigChannel+0x1ec>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0c9a      	lsrs	r2, r3, #18
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001718:	e002      	b.n	8001720 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3b01      	subs	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_ConfigChannel+0x1b2>
 8001726:	e007      	b.n	8001738 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f043 0220 	orr.w	r2, r3, #32
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40012400 	.word	0x40012400
 8001750:	20000064 	.word	0x20000064
 8001754:	431bde83 	.word	0x431bde83

08001758 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d039      	beq.n	80017ea <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <ADC_Enable+0x9c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <ADC_Enable+0xa0>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001794:	e002      	b.n	800179c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3b01      	subs	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017a2:	f7ff fd3b 	bl	800121c <HAL_GetTick>
 80017a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017a8:	e018      	b.n	80017dc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017aa:	f7ff fd37 	bl	800121c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d911      	bls.n	80017dc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f043 0210 	orr.w	r2, r3, #16
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e007      	b.n	80017ec <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d1df      	bne.n	80017aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000064 	.word	0x20000064
 80017f8:	431bde83 	.word	0x431bde83

080017fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d127      	bne.n	8001866 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001826:	f7ff fcf9 	bl	800121c <HAL_GetTick>
 800182a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800182c:	e014      	b.n	8001858 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800182e:	f7ff fcf5 	bl	800121c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d90d      	bls.n	8001858 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	f043 0210 	orr.w	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e007      	b.n	8001868 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d0e3      	beq.n	800182e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4906      	ldr	r1, [pc, #24]	; (8001908 <__NVIC_EnableIRQ+0x34>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e8:	f7ff ff90 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff2d 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff42 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff90 	bl	8001960 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5f 	bl	800190c <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff35 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b08b      	sub	sp, #44	; 0x2c
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9e:	e127      	b.n	8001cf0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8116 	bne.w	8001cea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d034      	beq.n	8001b30 <HAL_GPIO_Init+0xa4>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d80d      	bhi.n	8001ae6 <HAL_GPIO_Init+0x5a>
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d02b      	beq.n	8001b26 <HAL_GPIO_Init+0x9a>
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d804      	bhi.n	8001adc <HAL_GPIO_Init+0x50>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d031      	beq.n	8001b3a <HAL_GPIO_Init+0xae>
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d01c      	beq.n	8001b14 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ada:	e048      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d043      	beq.n	8001b68 <HAL_GPIO_Init+0xdc>
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d01b      	beq.n	8001b1c <HAL_GPIO_Init+0x90>
          break;
 8001ae4:	e043      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ae6:	4a89      	ldr	r2, [pc, #548]	; (8001d0c <HAL_GPIO_Init+0x280>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d026      	beq.n	8001b3a <HAL_GPIO_Init+0xae>
 8001aec:	4a87      	ldr	r2, [pc, #540]	; (8001d0c <HAL_GPIO_Init+0x280>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d806      	bhi.n	8001b00 <HAL_GPIO_Init+0x74>
 8001af2:	4a87      	ldr	r2, [pc, #540]	; (8001d10 <HAL_GPIO_Init+0x284>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d020      	beq.n	8001b3a <HAL_GPIO_Init+0xae>
 8001af8:	4a86      	ldr	r2, [pc, #536]	; (8001d14 <HAL_GPIO_Init+0x288>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01d      	beq.n	8001b3a <HAL_GPIO_Init+0xae>
          break;
 8001afe:	e036      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b00:	4a85      	ldr	r2, [pc, #532]	; (8001d18 <HAL_GPIO_Init+0x28c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0xae>
 8001b06:	4a85      	ldr	r2, [pc, #532]	; (8001d1c <HAL_GPIO_Init+0x290>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d016      	beq.n	8001b3a <HAL_GPIO_Init+0xae>
 8001b0c:	4a84      	ldr	r2, [pc, #528]	; (8001d20 <HAL_GPIO_Init+0x294>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0xae>
          break;
 8001b12:	e02c      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e028      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	3304      	adds	r3, #4
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e023      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e01e      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	330c      	adds	r3, #12
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e019      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b42:	2304      	movs	r3, #4
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e012      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	611a      	str	r2, [r3, #16]
          break;
 8001b5a:	e008      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	615a      	str	r2, [r3, #20]
          break;
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2bff      	cmp	r3, #255	; 0xff
 8001b72:	d801      	bhi.n	8001b78 <HAL_GPIO_Init+0xec>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	e001      	b.n	8001b7c <HAL_GPIO_Init+0xf0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d802      	bhi.n	8001b8a <HAL_GPIO_Init+0xfe>
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_Init+0x104>
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	3b08      	subs	r3, #8
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	210f      	movs	r1, #15
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	6a39      	ldr	r1, [r7, #32]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8096 	beq.w	8001cea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbe:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_GPIO_Init+0x298>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_GPIO_Init+0x298>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b56      	ldr	r3, [pc, #344]	; (8001d24 <HAL_GPIO_Init+0x298>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd6:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_GPIO_Init+0x29c>)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4b      	ldr	r2, [pc, #300]	; (8001d2c <HAL_GPIO_Init+0x2a0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0x19e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4a      	ldr	r2, [pc, #296]	; (8001d30 <HAL_GPIO_Init+0x2a4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00d      	beq.n	8001c26 <HAL_GPIO_Init+0x19a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a49      	ldr	r2, [pc, #292]	; (8001d34 <HAL_GPIO_Init+0x2a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d007      	beq.n	8001c22 <HAL_GPIO_Init+0x196>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <HAL_GPIO_Init+0x2ac>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_GPIO_Init+0x192>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x1a0>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x1a0>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x1a0>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x1a0>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3c:	493a      	ldr	r1, [pc, #232]	; (8001d28 <HAL_GPIO_Init+0x29c>)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4938      	ldr	r1, [pc, #224]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
 8001c62:	e006      	b.n	8001c72 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	4933      	ldr	r1, [pc, #204]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	492e      	ldr	r1, [pc, #184]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
 8001c8a:	e006      	b.n	8001c9a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4929      	ldr	r1, [pc, #164]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4924      	ldr	r1, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	491f      	ldr	r1, [pc, #124]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	491a      	ldr	r1, [pc, #104]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60cb      	str	r3, [r1, #12]
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4915      	ldr	r1, [pc, #84]	; (8001d3c <HAL_GPIO_Init+0x2b0>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	3301      	adds	r3, #1
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f47f aed0 	bne.w	8001aa0 <HAL_GPIO_Init+0x14>
  }
}
 8001d00:	bf00      	nop
 8001d02:	372c      	adds	r7, #44	; 0x2c
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	10210000 	.word	0x10210000
 8001d10:	10110000 	.word	0x10110000
 8001d14:	10120000 	.word	0x10120000
 8001d18:	10310000 	.word	0x10310000
 8001d1c:	10320000 	.word	0x10320000
 8001d20:	10220000 	.word	0x10220000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	40011000 	.word	0x40011000
 8001d38:	40011400 	.word	0x40011400
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e10f      	b.n	8001fa2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f004 f8ac 	bl	8005ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2224      	movs	r2, #36	; 0x24
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db4:	f001 fb02 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a7b      	ldr	r2, [pc, #492]	; (8001fac <HAL_I2C_Init+0x23c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d807      	bhi.n	8001dd4 <HAL_I2C_Init+0x64>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a7a      	ldr	r2, [pc, #488]	; (8001fb0 <HAL_I2C_Init+0x240>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	e006      	b.n	8001de2 <HAL_I2C_Init+0x72>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_I2C_Init+0x244>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0db      	b.n	8001fa2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_I2C_Init+0x248>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a64      	ldr	r2, [pc, #400]	; (8001fac <HAL_I2C_Init+0x23c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d802      	bhi.n	8001e24 <HAL_I2C_Init+0xb4>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	e009      	b.n	8001e38 <HAL_I2C_Init+0xc8>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	4a63      	ldr	r2, [pc, #396]	; (8001fbc <HAL_I2C_Init+0x24c>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	3301      	adds	r3, #1
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4956      	ldr	r1, [pc, #344]	; (8001fac <HAL_I2C_Init+0x23c>)
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d80d      	bhi.n	8001e74 <HAL_I2C_Init+0x104>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e59      	subs	r1, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	bf38      	it	cc
 8001e70:	2304      	movcc	r3, #4
 8001e72:	e04f      	b.n	8001f14 <HAL_I2C_Init+0x1a4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d111      	bne.n	8001ea0 <HAL_I2C_Init+0x130>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	440b      	add	r3, r1
 8001e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e012      	b.n	8001ec6 <HAL_I2C_Init+0x156>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	0099      	lsls	r1, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Init+0x15e>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e022      	b.n	8001f14 <HAL_I2C_Init+0x1a4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_I2C_Init+0x184>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e58      	subs	r0, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	440b      	add	r3, r1
 8001ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef2:	e00f      	b.n	8001f14 <HAL_I2C_Init+0x1a4>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	0099      	lsls	r1, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	6809      	ldr	r1, [r1, #0]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6911      	ldr	r1, [r2, #16]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	000186a0 	.word	0x000186a0
 8001fb0:	001e847f 	.word	0x001e847f
 8001fb4:	003d08ff 	.word	0x003d08ff
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	817b      	strh	r3, [r7, #10]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff f922 	bl	800121c <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	f040 80e0 	bne.w	80021a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2319      	movs	r3, #25
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4970      	ldr	r1, [pc, #448]	; (80021b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fc5e 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0d3      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_I2C_Master_Transmit+0x50>
 800200c:	2302      	movs	r3, #2
 800200e:	e0cc      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d007      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2221      	movs	r2, #33	; 0x21
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2210      	movs	r2, #16
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	893a      	ldrh	r2, [r7, #8]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fad2 	bl	8002628 <I2C_MasterRequestWrite>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e08d      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020a4:	e066      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fcd8 	bl	8002a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d107      	bne.n	80020ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b04      	cmp	r3, #4
 800210e:	d11b      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x188>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d017      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	6a39      	ldr	r1, [r7, #32]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fcc8 	bl	8002ae2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e01a      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d194      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	00100002 	.word	0x00100002
 80021b8:	ffff0000 	.word	0xffff0000

080021bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	817b      	strh	r3, [r7, #10]
 80021ce:	460b      	mov	r3, r1
 80021d0:	813b      	strh	r3, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021d6:	f7ff f821 	bl	800121c <HAL_GetTick>
 80021da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	f040 8218 	bne.w	800261a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2319      	movs	r3, #25
 80021f0:	2201      	movs	r2, #1
 80021f2:	4981      	ldr	r1, [pc, #516]	; (80023f8 <HAL_I2C_Mem_Read+0x23c>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fb5d 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	e20b      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_I2C_Mem_Read+0x56>
 800220e:	2302      	movs	r3, #2
 8002210:	e204      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d007      	beq.n	8002238 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002246:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2222      	movs	r2, #34	; 0x22
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a61      	ldr	r2, [pc, #388]	; (80023fc <HAL_I2C_Mem_Read+0x240>)
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800227a:	88f8      	ldrh	r0, [r7, #6]
 800227c:	893a      	ldrh	r2, [r7, #8]
 800227e:	8979      	ldrh	r1, [r7, #10]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fa42 	bl	8002714 <I2C_RequestMemoryRead>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e1c0      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d113      	bne.n	80022ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	623b      	str	r3, [r7, #32]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	623b      	str	r3, [r7, #32]
 80022b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e194      	b.n	80025f4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d11d      	bne.n	800230e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002308:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800230a:	b662      	cpsie	i
 800230c:	e172      	b.n	80025f4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	2b02      	cmp	r3, #2
 8002314:	d11d      	bne.n	8002352 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002324:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002326:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800234e:	b662      	cpsie	i
 8002350:	e150      	b.n	80025f4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002360:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002378:	e13c      	b.n	80025f4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b03      	cmp	r3, #3
 8002380:	f200 80f5 	bhi.w	800256e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	2b01      	cmp	r3, #1
 800238a:	d123      	bne.n	80023d4 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fbe7 	bl	8002b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e13d      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023d2:	e10f      	b.n	80025f4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d150      	bne.n	800247e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	2200      	movs	r2, #0
 80023e4:	4906      	ldr	r1, [pc, #24]	; (8002400 <HAL_I2C_Mem_Read+0x244>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fa64 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e112      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
 80023f6:	bf00      	nop
 80023f8:	00100002 	.word	0x00100002
 80023fc:	ffff0000 	.word	0xffff0000
 8002400:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002448:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800247c:	e0ba      	b.n	80025f4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	2200      	movs	r2, #0
 8002486:	4967      	ldr	r1, [pc, #412]	; (8002624 <HAL_I2C_Mem_Read+0x468>)
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fa13 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0c1      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024a8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	2200      	movs	r2, #0
 80024e4:	494f      	ldr	r1, [pc, #316]	; (8002624 <HAL_I2C_Mem_Read+0x468>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f9e4 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e092      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002504:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002538:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800256c:	e042      	b.n	80025f4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 faf6 	bl	8002b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e04c      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d118      	bne.n	80025f4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f aebe 	bne.w	800237a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	00010004 	.word	0x00010004

08002628 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	460b      	mov	r3, r1
 8002636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d006      	beq.n	8002652 <I2C_MasterRequestWrite+0x2a>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d003      	beq.n	8002652 <I2C_MasterRequestWrite+0x2a>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002650:	d108      	bne.n	8002664 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e00b      	b.n	800267c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	2b12      	cmp	r3, #18
 800266a:	d107      	bne.n	800267c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f913 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e035      	b.n	8002704 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a0:	d108      	bne.n	80026b4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	e01b      	b.n	80026ec <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026b4:	897b      	ldrh	r3, [r7, #10]
 80026b6:	11db      	asrs	r3, r3, #7
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f003 0306 	and.w	r3, r3, #6
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f063 030f 	orn	r3, r3, #15
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	490e      	ldr	r1, [pc, #56]	; (800270c <I2C_MasterRequestWrite+0xe4>)
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f945 	bl	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e010      	b.n	8002704 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <I2C_MasterRequestWrite+0xe8>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f935 	bl	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	00010008 	.word	0x00010008
 8002710:	00010002 	.word	0x00010002

08002714 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2200      	movs	r2, #0
 8002756:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f8aa 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e09e      	b.n	80028a8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800276a:	897b      	ldrh	r3, [r7, #10]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002778:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	6a3a      	ldr	r2, [r7, #32]
 800277e:	494c      	ldr	r1, [pc, #304]	; (80028b0 <I2C_RequestMemoryRead+0x19c>)
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f8ee 	bl	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e08b      	b.n	80028a8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	6a39      	ldr	r1, [r7, #32]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f958 	bl	8002a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d107      	bne.n	80027ce <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e06a      	b.n	80028a8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027d8:	893b      	ldrh	r3, [r7, #8]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	e021      	b.n	8002828 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027e4:	893b      	ldrh	r3, [r7, #8]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f932 	bl	8002a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b04      	cmp	r3, #4
 8002808:	d107      	bne.n	800281a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002818:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e044      	b.n	80028a8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800281e:	893b      	ldrh	r3, [r7, #8]
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	6a39      	ldr	r1, [r7, #32]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f917 	bl	8002a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	2b04      	cmp	r3, #4
 800283e:	d107      	bne.n	8002850 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e029      	b.n	80028a8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002862:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2200      	movs	r2, #0
 800286c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f81f 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e013      	b.n	80028a8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002880:	897b      	ldrh	r3, [r7, #10]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	6a3a      	ldr	r2, [r7, #32]
 8002894:	4906      	ldr	r1, [pc, #24]	; (80028b0 <I2C_RequestMemoryRead+0x19c>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f863 	bl	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	00010002 	.word	0x00010002

080028b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c4:	e025      	b.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028cc:	d021      	beq.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ce:	f7fe fca5 	bl	800121c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e023      	b.n	800295a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10d      	bne.n	8002938 <I2C_WaitOnFlagUntilTimeout+0x84>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	e00c      	b.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	429a      	cmp	r2, r3
 8002956:	d0b6      	beq.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002970:	e051      	b.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d123      	bne.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800299a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e046      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d0:	d021      	beq.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7fe fc23 	bl	800121c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d116      	bne.n	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e020      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10c      	bne.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf14      	ite	ne
 8002a32:	2301      	movne	r3, #1
 8002a34:	2300      	moveq	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	e00b      	b.n	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d18d      	bne.n	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6c:	e02d      	b.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f8ce 	bl	8002c10 <I2C_IsAcknowledgeFailed>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a84:	d021      	beq.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe fbc9 	bl	800121c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d116      	bne.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e007      	b.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d1ca      	bne.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aee:	e02d      	b.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f88d 	bl	8002c10 <I2C_IsAcknowledgeFailed>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e02d      	b.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b06:	d021      	beq.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7fe fb88 	bl	800121c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e007      	b.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d1ca      	bne.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b70:	e042      	b.n	8002bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d119      	bne.n	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0210 	mvn.w	r2, #16
 8002b88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e029      	b.n	8002c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb4:	f7fe fb32 	bl	800121c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d302      	bcc.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e007      	b.n	8002c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d1b5      	bne.n	8002b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d11b      	bne.n	8002c60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e26c      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8087 	beq.w	8002d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8c:	4b92      	ldr	r3, [pc, #584]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d00c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c98:	4b8f      	ldr	r3, [pc, #572]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d112      	bne.n	8002cca <HAL_RCC_OscConfig+0x5e>
 8002ca4:	4b8c      	ldr	r3, [pc, #560]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d06c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x12c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d168      	bne.n	8002d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e246      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x76>
 8002cd4:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7f      	ldr	r2, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	e02e      	b.n	8002d40 <HAL_RCC_OscConfig+0xd4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x98>
 8002cea:	4b7b      	ldr	r3, [pc, #492]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7a      	ldr	r2, [pc, #488]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b78      	ldr	r3, [pc, #480]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a77      	ldr	r2, [pc, #476]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e01d      	b.n	8002d40 <HAL_RCC_OscConfig+0xd4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0xbc>
 8002d0e:	4b72      	ldr	r3, [pc, #456]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a71      	ldr	r2, [pc, #452]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6e      	ldr	r2, [pc, #440]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0xd4>
 8002d28:	4b6b      	ldr	r3, [pc, #428]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6a      	ldr	r2, [pc, #424]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fa68 	bl	800121c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fa64 	bl	800121c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1fa      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b5d      	ldr	r3, [pc, #372]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0xe4>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe fa54 	bl	800121c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d78:	f7fe fa50 	bl	800121c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1e6      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x10c>
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d063      	beq.n	8002e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da6:	4b4c      	ldr	r3, [pc, #304]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002db2:	4b49      	ldr	r3, [pc, #292]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d11c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x18c>
 8002dbe:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d116      	bne.n	8002df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dca:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_RCC_OscConfig+0x176>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e1ba      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4939      	ldr	r1, [pc, #228]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	e03a      	b.n	8002e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e00:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fe fa09 	bl	800121c <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fa05 	bl	800121c <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e19b      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4927      	ldr	r1, [pc, #156]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
 8002e40:	e015      	b.n	8002e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe f9e8 	bl	800121c <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e50:	f7fe f9e4 	bl	800121c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e17a      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d03a      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d019      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e88:	f7fe f9c8 	bl	800121c <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe f9c4 	bl	800121c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e15a      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f000 faac 	bl	800340c <RCC_Delay>
 8002eb4:	e01c      	b.n	8002ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe f9ae 	bl	800121c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec2:	e00f      	b.n	8002ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fe f9aa 	bl	800121c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d908      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e140      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	42420000 	.word	0x42420000
 8002ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	4b9e      	ldr	r3, [pc, #632]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e9      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a6 	beq.w	800304a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b97      	ldr	r3, [pc, #604]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	4b94      	ldr	r3, [pc, #592]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4a93      	ldr	r2, [pc, #588]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f18:	61d3      	str	r3, [r2, #28]
 8002f1a:	4b91      	ldr	r3, [pc, #580]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	4b8e      	ldr	r3, [pc, #568]	; (8003164 <HAL_RCC_OscConfig+0x4f8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d118      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f36:	4b8b      	ldr	r3, [pc, #556]	; (8003164 <HAL_RCC_OscConfig+0x4f8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a8a      	ldr	r2, [pc, #552]	; (8003164 <HAL_RCC_OscConfig+0x4f8>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f42:	f7fe f96b 	bl	800121c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4a:	f7fe f967 	bl	800121c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b64      	cmp	r3, #100	; 0x64
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0fd      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	4b81      	ldr	r3, [pc, #516]	; (8003164 <HAL_RCC_OscConfig+0x4f8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x312>
 8002f70:	4b7b      	ldr	r3, [pc, #492]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4a7a      	ldr	r2, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6213      	str	r3, [r2, #32]
 8002f7c:	e02d      	b.n	8002fda <HAL_RCC_OscConfig+0x36e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x334>
 8002f86:	4b76      	ldr	r3, [pc, #472]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4a75      	ldr	r2, [pc, #468]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	4b73      	ldr	r3, [pc, #460]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4a72      	ldr	r2, [pc, #456]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	6213      	str	r3, [r2, #32]
 8002f9e:	e01c      	b.n	8002fda <HAL_RCC_OscConfig+0x36e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x356>
 8002fa8:	4b6d      	ldr	r3, [pc, #436]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4a6c      	ldr	r2, [pc, #432]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6213      	str	r3, [r2, #32]
 8002fb4:	4b6a      	ldr	r3, [pc, #424]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4a69      	ldr	r2, [pc, #420]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6213      	str	r3, [r2, #32]
 8002fc0:	e00b      	b.n	8002fda <HAL_RCC_OscConfig+0x36e>
 8002fc2:	4b67      	ldr	r3, [pc, #412]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a66      	ldr	r2, [pc, #408]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	4b64      	ldr	r3, [pc, #400]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d015      	beq.n	800300e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe f91b 	bl	800121c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe f917 	bl	800121c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0ab      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	4b57      	ldr	r3, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RCC_OscConfig+0x37e>
 800300c:	e014      	b.n	8003038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fe f905 	bl	800121c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f901 	bl	800121c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e095      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302c:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ee      	bne.n	8003016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303e:	4b48      	ldr	r3, [pc, #288]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	4a47      	ldr	r2, [pc, #284]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8081 	beq.w	8003156 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003054:	4b42      	ldr	r3, [pc, #264]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b08      	cmp	r3, #8
 800305e:	d061      	beq.n	8003124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d146      	bne.n	80030f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003068:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <HAL_RCC_OscConfig+0x4fc>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe f8d5 	bl	800121c <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe f8d1 	bl	800121c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e067      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d108      	bne.n	80030b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800309e:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f023 020f 	bic.w	r2, r3, #15
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	492d      	ldr	r1, [pc, #180]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b0:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a19      	ldr	r1, [r3, #32]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	430b      	orrs	r3, r1
 80030c2:	4927      	ldr	r1, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x4fc>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fe f8a5 	bl	800121c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe f8a1 	bl	800121c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e037      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x46a>
 80030f4:	e02f      	b.n	8003156 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <HAL_RCC_OscConfig+0x4fc>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe f88e 	bl	800121c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe f88a 	bl	800121c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e020      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x498>
 8003122:	e018      	b.n	8003156 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e013      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	429a      	cmp	r2, r3
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d001      	beq.n	8003156 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	40007000 	.word	0x40007000
 8003168:	42420060 	.word	0x42420060

0800316c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0a0      	b.n	80032c2 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003198:	4b4c      	ldr	r3, [pc, #304]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a4b      	ldr	r2, [pc, #300]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 800319e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b0:	4b46      	ldr	r3, [pc, #280]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a45      	ldr	r2, [pc, #276]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 80031b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b43      	ldr	r3, [pc, #268]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4940      	ldr	r1, [pc, #256]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d040      	beq.n	800325c <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d115      	bne.n	800321a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e067      	b.n	80032c2 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e05b      	b.n	80032c2 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e053      	b.n	80032c2 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f023 0203 	bic.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4929      	ldr	r1, [pc, #164]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800322c:	f7fd fff6 	bl	800121c <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	e00a      	b.n	800324a <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7fd fff2 	bl	800121c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e03b      	b.n	80032c2 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 020c 	and.w	r2, r3, #12
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	429a      	cmp	r2, r3
 800325a:	d1eb      	bne.n	8003234 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4915      	ldr	r1, [pc, #84]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490d      	ldr	r1, [pc, #52]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f81f 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800329e:	4601      	mov	r1, r0
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_ClockConfig+0x160>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <HAL_RCC_ClockConfig+0x164>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	fa21 f303 	lsr.w	r3, r1, r3
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <HAL_RCC_ClockConfig+0x168>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCC_ClockConfig+0x16c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd ff6c 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08006bc8 	.word	0x08006bc8
 80032d4:	20000064 	.word	0x20000064
 80032d8:	20000000 	.word	0x20000000

080032dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	b490      	push	{r4, r7}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032e2:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032e4:	f107 0414 	add.w	r4, r7, #20
 80032e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f0:	1d3c      	adds	r4, r7, #4
 80032f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032fc:	2300      	movs	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003300:	2300      	movs	r3, #0
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b04      	cmp	r3, #4
 800331a:	d002      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x46>
 800331c:	2b08      	cmp	r3, #8
 800331e:	d003      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x4c>
 8003320:	e02c      	b.n	800337c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003326:	e02c      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	0c9b      	lsrs	r3, r3, #18
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003334:	4413      	add	r3, r2
 8003336:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003352:	4413      	add	r3, r2
 8003354:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	4a0f      	ldr	r2, [pc, #60]	; (800339c <HAL_RCC_GetSysClockFreq+0xc0>)
 800335e:	fb02 f203 	mul.w	r2, r2, r3
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
 800336a:	e004      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8003376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800337a:	e002      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003384:	4618      	mov	r0, r3
 8003386:	3738      	adds	r7, #56	; 0x38
 8003388:	46bd      	mov	sp, r7
 800338a:	bc90      	pop	{r4, r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	08006ba8 	.word	0x08006ba8
 8003394:	08006bb8 	.word	0x08006bb8
 8003398:	40021000 	.word	0x40021000
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	003d0900 	.word	0x003d0900
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b02      	ldr	r3, [pc, #8]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000064 	.word	0x20000064

080033bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c0:	f7ff fff2 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c4:	4601      	mov	r1, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08006bd8 	.word	0x08006bd8

080033e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033e8:	f7ff ffde 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033ec:	4601      	mov	r1, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	0adb      	lsrs	r3, r3, #11
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4a03      	ldr	r2, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fa:	5cd3      	ldrb	r3, [r2, r3]
 80033fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	08006bd8 	.word	0x08006bd8

0800340c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <RCC_Delay+0x34>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <RCC_Delay+0x38>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0a5b      	lsrs	r3, r3, #9
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003428:	bf00      	nop
  }
  while (Delay --);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e5a      	subs	r2, r3, #1
 800342e:	60fa      	str	r2, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f9      	bne.n	8003428 <RCC_Delay+0x1c>
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000064 	.word	0x20000064
 8003444:	10624dd3 	.word	0x10624dd3

08003448 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d07d      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003464:	2300      	movs	r3, #0
 8003466:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003468:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b44      	ldr	r3, [pc, #272]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4a43      	ldr	r2, [pc, #268]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348c:	2301      	movs	r3, #1
 800348e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d118      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a3a      	ldr	r2, [pc, #232]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80034a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a8:	f7fd feb8 	bl	800121c <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ae:	e008      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b0:	f7fd feb4 	bl	800121c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e05e      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c2:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d02e      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d027      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ec:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003502:	4a21      	ldr	r2, [pc, #132]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d014      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd fe83 	bl	800121c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fd fe7f 	bl	800121c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e027      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003530:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ee      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	490f      	ldr	r1, [pc, #60]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800354a:	4313      	orrs	r3, r2
 800354c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800355a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	40007000 	.word	0x40007000
 8003590:	42420440 	.word	0x42420440

08003594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e01d      	b.n	80035e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f002 fcd8 	bl	8005f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 fb94 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b06      	cmp	r3, #6
 8003612:	d007      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e01d      	b.n	800367e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f002 fd1e 	bl	8006098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	4619      	mov	r1, r3
 800366e:	4610      	mov	r0, r2
 8003670:	f000 fb46 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b0c      	cmp	r3, #12
 8003696:	d841      	bhi.n	800371c <HAL_TIM_PWM_Start_IT+0x94>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <HAL_TIM_PWM_Start_IT+0x18>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036d5 	.word	0x080036d5
 80036a4:	0800371d 	.word	0x0800371d
 80036a8:	0800371d 	.word	0x0800371d
 80036ac:	0800371d 	.word	0x0800371d
 80036b0:	080036e7 	.word	0x080036e7
 80036b4:	0800371d 	.word	0x0800371d
 80036b8:	0800371d 	.word	0x0800371d
 80036bc:	0800371d 	.word	0x0800371d
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	0800371d 	.word	0x0800371d
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	0800371d 	.word	0x0800371d
 80036d0:	0800370b 	.word	0x0800370b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0202 	orr.w	r2, r2, #2
 80036e2:	60da      	str	r2, [r3, #12]
      break;
 80036e4:	e01b      	b.n	800371e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0204 	orr.w	r2, r2, #4
 80036f4:	60da      	str	r2, [r3, #12]
      break;
 80036f6:	e012      	b.n	800371e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0208 	orr.w	r2, r2, #8
 8003706:	60da      	str	r2, [r3, #12]
      break;
 8003708:	e009      	b.n	800371e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0210 	orr.w	r2, r2, #16
 8003718:	60da      	str	r2, [r3, #12]
      break;
 800371a:	e000      	b.n	800371e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800371c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fddc 	bl	80042e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1a      	ldr	r2, [pc, #104]	; (800379c <HAL_TIM_PWM_Start_IT+0x114>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00e      	beq.n	8003754 <HAL_TIM_PWM_Start_IT+0xcc>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_TIM_PWM_Start_IT+0x118>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d009      	beq.n	8003754 <HAL_TIM_PWM_Start_IT+0xcc>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <HAL_TIM_PWM_Start_IT+0x11c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_TIM_PWM_Start_IT+0xcc>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <HAL_TIM_PWM_Start_IT+0x120>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_TIM_PWM_Start_IT+0xd0>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_TIM_PWM_Start_IT+0xd2>
 8003758:	2300      	movs	r3, #0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_TIM_PWM_Start_IT+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d007      	beq.n	8003790 <HAL_TIM_PWM_Start_IT+0x108>
  {
    __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800

080037ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0202 	mvn.w	r2, #2
 80037d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa6a 	bl	8003cc8 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa5d 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa6c 	bl	8003cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0204 	mvn.w	r2, #4
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa40 	bl	8003cc8 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa33 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa42 	bl	8003cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b08      	cmp	r3, #8
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0208 	mvn.w	r2, #8
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa16 	bl	8003cc8 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa09 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fa18 	bl	8003cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0210 	mvn.w	r2, #16
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2208      	movs	r2, #8
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9ec 	bl	8003cc8 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f9df 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f9ee 	bl	8003cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0201 	mvn.w	r2, #1
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f001 fd9a 	bl	8005464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b80      	cmp	r3, #128	; 0x80
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fd35 	bl	80043c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f9b2 	bl	8003cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b20      	cmp	r3, #32
 8003994:	d10e      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0220 	mvn.w	r2, #32
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fd00 	bl	80043b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e0b4      	b.n	8003b40 <HAL_TIM_PWM_ConfigChannel+0x184>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	f200 809f 	bhi.w	8003b2c <HAL_TIM_PWM_ConfigChannel+0x170>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003b2d 	.word	0x08003b2d
 80039fc:	08003b2d 	.word	0x08003b2d
 8003a00:	08003b2d 	.word	0x08003b2d
 8003a04:	08003a69 	.word	0x08003a69
 8003a08:	08003b2d 	.word	0x08003b2d
 8003a0c:	08003b2d 	.word	0x08003b2d
 8003a10:	08003b2d 	.word	0x08003b2d
 8003a14:	08003aab 	.word	0x08003aab
 8003a18:	08003b2d 	.word	0x08003b2d
 8003a1c:	08003b2d 	.word	0x08003b2d
 8003a20:	08003b2d 	.word	0x08003b2d
 8003a24:	08003aeb 	.word	0x08003aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f9e6 	bl	8003e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
      break;
 8003a66:	e062      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fa4a 	bl	8003f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6999      	ldr	r1, [r3, #24]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
      break;
 8003aa8:	e041      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 faa5 	bl	8004000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0204 	bic.w	r2, r2, #4
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
      break;
 8003ae8:	e021      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fb01 	bl	80040f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]
      break;
 8003b2a:	e000      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIM_ConfigClockSource+0x18>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e0a6      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x166>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d067      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x120>
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d80b      	bhi.n	8003bb4 <HAL_TIM_ConfigClockSource+0x6c>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d073      	beq.n	8003c88 <HAL_TIM_ConfigClockSource+0x140>
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d802      	bhi.n	8003baa <HAL_TIM_ConfigClockSource+0x62>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d06f      	beq.n	8003c88 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ba8:	e078      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d06c      	beq.n	8003c88 <HAL_TIM_ConfigClockSource+0x140>
 8003bae:	2b30      	cmp	r3, #48	; 0x30
 8003bb0:	d06a      	beq.n	8003c88 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003bb2:	e073      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bb4:	2b70      	cmp	r3, #112	; 0x70
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_TIM_ConfigClockSource+0x8c>
 8003bb8:	2b70      	cmp	r3, #112	; 0x70
 8003bba:	d804      	bhi.n	8003bc6 <HAL_TIM_ConfigClockSource+0x7e>
 8003bbc:	2b50      	cmp	r3, #80	; 0x50
 8003bbe:	d033      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0xe0>
 8003bc0:	2b60      	cmp	r3, #96	; 0x60
 8003bc2:	d041      	beq.n	8003c48 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bc4:	e06a      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	d066      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x152>
 8003bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd0:	d017      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003bd2:	e063      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f000 fb5f 	bl	80042a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bf6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	609a      	str	r2, [r3, #8]
      break;
 8003c00:	e04c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f000 fb48 	bl	80042a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c24:	609a      	str	r2, [r3, #8]
      break;
 8003c26:	e039      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f000 fabf 	bl	80041b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2150      	movs	r1, #80	; 0x50
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fb16 	bl	8004272 <TIM_ITRx_SetConfig>
      break;
 8003c46:	e029      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f000 fadd 	bl	8004214 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2160      	movs	r1, #96	; 0x60
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fb06 	bl	8004272 <TIM_ITRx_SetConfig>
      break;
 8003c66:	e019      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	461a      	mov	r2, r3
 8003c76:	f000 fa9f 	bl	80041b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2140      	movs	r1, #64	; 0x40
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 faf6 	bl	8004272 <TIM_ITRx_SetConfig>
      break;
 8003c86:	e009      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 faed 	bl	8004272 <TIM_ITRx_SetConfig>
      break;
 8003c98:	e000      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
	...

08003d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a35      	ldr	r2, [pc, #212]	; (8003de8 <TIM_Base_SetConfig+0xe8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0x30>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0x30>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a32      	ldr	r2, [pc, #200]	; (8003dec <TIM_Base_SetConfig+0xec>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0x30>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a31      	ldr	r2, [pc, #196]	; (8003df0 <TIM_Base_SetConfig+0xf0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <TIM_Base_SetConfig+0xe8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d017      	beq.n	8003d7a <TIM_Base_SetConfig+0x7a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d013      	beq.n	8003d7a <TIM_Base_SetConfig+0x7a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a25      	ldr	r2, [pc, #148]	; (8003dec <TIM_Base_SetConfig+0xec>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_Base_SetConfig+0x7a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <TIM_Base_SetConfig+0xf0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_Base_SetConfig+0x7a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <TIM_Base_SetConfig+0xf4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_Base_SetConfig+0x7a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <TIM_Base_SetConfig+0xf8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0x7a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <TIM_Base_SetConfig+0xfc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d108      	bne.n	8003d8c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <TIM_Base_SetConfig+0xe8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <TIM_Base_SetConfig+0xd0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <TIM_Base_SetConfig+0xf4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_Base_SetConfig+0xd0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <TIM_Base_SetConfig+0xf8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_Base_SetConfig+0xd0>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <TIM_Base_SetConfig+0xfc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d103      	bne.n	8003dd8 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	615a      	str	r2, [r3, #20]
}
 8003dde:	bf00      	nop
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40014400 	.word	0x40014400
 8003dfc:	40014800 	.word	0x40014800

08003e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f023 0201 	bic.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 0302 	bic.w	r3, r3, #2
 8003e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a28      	ldr	r2, [pc, #160]	; (8003ef8 <TIM_OC1_SetConfig+0xf8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <TIM_OC1_SetConfig+0x74>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a27      	ldr	r2, [pc, #156]	; (8003efc <TIM_OC1_SetConfig+0xfc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <TIM_OC1_SetConfig+0x74>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <TIM_OC1_SetConfig+0x100>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_OC1_SetConfig+0x74>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <TIM_OC1_SetConfig+0x104>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10c      	bne.n	8003e8e <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0308 	bic.w	r3, r3, #8
 8003e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f023 0304 	bic.w	r3, r3, #4
 8003e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <TIM_OC1_SetConfig+0xf8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00b      	beq.n	8003eae <TIM_OC1_SetConfig+0xae>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <TIM_OC1_SetConfig+0xfc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <TIM_OC1_SetConfig+0xae>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <TIM_OC1_SetConfig+0x100>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_OC1_SetConfig+0xae>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <TIM_OC1_SetConfig+0x104>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d111      	bne.n	8003ed2 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0210 	bic.w	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0320 	bic.w	r3, r3, #32
 8003f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a23      	ldr	r2, [pc, #140]	; (8003ff0 <TIM_OC2_SetConfig+0xe8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10d      	bne.n	8003f84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a1a      	ldr	r2, [pc, #104]	; (8003ff0 <TIM_OC2_SetConfig+0xe8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_OC2_SetConfig+0x9c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <TIM_OC2_SetConfig+0xec>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_OC2_SetConfig+0x9c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <TIM_OC2_SetConfig+0xf0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC2_SetConfig+0x9c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <TIM_OC2_SetConfig+0xf4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d113      	bne.n	8003fcc <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800

08004000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <TIM_OC3_SetConfig+0xe8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10d      	bne.n	800407a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <TIM_OC3_SetConfig+0xe8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00b      	beq.n	800409a <TIM_OC3_SetConfig+0x9a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <TIM_OC3_SetConfig+0xec>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <TIM_OC3_SetConfig+0x9a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <TIM_OC3_SetConfig+0xf0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_OC3_SetConfig+0x9a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <TIM_OC3_SetConfig+0xf4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d113      	bne.n	80040c2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800

080040f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	031b      	lsls	r3, r3, #12
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <TIM_OC4_SetConfig+0xb0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <TIM_OC4_SetConfig+0x78>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a14      	ldr	r2, [pc, #80]	; (80041ac <TIM_OC4_SetConfig+0xb4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <TIM_OC4_SetConfig+0x78>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <TIM_OC4_SetConfig+0xb8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_OC4_SetConfig+0x78>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <TIM_OC4_SetConfig+0xbc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d109      	bne.n	8004184 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	019b      	lsls	r3, r3, #6
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40014400 	.word	0x40014400
 80041b4:	40014800 	.word	0x40014800

080041b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f023 030a 	bic.w	r3, r3, #10
 80041f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f023 0210 	bic.w	r2, r3, #16
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800423e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	031b      	lsls	r3, r3, #12
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004250:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	621a      	str	r2, [r3, #32]
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	f043 0307 	orr.w	r3, r3, #7
 8004294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr

080042a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	021a      	lsls	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	609a      	str	r2, [r3, #8]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2201      	movs	r2, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	43db      	mvns	r3, r3
 8004306:	401a      	ands	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004340:	2302      	movs	r3, #2
 8004342:	e032      	b.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	4313      	orrs	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e03f      	b.n	800446a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 feb6 	bl	8006170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	; 0x24
 8004408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800441a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f87d 	bl	800451c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695a      	ldr	r2, [r3, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	4613      	mov	r3, r2
 800447e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b20      	cmp	r3, #32
 800448a:	d140      	bne.n	800450e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_UART_Receive_IT+0x26>
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e039      	b.n	8004510 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_UART_Receive_IT+0x38>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e032      	b.n	8004510 <HAL_UART_Receive_IT+0x9e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2222      	movs	r2, #34	; 0x22
 80044ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0220 	orr.w	r2, r2, #32
 8004508:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
	...

0800451c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800455c:	f023 030c 	bic.w	r3, r3, #12
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	430b      	orrs	r3, r1
 8004568:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	f040 80a5 	bne.w	80046d6 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4aa4      	ldr	r2, [pc, #656]	; (8004824 <UART_SetConfig+0x308>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d14f      	bne.n	8004636 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004596:	f7fe ff25 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 800459a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009a      	lsls	r2, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	4a9d      	ldr	r2, [pc, #628]	; (8004828 <UART_SetConfig+0x30c>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	0119      	lsls	r1, r3, #4
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009a      	lsls	r2, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d2:	4b95      	ldr	r3, [pc, #596]	; (8004828 <UART_SetConfig+0x30c>)
 80045d4:	fba3 0302 	umull	r0, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	2064      	movs	r0, #100	; 0x64
 80045dc:	fb00 f303 	mul.w	r3, r0, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	3332      	adds	r3, #50	; 0x32
 80045e6:	4a90      	ldr	r2, [pc, #576]	; (8004828 <UART_SetConfig+0x30c>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f4:	4419      	add	r1, r3
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009a      	lsls	r2, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	fbb2 f2f3 	udiv	r2, r2, r3
 800460c:	4b86      	ldr	r3, [pc, #536]	; (8004828 <UART_SetConfig+0x30c>)
 800460e:	fba3 0302 	umull	r0, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2064      	movs	r0, #100	; 0x64
 8004616:	fb00 f303 	mul.w	r3, r0, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	3332      	adds	r3, #50	; 0x32
 8004620:	4a81      	ldr	r2, [pc, #516]	; (8004828 <UART_SetConfig+0x30c>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 0207 	and.w	r2, r3, #7
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	440a      	add	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004634:	e0f1      	b.n	800481a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004636:	f7fe fec1 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 800463a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009a      	lsls	r2, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	4a75      	ldr	r2, [pc, #468]	; (8004828 <UART_SetConfig+0x30c>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	0119      	lsls	r1, r3, #4
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009a      	lsls	r2, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004672:	4b6d      	ldr	r3, [pc, #436]	; (8004828 <UART_SetConfig+0x30c>)
 8004674:	fba3 0302 	umull	r0, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2064      	movs	r0, #100	; 0x64
 800467c:	fb00 f303 	mul.w	r3, r0, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a68      	ldr	r2, [pc, #416]	; (8004828 <UART_SetConfig+0x30c>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004694:	4419      	add	r1, r3
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009a      	lsls	r2, r3, #2
 80046a0:	441a      	add	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ac:	4b5e      	ldr	r3, [pc, #376]	; (8004828 <UART_SetConfig+0x30c>)
 80046ae:	fba3 0302 	umull	r0, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2064      	movs	r0, #100	; 0x64
 80046b6:	fb00 f303 	mul.w	r3, r0, r3
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	3332      	adds	r3, #50	; 0x32
 80046c0:	4a59      	ldr	r2, [pc, #356]	; (8004828 <UART_SetConfig+0x30c>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	f003 0207 	and.w	r2, r3, #7
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	440a      	add	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
}
 80046d4:	e0a1      	b.n	800481a <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a52      	ldr	r2, [pc, #328]	; (8004824 <UART_SetConfig+0x308>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d14e      	bne.n	800477e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7fe fe80 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 80046e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	009a      	lsls	r2, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <UART_SetConfig+0x30c>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	0119      	lsls	r1, r3, #4
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009a      	lsls	r2, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fbb2 f2f3 	udiv	r2, r2, r3
 800471c:	4b42      	ldr	r3, [pc, #264]	; (8004828 <UART_SetConfig+0x30c>)
 800471e:	fba3 0302 	umull	r0, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2064      	movs	r0, #100	; 0x64
 8004726:	fb00 f303 	mul.w	r3, r0, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a3d      	ldr	r2, [pc, #244]	; (8004828 <UART_SetConfig+0x30c>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	4419      	add	r1, r3
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009a      	lsls	r2, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	fbb2 f2f3 	udiv	r2, r2, r3
 8004754:	4b34      	ldr	r3, [pc, #208]	; (8004828 <UART_SetConfig+0x30c>)
 8004756:	fba3 0302 	umull	r0, r3, r3, r2
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	2064      	movs	r0, #100	; 0x64
 800475e:	fb00 f303 	mul.w	r3, r0, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	3332      	adds	r3, #50	; 0x32
 8004768:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <UART_SetConfig+0x30c>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	440a      	add	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
}
 800477c:	e04d      	b.n	800481a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800477e:	f7fe fe1d 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8004782:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	4a23      	ldr	r2, [pc, #140]	; (8004828 <UART_SetConfig+0x30c>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	0119      	lsls	r1, r3, #4
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009a      	lsls	r2, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <UART_SetConfig+0x30c>)
 80047bc:	fba3 0302 	umull	r0, r3, r3, r2
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	2064      	movs	r0, #100	; 0x64
 80047c4:	fb00 f303 	mul.w	r3, r0, r3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	3332      	adds	r3, #50	; 0x32
 80047ce:	4a16      	ldr	r2, [pc, #88]	; (8004828 <UART_SetConfig+0x30c>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047da:	4419      	add	r1, r3
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009a      	lsls	r2, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <UART_SetConfig+0x30c>)
 80047f4:	fba3 0302 	umull	r0, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2064      	movs	r0, #100	; 0x64
 80047fc:	fb00 f303 	mul.w	r3, r0, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a08      	ldr	r2, [pc, #32]	; (8004828 <UART_SetConfig+0x30c>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f003 020f 	and.w	r2, r3, #15
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	440a      	add	r2, r1
 8004818:	609a      	str	r2, [r3, #8]
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40013800 	.word	0x40013800
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <kalmanInit>:
 *  Created on: 13.11.2018
 *      Author: user
 */
#include "Kalman.h"

void kalmanInit(){
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
/*Variables used to adjust filter*/


	Q_angle = 0.0005f;
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <kalmanInit+0x4c>)
 8004832:	4a12      	ldr	r2, [pc, #72]	; (800487c <kalmanInit+0x50>)
 8004834:	601a      	str	r2, [r3, #0]
	Q_bias = 0.0005f;
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <kalmanInit+0x54>)
 8004838:	4a10      	ldr	r2, [pc, #64]	; (800487c <kalmanInit+0x50>)
 800483a:	601a      	str	r2, [r3, #0]
	R_measure = 0.0003f;
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <kalmanInit+0x58>)
 800483e:	4a12      	ldr	r2, [pc, #72]	; (8004888 <kalmanInit+0x5c>)
 8004840:	601a      	str	r2, [r3, #0]

	_angle = 0.0f; // Reset the angle
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <kalmanInit+0x60>)
 8004844:	2200      	movs	r2, #0
 8004846:	801a      	strh	r2, [r3, #0]
	_bias = 0.0f; // Reset bias
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <kalmanInit+0x64>)
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

	P[0][0] = 0.0f;
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <kalmanInit+0x68>)
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
	P[0][1] = 0.0f;
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <kalmanInit+0x68>)
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	605a      	str	r2, [r3, #4]
	P[1][0] = 0.0f;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <kalmanInit+0x68>)
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
	P[1][1] = 0.0f;
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <kalmanInit+0x68>)
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	60da      	str	r2, [r3, #12]
}
 8004870:	bf00      	nop
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	20000110 	.word	0x20000110
 800487c:	3a03126f 	.word	0x3a03126f
 8004880:	20000100 	.word	0x20000100
 8004884:	2000011c 	.word	0x2000011c
 8004888:	399d4952 	.word	0x399d4952
 800488c:	20000128 	.word	0x20000128
 8004890:	20000134 	.word	0x20000134
 8004894:	20000138 	.word	0x20000138

08004898 <getKalmanAngle>:


int16_t getKalmanAngle(float newAngle, float newRate, float dt) {
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b08b      	sub	sp, #44	; 0x2c
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]

    _rate = newRate - _bias;
 80048a4:	4b8f      	ldr	r3, [pc, #572]	; (8004ae4 <getKalmanAngle+0x24c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	68b8      	ldr	r0, [r7, #8]
 80048ac:	f7fc f970 	bl	8000b90 <__aeabi_fsub>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	4b8c      	ldr	r3, [pc, #560]	; (8004ae8 <getKalmanAngle+0x250>)
 80048b6:	601a      	str	r2, [r3, #0]
    _angle += dt * _rate;
 80048b8:	4b8c      	ldr	r3, [pc, #560]	; (8004aec <getKalmanAngle+0x254>)
 80048ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fc fa1c 	bl	8000cfc <__aeabi_i2f>
 80048c4:	4604      	mov	r4, r0
 80048c6:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <getKalmanAngle+0x250>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fc fa69 	bl	8000da4 <__aeabi_fmul>
 80048d2:	4603      	mov	r3, r0
 80048d4:	4619      	mov	r1, r3
 80048d6:	4620      	mov	r0, r4
 80048d8:	f7fc f95c 	bl	8000b94 <__addsf3>
 80048dc:	4603      	mov	r3, r0
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc fc26 	bl	8001130 <__aeabi_f2iz>
 80048e4:	4603      	mov	r3, r0
 80048e6:	b21a      	sxth	r2, r3
 80048e8:	4b80      	ldr	r3, [pc, #512]	; (8004aec <getKalmanAngle+0x254>)
 80048ea:	801a      	strh	r2, [r3, #0]

    // Update estimation error covariance - Project the error covariance ahead
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
 80048ec:	4b80      	ldr	r3, [pc, #512]	; (8004af0 <getKalmanAngle+0x258>)
 80048ee:	681c      	ldr	r4, [r3, #0]
 80048f0:	4b7f      	ldr	r3, [pc, #508]	; (8004af0 <getKalmanAngle+0x258>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fc fa54 	bl	8000da4 <__aeabi_fmul>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	4b7b      	ldr	r3, [pc, #492]	; (8004af0 <getKalmanAngle+0x258>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7fc f942 	bl	8000b90 <__aeabi_fsub>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	4b77      	ldr	r3, [pc, #476]	; (8004af0 <getKalmanAngle+0x258>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f7fc f93a 	bl	8000b90 <__aeabi_fsub>
 800491c:	4603      	mov	r3, r0
 800491e:	461a      	mov	r2, r3
 8004920:	4b74      	ldr	r3, [pc, #464]	; (8004af4 <getKalmanAngle+0x25c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f7fc f934 	bl	8000b94 <__addsf3>
 800492c:	4603      	mov	r3, r0
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	f7fc fa37 	bl	8000da4 <__aeabi_fmul>
 8004936:	4603      	mov	r3, r0
 8004938:	4619      	mov	r1, r3
 800493a:	4620      	mov	r0, r4
 800493c:	f7fc f92a 	bl	8000b94 <__addsf3>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <getKalmanAngle+0x258>)
 8004946:	601a      	str	r2, [r3, #0]
    P[0][1] -= dt * P[1][1];
 8004948:	4b69      	ldr	r3, [pc, #420]	; (8004af0 <getKalmanAngle+0x258>)
 800494a:	685c      	ldr	r4, [r3, #4]
 800494c:	4b68      	ldr	r3, [pc, #416]	; (8004af0 <getKalmanAngle+0x258>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fa26 	bl	8000da4 <__aeabi_fmul>
 8004958:	4603      	mov	r3, r0
 800495a:	4619      	mov	r1, r3
 800495c:	4620      	mov	r0, r4
 800495e:	f7fc f917 	bl	8000b90 <__aeabi_fsub>
 8004962:	4603      	mov	r3, r0
 8004964:	461a      	mov	r2, r3
 8004966:	4b62      	ldr	r3, [pc, #392]	; (8004af0 <getKalmanAngle+0x258>)
 8004968:	605a      	str	r2, [r3, #4]
    P[1][0] -= dt * P[1][1];
 800496a:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <getKalmanAngle+0x258>)
 800496c:	689c      	ldr	r4, [r3, #8]
 800496e:	4b60      	ldr	r3, [pc, #384]	; (8004af0 <getKalmanAngle+0x258>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc fa15 	bl	8000da4 <__aeabi_fmul>
 800497a:	4603      	mov	r3, r0
 800497c:	4619      	mov	r1, r3
 800497e:	4620      	mov	r0, r4
 8004980:	f7fc f906 	bl	8000b90 <__aeabi_fsub>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	4b59      	ldr	r3, [pc, #356]	; (8004af0 <getKalmanAngle+0x258>)
 800498a:	609a      	str	r2, [r3, #8]
    P[1][1] += Q_bias * dt;
 800498c:	4b58      	ldr	r3, [pc, #352]	; (8004af0 <getKalmanAngle+0x258>)
 800498e:	68dc      	ldr	r4, [r3, #12]
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <getKalmanAngle+0x260>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc fa04 	bl	8000da4 <__aeabi_fmul>
 800499c:	4603      	mov	r3, r0
 800499e:	4619      	mov	r1, r3
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7fc f8f7 	bl	8000b94 <__addsf3>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b51      	ldr	r3, [pc, #324]	; (8004af0 <getKalmanAngle+0x258>)
 80049ac:	60da      	str	r2, [r3, #12]

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    float S = P[0][0] + R_measure; // Estimate error
 80049ae:	4b50      	ldr	r3, [pc, #320]	; (8004af0 <getKalmanAngle+0x258>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b52      	ldr	r3, [pc, #328]	; (8004afc <getKalmanAngle+0x264>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f7fc f8eb 	bl	8000b94 <__addsf3>
 80049be:	4603      	mov	r3, r0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24

    //Calculate Kalman gain
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
 80049c2:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <getKalmanAngle+0x258>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fc fa9f 	bl	8000f0c <__aeabi_fdiv>
 80049ce:	4603      	mov	r3, r0
 80049d0:	613b      	str	r3, [r7, #16]
    K[1] = P[1][0] / S;
 80049d2:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <getKalmanAngle+0x258>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc fa97 	bl	8000f0c <__aeabi_fdiv>
 80049de:	4603      	mov	r3, r0
 80049e0:	617b      	str	r3, [r7, #20]

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    float y = newAngle - _angle; // Angle difference
 80049e2:	4b42      	ldr	r3, [pc, #264]	; (8004aec <getKalmanAngle+0x254>)
 80049e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fc f987 	bl	8000cfc <__aeabi_i2f>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4619      	mov	r1, r3
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7fc f8cc 	bl	8000b90 <__aeabi_fsub>
 80049f8:	4603      	mov	r3, r0
 80049fa:	623b      	str	r3, [r7, #32]

    //Update angle and bias
    _angle += (int16_t)(K[0] * y);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6a39      	ldr	r1, [r7, #32]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fc f9cf 	bl	8000da4 <__aeabi_fmul>
 8004a06:	4603      	mov	r3, r0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fc fb91 	bl	8001130 <__aeabi_f2iz>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	b21b      	sxth	r3, r3
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	4b35      	ldr	r3, [pc, #212]	; (8004aec <getKalmanAngle+0x254>)
 8004a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	b21a      	sxth	r2, r3
 8004a22:	4b32      	ldr	r3, [pc, #200]	; (8004aec <getKalmanAngle+0x254>)
 8004a24:	801a      	strh	r2, [r3, #0]
    _bias += K[1] * y;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	6a39      	ldr	r1, [r7, #32]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fc f9ba 	bl	8000da4 <__aeabi_fmul>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461a      	mov	r2, r3
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <getKalmanAngle+0x24c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f7fc f8aa 	bl	8000b94 <__addsf3>
 8004a40:	4603      	mov	r3, r0
 8004a42:	461a      	mov	r2, r3
 8004a44:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <getKalmanAngle+0x24c>)
 8004a46:	601a      	str	r2, [r3, #0]

    // Calculate estimation error covariance - Update the error covariance
    float P00_temp = P[0][0];
 8004a48:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <getKalmanAngle+0x258>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	61fb      	str	r3, [r7, #28]
    float P01_temp = P[0][1];
 8004a4e:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <getKalmanAngle+0x258>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	61bb      	str	r3, [r7, #24]

    P[0][0] -= K[0] * P00_temp;
 8004a54:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <getKalmanAngle+0x258>)
 8004a56:	681c      	ldr	r4, [r3, #0]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	69f9      	ldr	r1, [r7, #28]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fc f9a1 	bl	8000da4 <__aeabi_fmul>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4619      	mov	r1, r3
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7fc f892 	bl	8000b90 <__aeabi_fsub>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <getKalmanAngle+0x258>)
 8004a72:	601a      	str	r2, [r3, #0]
    P[0][1] -= K[0] * P01_temp;
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <getKalmanAngle+0x258>)
 8004a76:	685c      	ldr	r4, [r3, #4]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	69b9      	ldr	r1, [r7, #24]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fc f991 	bl	8000da4 <__aeabi_fmul>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4619      	mov	r1, r3
 8004a86:	4620      	mov	r0, r4
 8004a88:	f7fc f882 	bl	8000b90 <__aeabi_fsub>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <getKalmanAngle+0x258>)
 8004a92:	605a      	str	r2, [r3, #4]
    P[1][0] -= K[1] * P00_temp;
 8004a94:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <getKalmanAngle+0x258>)
 8004a96:	689c      	ldr	r4, [r3, #8]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	69f9      	ldr	r1, [r7, #28]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fc f981 	bl	8000da4 <__aeabi_fmul>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7fc f872 	bl	8000b90 <__aeabi_fsub>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <getKalmanAngle+0x258>)
 8004ab2:	609a      	str	r2, [r3, #8]
    P[1][1] -= K[1] * P01_temp;
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <getKalmanAngle+0x258>)
 8004ab6:	68dc      	ldr	r4, [r3, #12]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fc f971 	bl	8000da4 <__aeabi_fmul>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f7fc f862 	bl	8000b90 <__aeabi_fsub>
 8004acc:	4603      	mov	r3, r0
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <getKalmanAngle+0x258>)
 8004ad2:	60da      	str	r2, [r3, #12]

    return _angle;
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <getKalmanAngle+0x254>)
 8004ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	372c      	adds	r7, #44	; 0x2c
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000134 	.word	0x20000134
 8004ae8:	20000114 	.word	0x20000114
 8004aec:	20000128 	.word	0x20000128
 8004af0:	20000138 	.word	0x20000138
 8004af4:	20000110 	.word	0x20000110
 8004af8:	20000100 	.word	0x20000100
 8004afc:	2000011c 	.word	0x2000011c

08004b00 <PID_Init>:
 *      Author: user
 */
#include "PID.h"
#include "main.h"

void PID_Init(){
 8004b00:	b490      	push	{r4, r7}
 8004b02:	af00      	add	r7, sp, #0
	speedIntegral = 0;
 8004b04:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <PID_Init+0x30>)
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
	angleIntegral = 0;
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <PID_Init+0x34>)
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
	previousError = 0;
 8004b14:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <PID_Init+0x38>)
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	f04f 0400 	mov.w	r4, #0
 8004b1e:	e9c2 3400 	strd	r3, r4, [r2]
	previousSpeed = 0;
 8004b22:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <PID_Init+0x3c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	801a      	strh	r2, [r3, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc90      	pop	{r4, r7}
 8004b2e:	4770      	bx	lr
 8004b30:	20000130 	.word	0x20000130
 8004b34:	2000012c 	.word	0x2000012c
 8004b38:	20000108 	.word	0x20000108
 8004b3c:	20000120 	.word	0x20000120

08004b40 <anglePID>:


void anglePID(float refAngle, int8_t realAngle){
 8004b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b44:	b08d      	sub	sp, #52	; 0x34
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	70fb      	strb	r3, [r7, #3]

	double error;
	float Kp = 5; //5.85
 8004b4e:	4b56      	ldr	r3, [pc, #344]	; (8004ca8 <anglePID+0x168>)
 8004b50:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Ki = 0;
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
	float Kd = 0;
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
	double v = 0;
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	e9c7 3406 	strd	r3, r4, [r7, #24]
	float dt = ((1 + TIM2->PSC)*(1+TIM2->ARR))/24000000;
 8004b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	3301      	adds	r3, #1
 8004b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b78:	3201      	adds	r2, #1
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <anglePID+0x16c>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	0d5b      	lsrs	r3, r3, #21
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fc f8b4 	bl	8000cf4 <__aeabi_ui2f>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	617b      	str	r3, [r7, #20]
	/*
	if(realAngle >= (refAngle - 3) && realAngle <= (refAngle + 3)){
		realAngle = refAngle;
	}
*/
	error = refAngle - realAngle;
 8004b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fc f8b1 	bl	8000cfc <__aeabi_i2f>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fb fff6 	bl	8000b90 <__aeabi_fsub>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fb fc96 	bl	80004d8 <__aeabi_f2d>
 8004bac:	4603      	mov	r3, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	angleIntegral = angleIntegral  + error * dt;
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <anglePID+0x170>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fb fc8d 	bl	80004d8 <__aeabi_f2d>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	460d      	mov	r5, r1
 8004bc2:	6978      	ldr	r0, [r7, #20]
 8004bc4:	f7fb fc88 	bl	80004d8 <__aeabi_f2d>
 8004bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bcc:	f7fb fcdc 	bl	8000588 <__aeabi_dmul>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7fb fb20 	bl	800021c <__adddf3>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	4618      	mov	r0, r3
 8004be2:	4621      	mov	r1, r4
 8004be4:	f7fb ff80 	bl	8000ae8 <__aeabi_d2f>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <anglePID+0x170>)
 8004bec:	601a      	str	r2, [r3, #0]
	v = Kp*(error + (Kd* (error - previousError) / dt) + Ki * angleIntegral);// * 1.33;
 8004bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bf0:	f7fb fc72 	bl	80004d8 <__aeabi_f2d>
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	460e      	mov	r6, r1
 8004bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bfa:	f7fb fc6d 	bl	80004d8 <__aeabi_f2d>
 8004bfe:	4680      	mov	r8, r0
 8004c00:	4689      	mov	r9, r1
 8004c02:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <anglePID+0x174>)
 8004c04:	cb18      	ldmia	r3, {r3, r4}
 8004c06:	461a      	mov	r2, r3
 8004c08:	4623      	mov	r3, r4
 8004c0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c0e:	f7fb fb03 	bl	8000218 <__aeabi_dsub>
 8004c12:	4603      	mov	r3, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	461a      	mov	r2, r3
 8004c18:	4623      	mov	r3, r4
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	f7fb fcb3 	bl	8000588 <__aeabi_dmul>
 8004c22:	4603      	mov	r3, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	4698      	mov	r8, r3
 8004c28:	46a1      	mov	r9, r4
 8004c2a:	6978      	ldr	r0, [r7, #20]
 8004c2c:	f7fb fc54 	bl	80004d8 <__aeabi_f2d>
 8004c30:	4603      	mov	r3, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	461a      	mov	r2, r3
 8004c36:	4623      	mov	r3, r4
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb fdce 	bl	80007dc <__aeabi_ddiv>
 8004c40:	4603      	mov	r3, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	4618      	mov	r0, r3
 8004c46:	4621      	mov	r1, r4
 8004c48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c4c:	f7fb fae6 	bl	800021c <__adddf3>
 8004c50:	4603      	mov	r3, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	4698      	mov	r8, r3
 8004c56:	46a1      	mov	r9, r4
 8004c58:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <anglePID+0x170>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fc f8a0 	bl	8000da4 <__aeabi_fmul>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fb fc36 	bl	80004d8 <__aeabi_f2d>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	461a      	mov	r2, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f7fb fad0 	bl	800021c <__adddf3>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	461a      	mov	r2, r3
 8004c82:	4623      	mov	r3, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	4631      	mov	r1, r6
 8004c88:	f7fb fc7e 	bl	8000588 <__aeabi_dmul>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	e9c7 3406 	strd	r3, r4, [r7, #24]
	previousError = error;
 8004c94:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <anglePID+0x174>)
 8004c96:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c9a:	e9c2 3400 	strd	r3, r4, [r2]
}
 8004c9e:	bf00      	nop
 8004ca0:	3734      	adds	r7, #52	; 0x34
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ca8:	40a00000 	.word	0x40a00000
 8004cac:	165e9f81 	.word	0x165e9f81
 8004cb0:	2000012c 	.word	0x2000012c
 8004cb4:	20000108 	.word	0x20000108

08004cb8 <getBatteryVoltage>:
};


/* public: */

void getBatteryVoltage(Voltage *vol){
 8004cb8:	b5b0      	push	{r4, r5, r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
	float measured_value[3];

	measured_value[0]= HAL_ADC_GetValue(&hadc1);
 8004cc0:	485d      	ldr	r0, [pc, #372]	; (8004e38 <getBatteryVoltage+0x180>)
 8004cc2:	f7fc fc45 	bl	8001550 <HAL_ADC_GetValue>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fc f813 	bl	8000cf4 <__aeabi_ui2f>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	60fb      	str	r3, [r7, #12]
	measured_value[2]= HAL_ADC_GetValue(&hadc1);
 8004cd2:	4859      	ldr	r0, [pc, #356]	; (8004e38 <getBatteryVoltage+0x180>)
 8004cd4:	f7fc fc3c 	bl	8001550 <HAL_ADC_GetValue>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc f80a 	bl	8000cf4 <__aeabi_ui2f>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	617b      	str	r3, [r7, #20]
	measured_value[3]= HAL_ADC_GetValue(&hadc1);
 8004ce4:	4854      	ldr	r0, [pc, #336]	; (8004e38 <getBatteryVoltage+0x180>)
 8004ce6:	f7fc fc33 	bl	8001550 <HAL_ADC_GetValue>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fc f801 	bl	8000cf4 <__aeabi_ui2f>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	61bb      	str	r3, [r7, #24]

	vol->FirstPacketVoltage = 	measured_value[0] * ADC_TO_VOLTS * 2;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fbed 	bl	80004d8 <__aeabi_f2d>
 8004cfe:	a34a      	add	r3, pc, #296	; (adr r3, 8004e28 <getBatteryVoltage+0x170>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f7fb fc40 	bl	8000588 <__aeabi_dmul>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	4621      	mov	r1, r4
 8004d10:	a347      	add	r3, pc, #284	; (adr r3, 8004e30 <getBatteryVoltage+0x178>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fd61 	bl	80007dc <__aeabi_ddiv>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	4621      	mov	r1, r4
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	f7fb fa79 	bl	800021c <__adddf3>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	4618      	mov	r0, r3
 8004d30:	4621      	mov	r1, r4
 8004d32:	f7fb fed9 	bl	8000ae8 <__aeabi_d2f>
 8004d36:	4602      	mov	r2, r0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
	vol->SecondPacketVoltage = 	measured_value[1] * ADC_TO_VOLTS * 3 - vol->FirstPacketVoltage;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fb fbca 	bl	80004d8 <__aeabi_f2d>
 8004d44:	a338      	add	r3, pc, #224	; (adr r3, 8004e28 <getBatteryVoltage+0x170>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f7fb fc1d 	bl	8000588 <__aeabi_dmul>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	4618      	mov	r0, r3
 8004d54:	4621      	mov	r1, r4
 8004d56:	a336      	add	r3, pc, #216	; (adr r3, 8004e30 <getBatteryVoltage+0x178>)
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f7fb fd3e 	bl	80007dc <__aeabi_ddiv>
 8004d60:	4603      	mov	r3, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	4618      	mov	r0, r3
 8004d66:	4621      	mov	r1, r4
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <getBatteryVoltage+0x184>)
 8004d6e:	f7fb fc0b 	bl	8000588 <__aeabi_dmul>
 8004d72:	4603      	mov	r3, r0
 8004d74:	460c      	mov	r4, r1
 8004d76:	4625      	mov	r5, r4
 8004d78:	461c      	mov	r4, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fb fbaa 	bl	80004d8 <__aeabi_f2d>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4620      	mov	r0, r4
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f7fb fa44 	bl	8000218 <__aeabi_dsub>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	4618      	mov	r0, r3
 8004d96:	4621      	mov	r1, r4
 8004d98:	f7fb fea6 	bl	8000ae8 <__aeabi_d2f>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	605a      	str	r2, [r3, #4]
	vol->ThirdPacketVoltage	= 	measured_value[2] * ADC_TO_VOLTS * 4 - vol->SecondPacketVoltage;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fb97 	bl	80004d8 <__aeabi_f2d>
 8004daa:	a31f      	add	r3, pc, #124	; (adr r3, 8004e28 <getBatteryVoltage+0x170>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f7fb fbea 	bl	8000588 <__aeabi_dmul>
 8004db4:	4603      	mov	r3, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4618      	mov	r0, r3
 8004dba:	4621      	mov	r1, r4
 8004dbc:	a31c      	add	r3, pc, #112	; (adr r3, 8004e30 <getBatteryVoltage+0x178>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fd0b 	bl	80007dc <__aeabi_ddiv>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	460c      	mov	r4, r1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	4621      	mov	r1, r4
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <getBatteryVoltage+0x188>)
 8004dd4:	f7fb fbd8 	bl	8000588 <__aeabi_dmul>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	4625      	mov	r5, r4
 8004dde:	461c      	mov	r4, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fb fb77 	bl	80004d8 <__aeabi_f2d>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fa11 	bl	8000218 <__aeabi_dsub>
 8004df6:	4603      	mov	r3, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	f7fb fe73 	bl	8000ae8 <__aeabi_d2f>
 8004e02:	4602      	mov	r2, r0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	609a      	str	r2, [r3, #8]
	vol->BatteryVoltage	= 		measured_value[2] * 4;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fb ffc8 	bl	8000da4 <__aeabi_fmul>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]

}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bdb0      	pop	{r4, r5, r7, pc}
 8004e24:	f3af 8000 	nop.w
 8004e28:	9999999a 	.word	0x9999999a
 8004e2c:	400d9999 	.word	0x400d9999
 8004e30:	00000000 	.word	0x00000000
 8004e34:	40affe00 	.word	0x40affe00
 8004e38:	20000264 	.word	0x20000264
 8004e3c:	40080000 	.word	0x40080000
 8004e40:	40100000 	.word	0x40100000

08004e44 <calulateBatteryLevel>:

int calulateBatteryLevel(float voltage){
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	int battery_level = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 21; i++){
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e022      	b.n	8004e9c <calulateBatteryLevel+0x58>
		if(voltage <= voltage_levels[i] && voltage > voltage_levels[i + 1] ){
 8004e56:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <calulateBatteryLevel+0x6c>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fc f947 	bl	80010f4 <__aeabi_fcmple>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d014      	beq.n	8004e96 <calulateBatteryLevel+0x52>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	4a0f      	ldr	r2, [pc, #60]	; (8004eb0 <calulateBatteryLevel+0x6c>)
 8004e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fc f94f 	bl	800111c <__aeabi_fcmpgt>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <calulateBatteryLevel+0x52>
			battery_level = (20 - i) * 5;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f1c3 0214 	rsb	r2, r3, #20
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	60bb      	str	r3, [r7, #8]
			return battery_level;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	e007      	b.n	8004ea6 <calulateBatteryLevel+0x62>
	for(int i = 0; i < 21; i++){
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b14      	cmp	r3, #20
 8004ea0:	ddd9      	ble.n	8004e56 <calulateBatteryLevel+0x12>
		}
	}
	return -1;
 8004ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000008 	.word	0x20000008

08004eb4 <displayBatteryLevel>:

void displayBatteryLevel(int percentage){
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
	int red = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
	int green = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]

	float red_dimming_factor = 0.5;
 8004ec4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8004ec8:	60fb      	str	r3, [r7, #12]
	float green_dimming_factor = red_dimming_factor * 0.5;
 8004eca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7fb ff68 	bl	8000da4 <__aeabi_fmul>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	60bb      	str	r3, [r7, #8]

	if(percentage < 0){
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da02      	bge.n	8004ee4 <displayBatteryLevel+0x30>
		percentage = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	e004      	b.n	8004eee <displayBatteryLevel+0x3a>
	} else if(percentage > 100){
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	dd01      	ble.n	8004eee <displayBatteryLevel+0x3a>
		percentage = 100;
 8004eea:	2364      	movs	r3, #100	; 0x64
 8004eec:	607b      	str	r3, [r7, #4]
	}

	if(percentage < 50){
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b31      	cmp	r3, #49	; 0x31
 8004ef2:	dc23      	bgt.n	8004f3c <displayBatteryLevel+0x88>

		red = 255 * red_dimming_factor;
 8004ef4:	492c      	ldr	r1, [pc, #176]	; (8004fa8 <displayBatteryLevel+0xf4>)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7fb ff54 	bl	8000da4 <__aeabi_fmul>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fc f916 	bl	8001130 <__aeabi_f2iz>
 8004f04:	4603      	mov	r3, r0
 8004f06:	617b      	str	r3, [r7, #20]
		green = ((255 * 2 * percentage) / 100) * green_dimming_factor;
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4a26      	ldr	r2, [pc, #152]	; (8004fac <displayBatteryLevel+0xf8>)
 8004f14:	fb82 1203 	smull	r1, r2, r2, r3
 8004f18:	1152      	asrs	r2, r2, #5
 8004f1a:	17db      	asrs	r3, r3, #31
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb feec 	bl	8000cfc <__aeabi_i2f>
 8004f24:	4603      	mov	r3, r0
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fb ff3b 	bl	8000da4 <__aeabi_fmul>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fc f8fd 	bl	8001130 <__aeabi_f2iz>
 8004f36:	4603      	mov	r3, r0
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e025      	b.n	8004f88 <displayBatteryLevel+0xd4>

	} else{
		red = (255 -((255 * ( (percentage - 50) * 2))  / 100)) * red_dimming_factor;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8004f42:	4613      	mov	r3, r2
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4a18      	ldr	r2, [pc, #96]	; (8004fac <displayBatteryLevel+0xf8>)
 8004f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f50:	1152      	asrs	r2, r2, #5
 8004f52:	17db      	asrs	r3, r3, #31
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	33ff      	adds	r3, #255	; 0xff
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb fecf 	bl	8000cfc <__aeabi_i2f>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	68f9      	ldr	r1, [r7, #12]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb ff1e 	bl	8000da4 <__aeabi_fmul>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc f8e0 	bl	8001130 <__aeabi_f2iz>
 8004f70:	4603      	mov	r3, r0
 8004f72:	617b      	str	r3, [r7, #20]
		green = 255 * green_dimming_factor;
 8004f74:	490c      	ldr	r1, [pc, #48]	; (8004fa8 <displayBatteryLevel+0xf4>)
 8004f76:	68b8      	ldr	r0, [r7, #8]
 8004f78:	f7fb ff14 	bl	8000da4 <__aeabi_fmul>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc f8d6 	bl	8001130 <__aeabi_f2iz>
 8004f84:	4603      	mov	r3, r0
 8004f86:	613b      	str	r3, [r7, #16]
	}
	htim3.Instance->CCR2 = green;
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <displayBatteryLevel+0xfc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 0;
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <displayBatteryLevel+0xfc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = red;
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <displayBatteryLevel+0xfc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40

}
 8004fa0:	bf00      	nop
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	437f0000 	.word	0x437f0000
 8004fac:	51eb851f 	.word	0x51eb851f
 8004fb0:	20000220 	.word	0x20000220
 8004fb4:	00000000 	.word	0x00000000

08004fb8 <checkForOverdischarge>:

int checkForOverdischarge(Voltage *vol){
 8004fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
	if(fmax(fmax(vol->FirstPacketVoltage, vol->SecondPacketVoltage), vol->ThirdPacketVoltage) -
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fb fa86 	bl	80004d8 <__aeabi_f2d>
 8004fcc:	4604      	mov	r4, r0
 8004fce:	460d      	mov	r5, r1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fb fa7f 	bl	80004d8 <__aeabi_f2d>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f001 fa07 	bl	80063f4 <fmax>
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	460d      	mov	r5, r1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fb fa72 	bl	80004d8 <__aeabi_f2d>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	f001 f9fa 	bl	80063f4 <fmax>
 8005000:	4604      	mov	r4, r0
 8005002:	460d      	mov	r5, r1
			fmin(fmin(vol->FirstPacketVoltage, vol->SecondPacketVoltage), vol->ThirdPacketVoltage) >= 0.2 ){
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb fa65 	bl	80004d8 <__aeabi_f2d>
 800500e:	4680      	mov	r8, r0
 8005010:	4689      	mov	r9, r1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fb fa5e 	bl	80004d8 <__aeabi_f2d>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4640      	mov	r0, r8
 8005022:	4649      	mov	r1, r9
 8005024:	f001 f9ff 	bl	8006426 <fmin>
 8005028:	4680      	mov	r8, r0
 800502a:	4689      	mov	r9, r1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f7fb fa51 	bl	80004d8 <__aeabi_f2d>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4640      	mov	r0, r8
 800503c:	4649      	mov	r1, r9
 800503e:	f001 f9f2 	bl	8006426 <fmin>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
	if(fmax(fmax(vol->FirstPacketVoltage, vol->SecondPacketVoltage), vol->ThirdPacketVoltage) -
 8005046:	4620      	mov	r0, r4
 8005048:	4629      	mov	r1, r5
 800504a:	f7fb f8e5 	bl	8000218 <__aeabi_dsub>
 800504e:	4603      	mov	r3, r0
 8005050:	460c      	mov	r4, r1
 8005052:	4618      	mov	r0, r3
 8005054:	4621      	mov	r1, r4
 8005056:	a30e      	add	r3, pc, #56	; (adr r3, 8005090 <checkForOverdischarge+0xd8>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f7fb fd1a 	bl	8000a94 <__aeabi_dcmpge>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <checkForOverdischarge+0xb2>
		return 1;
 8005066:	2301      	movs	r3, #1
 8005068:	e00b      	b.n	8005082 <checkForOverdischarge+0xca>
	} else if (vol->BatteryVoltage < 10.0){
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	490a      	ldr	r1, [pc, #40]	; (8005098 <checkForOverdischarge+0xe0>)
 8005070:	4618      	mov	r0, r3
 8005072:	f7fc f835 	bl	80010e0 <__aeabi_fcmplt>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <checkForOverdischarge+0xc8>
		return 2;
 800507c:	2302      	movs	r3, #2
 800507e:	e000      	b.n	8005082 <checkForOverdischarge+0xca>
	} else{
		return 0;
 8005080:	2300      	movs	r3, #0
	}
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800508c:	f3af 8000 	nop.w
 8005090:	9999999a 	.word	0x9999999a
 8005094:	3fc99999 	.word	0x3fc99999
 8005098:	41200000 	.word	0x41200000

0800509c <measureBatteryLevel>:

int measureBatteryLevel(Voltage *vol){
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	int result;
	getBatteryVoltage(vol);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff fe07 	bl	8004cb8 <getBatteryVoltage>
	displayBatteryLevel(calulateBatteryLevel(vol->BatteryVoltage));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fec8 	bl	8004e44 <calulateBatteryLevel>
 80050b4:	4603      	mov	r3, r0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fefc 	bl	8004eb4 <displayBatteryLevel>

	if(result = checkForOverdischarge(vol)){
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ff7b 	bl	8004fb8 <checkForOverdischarge>
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <measureBatteryLevel+0x46>
			htim3.Instance->CCR2 = 0;
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <measureBatteryLevel+0x50>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR3 = 0;
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <measureBatteryLevel+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4 = 200;
 80050da:	4b04      	ldr	r3, [pc, #16]	; (80050ec <measureBatteryLevel+0x50>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	22c8      	movs	r2, #200	; 0xc8
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
	}
	return result;
 80050e2:	68fb      	ldr	r3, [r7, #12]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000220 	.word	0x20000220

080050f0 <gy521_Init>:
 */
#include "gy521.h"
 I2C_HandleTypeDef hi2c1;


void gy521_Init(){
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af02      	add	r7, sp, #8
	  uint8_t d[2];
	  d[0] = 0x6B;
 80050f6:	236b      	movs	r3, #107	; 0x6b
 80050f8:	713b      	strb	r3, [r7, #4]
	  d[1] = 0x00;
 80050fa:	2300      	movs	r3, #0
 80050fc:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1, ADDR, (uint8_t*)d,2,100) != HAL_OK){}
 80050fe:	bf00      	nop
 8005100:	1d3a      	adds	r2, r7, #4
 8005102:	2364      	movs	r3, #100	; 0x64
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2302      	movs	r3, #2
 8005108:	21d0      	movs	r1, #208	; 0xd0
 800510a:	4812      	ldr	r0, [pc, #72]	; (8005154 <gy521_Init+0x64>)
 800510c:	f7fc ff58 	bl	8001fc0 <HAL_I2C_Master_Transmit>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f4      	bne.n	8005100 <gy521_Init+0x10>
	  HAL_Delay(200);
 8005116:	20c8      	movs	r0, #200	; 0xc8
 8005118:	f7fc f8ac 	bl	8001274 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800511c:	2200      	movs	r2, #0
 800511e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005122:	480d      	ldr	r0, [pc, #52]	; (8005158 <gy521_Init+0x68>)
 8005124:	f7fc fe0c 	bl	8001d40 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8005128:	20c8      	movs	r0, #200	; 0xc8
 800512a:	f7fc f8a3 	bl	8001274 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800512e:	2201      	movs	r2, #1
 8005130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005134:	4808      	ldr	r0, [pc, #32]	; (8005158 <gy521_Init+0x68>)
 8005136:	f7fc fe03 	bl	8001d40 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 800513a:	20c8      	movs	r0, #200	; 0xc8
 800513c:	f7fc f89a 	bl	8001274 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8005140:	2200      	movs	r2, #0
 8005142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005146:	4804      	ldr	r0, [pc, #16]	; (8005158 <gy521_Init+0x68>)
 8005148:	f7fc fdfa 	bl	8001d40 <HAL_GPIO_WritePin>

}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000148 	.word	0x20000148
 8005158:	40010c00 	.word	0x40010c00

0800515c <getAcc_X>:
	HAL_I2C_Mem_Read(&hi2c1, ADDR, GYRO_ZOUT_L , 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);

	value = ((temp[0] << 8) | temp[1]);
	return value;
}
int16_t getAcc_X(){
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];


	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_XOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 8005162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005166:	9302      	str	r3, [sp, #8]
 8005168:	2301      	movs	r3, #1
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2301      	movs	r3, #1
 8005172:	223b      	movs	r2, #59	; 0x3b
 8005174:	21d0      	movs	r1, #208	; 0xd0
 8005176:	480f      	ldr	r0, [pc, #60]	; (80051b4 <getAcc_X+0x58>)
 8005178:	f7fd f820 	bl	80021bc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_XOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 800517c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005180:	9302      	str	r3, [sp, #8]
 8005182:	2301      	movs	r3, #1
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	3301      	adds	r3, #1
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2301      	movs	r3, #1
 800518e:	223c      	movs	r2, #60	; 0x3c
 8005190:	21d0      	movs	r1, #208	; 0xd0
 8005192:	4808      	ldr	r0, [pc, #32]	; (80051b4 <getAcc_X+0x58>)
 8005194:	f7fd f812 	bl	80021bc <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 8005198:	793b      	ldrb	r3, [r7, #4]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	b21a      	sxth	r2, r3
 800519e:	797b      	ldrb	r3, [r7, #5]
 80051a0:	b21b      	sxth	r3, r3
 80051a2:	4313      	orrs	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
	return value;
 80051a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000148 	.word	0x20000148

080051b8 <getAcc_Y>:
int16_t getAcc_Y(){
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_YOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 80051be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051c2:	9302      	str	r3, [sp, #8]
 80051c4:	2301      	movs	r3, #1
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	2301      	movs	r3, #1
 80051ce:	223d      	movs	r2, #61	; 0x3d
 80051d0:	21d0      	movs	r1, #208	; 0xd0
 80051d2:	480f      	ldr	r0, [pc, #60]	; (8005210 <getAcc_Y+0x58>)
 80051d4:	f7fc fff2 	bl	80021bc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_YOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051dc:	9302      	str	r3, [sp, #8]
 80051de:	2301      	movs	r3, #1
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	3301      	adds	r3, #1
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	2301      	movs	r3, #1
 80051ea:	223e      	movs	r2, #62	; 0x3e
 80051ec:	21d0      	movs	r1, #208	; 0xd0
 80051ee:	4808      	ldr	r0, [pc, #32]	; (8005210 <getAcc_Y+0x58>)
 80051f0:	f7fc ffe4 	bl	80021bc <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 80051f4:	793b      	ldrb	r3, [r7, #4]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	b21a      	sxth	r2, r3
 80051fa:	797b      	ldrb	r3, [r7, #5]
 80051fc:	b21b      	sxth	r3, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
	return value;
 8005202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000148 	.word	0x20000148

08005214 <getAcc_Z>:
int16_t getAcc_Z(){
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_ZOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 800521a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800521e:	9302      	str	r3, [sp, #8]
 8005220:	2301      	movs	r3, #1
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2301      	movs	r3, #1
 800522a:	223f      	movs	r2, #63	; 0x3f
 800522c:	21d0      	movs	r1, #208	; 0xd0
 800522e:	480f      	ldr	r0, [pc, #60]	; (800526c <getAcc_Z+0x58>)
 8005230:	f7fc ffc4 	bl	80021bc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_ZOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 8005234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005238:	9302      	str	r3, [sp, #8]
 800523a:	2301      	movs	r3, #1
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	3301      	adds	r3, #1
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	2301      	movs	r3, #1
 8005246:	2240      	movs	r2, #64	; 0x40
 8005248:	21d0      	movs	r1, #208	; 0xd0
 800524a:	4808      	ldr	r0, [pc, #32]	; (800526c <getAcc_Z+0x58>)
 800524c:	f7fc ffb6 	bl	80021bc <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 8005250:	793b      	ldrb	r3, [r7, #4]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	b21a      	sxth	r2, r3
 8005256:	797b      	ldrb	r3, [r7, #5]
 8005258:	b21b      	sxth	r3, r3
 800525a:	4313      	orrs	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
	return value;
 800525e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000148 	.word	0x20000148

08005270 <getAccelPitch>:


float getAccelPitch(){
 8005270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0

	float Ax = (float)(getAcc_X() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 8005278:	f7ff ff70 	bl	800515c <getAcc_X>
 800527c:	4603      	mov	r3, r0
 800527e:	4618      	mov	r0, r3
 8005280:	f7fb f918 	bl	80004b4 <__aeabi_i2d>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	f7fa ffc8 	bl	800021c <__adddf3>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4610      	mov	r0, r2
 8005292:	4619      	mov	r1, r3
 8005294:	f7fb fc28 	bl	8000ae8 <__aeabi_d2f>
 8005298:	4603      	mov	r3, r0
 800529a:	4945      	ldr	r1, [pc, #276]	; (80053b0 <getAccelPitch+0x140>)
 800529c:	4618      	mov	r0, r3
 800529e:	f7fb fe35 	bl	8000f0c <__aeabi_fdiv>
 80052a2:	4603      	mov	r3, r0
 80052a4:	60fb      	str	r3, [r7, #12]
	float Ay = (float)(getAcc_Y() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 80052a6:	f7ff ff87 	bl	80051b8 <getAcc_Y>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fb f901 	bl	80004b4 <__aeabi_i2d>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	f7fa ffb1 	bl	800021c <__adddf3>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	f7fb fc11 	bl	8000ae8 <__aeabi_d2f>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4939      	ldr	r1, [pc, #228]	; (80053b0 <getAccelPitch+0x140>)
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fb fe1e 	bl	8000f0c <__aeabi_fdiv>
 80052d0:	4603      	mov	r3, r0
 80052d2:	60bb      	str	r3, [r7, #8]
	float Az = (float)(getAcc_Z() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 80052d4:	f7ff ff9e 	bl	8005214 <getAcc_Z>
 80052d8:	4603      	mov	r3, r0
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fb f8ea 	bl	80004b4 <__aeabi_i2d>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	f7fa ff9a 	bl	800021c <__adddf3>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4610      	mov	r0, r2
 80052ee:	4619      	mov	r1, r3
 80052f0:	f7fb fbfa 	bl	8000ae8 <__aeabi_d2f>
 80052f4:	4603      	mov	r3, r0
 80052f6:	492e      	ldr	r1, [pc, #184]	; (80053b0 <getAccelPitch+0x140>)
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7fb fe07 	bl	8000f0c <__aeabi_fdiv>
 80052fe:	4603      	mov	r3, r0
 8005300:	607b      	str	r3, [r7, #4]

	float accelAngle = (double)((-atan2(sqrt(Ay*Ay + Ax*Ax),Az)*180/3.14) + 90);
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68b8      	ldr	r0, [r7, #8]
 8005306:	f7fb fd4d 	bl	8000da4 <__aeabi_fmul>
 800530a:	4603      	mov	r3, r0
 800530c:	461e      	mov	r6, r3
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7fb fd47 	bl	8000da4 <__aeabi_fmul>
 8005316:	4603      	mov	r3, r0
 8005318:	4619      	mov	r1, r3
 800531a:	4630      	mov	r0, r6
 800531c:	f7fb fc3a 	bl	8000b94 <__addsf3>
 8005320:	4603      	mov	r3, r0
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f8d8 	bl	80004d8 <__aeabi_f2d>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f001 f8bc 	bl	80064ac <sqrt>
 8005334:	4680      	mov	r8, r0
 8005336:	4689      	mov	r9, r1
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fb f8cd 	bl	80004d8 <__aeabi_f2d>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	f001 f8af 	bl	80064a8 <atan2>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4614      	mov	r4, r2
 8005350:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <getAccelPitch+0x144>)
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f7fb f913 	bl	8000588 <__aeabi_dmul>
 8005362:	4603      	mov	r3, r0
 8005364:	460c      	mov	r4, r1
 8005366:	4618      	mov	r0, r3
 8005368:	4621      	mov	r1, r4
 800536a:	a30f      	add	r3, pc, #60	; (adr r3, 80053a8 <getAccelPitch+0x138>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fb fa34 	bl	80007dc <__aeabi_ddiv>
 8005374:	4603      	mov	r3, r0
 8005376:	460c      	mov	r4, r1
 8005378:	4618      	mov	r0, r3
 800537a:	4621      	mov	r1, r4
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <getAccelPitch+0x148>)
 8005382:	f7fa ff4b 	bl	800021c <__adddf3>
 8005386:	4603      	mov	r3, r0
 8005388:	460c      	mov	r4, r1
 800538a:	4618      	mov	r0, r3
 800538c:	4621      	mov	r1, r4
 800538e:	f7fb fbab 	bl	8000ae8 <__aeabi_d2f>
 8005392:	4603      	mov	r3, r0
 8005394:	603b      	str	r3, [r7, #0]

	return accelAngle;
 8005396:	683b      	ldr	r3, [r7, #0]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053a2:	bf00      	nop
 80053a4:	f3af 8000 	nop.w
 80053a8:	51eb851f 	.word	0x51eb851f
 80053ac:	40091eb8 	.word	0x40091eb8
 80053b0:	46fffe00 	.word	0x46fffe00
 80053b4:	40668000 	.word	0x40668000
 80053b8:	40568000 	.word	0x40568000
 80053bc:	00000000 	.word	0x00000000

080053c0 <getGyroPitch>:

float getGyroPitch(float gyroAngle , int16_t rawGyro){
 80053c0:	b5b0      	push	{r4, r5, r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
	float Gy = getGyroYRate(rawGyro);
 80053cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f825 	bl	8005420 <getGyroYRate>
 80053d6:	60f8      	str	r0, [r7, #12]
	gyroAngle = gyroAngle + Gy * 0.001;
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fb f87d 	bl	80004d8 <__aeabi_f2d>
 80053de:	4604      	mov	r4, r0
 80053e0:	460d      	mov	r5, r1
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7fb f878 	bl	80004d8 <__aeabi_f2d>
 80053e8:	a30b      	add	r3, pc, #44	; (adr r3, 8005418 <getGyroPitch+0x58>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fb f8cb 	bl	8000588 <__aeabi_dmul>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4620      	mov	r0, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fa ff0f 	bl	800021c <__adddf3>
 80053fe:	4603      	mov	r3, r0
 8005400:	460c      	mov	r4, r1
 8005402:	4618      	mov	r0, r3
 8005404:	4621      	mov	r1, r4
 8005406:	f7fb fb6f 	bl	8000ae8 <__aeabi_d2f>
 800540a:	4603      	mov	r3, r0
 800540c:	607b      	str	r3, [r7, #4]

	return gyroAngle;
 800540e:	687b      	ldr	r3, [r7, #4]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bdb0      	pop	{r4, r5, r7, pc}
 8005418:	d2f1a9fc 	.word	0xd2f1a9fc
 800541c:	3f50624d 	.word	0x3f50624d

08005420 <getGyroYRate>:

float getGyroYRate(int16_t rawGyro){
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	80fb      	strh	r3, [r7, #6]
	float zero = 80.75;
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <getGyroYRate+0x3c>)
 800542c:	60fb      	str	r3, [r7, #12]
	float gYRate = (float)(rawGyro-zero) / 131.0;
 800542e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fb fc62 	bl	8000cfc <__aeabi_i2f>
 8005438:	4603      	mov	r3, r0
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	4618      	mov	r0, r3
 800543e:	f7fb fba7 	bl	8000b90 <__aeabi_fsub>
 8005442:	4603      	mov	r3, r0
 8005444:	4906      	ldr	r1, [pc, #24]	; (8005460 <getGyroYRate+0x40>)
 8005446:	4618      	mov	r0, r3
 8005448:	f7fb fd60 	bl	8000f0c <__aeabi_fdiv>
 800544c:	4603      	mov	r3, r0
 800544e:	60bb      	str	r3, [r7, #8]

	return gYRate;
 8005450:	68bb      	ldr	r3, [r7, #8]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	42a18000 	.word	0x42a18000
 8005460:	43030000 	.word	0x43030000

08005464 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005474:	d113      	bne.n	800549e <HAL_TIM_PeriodElapsedCallback+0x3a>
		pwm_cnt++;
 8005476:	4b30      	ldr	r3, [pc, #192]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	3301      	adds	r3, #1
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005480:	701a      	strb	r2, [r3, #0]
		generateMotorsPWM(&left_motor, &right_motor, pwm_cnt);
 8005482:	4b2d      	ldr	r3, [pc, #180]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	492c      	ldr	r1, [pc, #176]	; (800553c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800548a:	482d      	ldr	r0, [pc, #180]	; (8005540 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800548c:	f000 fc52 	bl	8005d34 <generateMotorsPWM>
		if(pwm_cnt >= 100)
 8005490:	4b29      	ldr	r3, [pc, #164]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b63      	cmp	r3, #99	; 0x63
 8005496:	d902      	bls.n	800549e <HAL_TIM_PeriodElapsedCallback+0x3a>
			pwm_cnt = 0;
 8005498:	4b27      	ldr	r3, [pc, #156]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM4){
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a28      	ldr	r2, [pc, #160]	; (8005544 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_PeriodElapsedCallback+0x54>
		anglePID(0,theta);
 80054a8:	4b27      	ldr	r3, [pc, #156]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80054aa:	f993 3000 	ldrsb.w	r3, [r3]
 80054ae:	4619      	mov	r1, r3
 80054b0:	f04f 0000 	mov.w	r0, #0
 80054b4:	f7ff fb44 	bl	8004b40 <anglePID>
	}
	if(htim->Instance == TIM7){
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d12e      	bne.n	8005520 <HAL_TIM_PeriodElapsedCallback+0xbc>
		//frequency = 1kHz
		gyroAngle = getGyroPitch(gyroAngle, rawGyro);
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80054c4:	681c      	ldr	r4, [r3, #0]
 80054c6:	4b23      	ldr	r3, [pc, #140]	; (8005554 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fb fe30 	bl	8001130 <__aeabi_f2iz>
 80054d0:	4603      	mov	r3, r0
 80054d2:	b21b      	sxth	r3, r3
 80054d4:	4619      	mov	r1, r3
 80054d6:	4620      	mov	r0, r4
 80054d8:	f7ff ff72 	bl	80053c0 <getGyroPitch>
 80054dc:	4602      	mov	r2, r0
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80054e0:	601a      	str	r2, [r3, #0]
		accAngle = rawAccel;
 80054e2:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1d      	ldr	r2, [pc, #116]	; (800555c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80054e8:	6013      	str	r3, [r2, #0]
		theta = getKalmanAngle(theta, getGyroYRate(rawGyro), 0.04);
 80054ea:	4b17      	ldr	r3, [pc, #92]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80054ec:	f993 3000 	ldrsb.w	r3, [r3]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fb fc03 	bl	8000cfc <__aeabi_i2f>
 80054f6:	4604      	mov	r4, r0
 80054f8:	4b16      	ldr	r3, [pc, #88]	; (8005554 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fb fe17 	bl	8001130 <__aeabi_f2iz>
 8005502:	4603      	mov	r3, r0
 8005504:	b21b      	sxth	r3, r3
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff ff8a 	bl	8005420 <getGyroYRate>
 800550c:	4603      	mov	r3, r0
 800550e:	4a14      	ldr	r2, [pc, #80]	; (8005560 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005510:	4619      	mov	r1, r3
 8005512:	4620      	mov	r0, r4
 8005514:	f7ff f9c0 	bl	8004898 <getKalmanAngle>
 8005518:	4603      	mov	r3, r0
 800551a:	b25a      	sxtb	r2, r3
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800551e:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM15){
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a0f      	ldr	r2, [pc, #60]	; (8005564 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d102      	bne.n	8005530 <HAL_TIM_PeriodElapsedCallback+0xcc>
		measureBatteryLevel(&battery);
 800552a:	480f      	ldr	r0, [pc, #60]	; (8005568 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800552c:	f7ff fdb6 	bl	800509c <measureBatteryLevel>
	}
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bd90      	pop	{r4, r7, pc}
 8005538:	2000021c 	.word	0x2000021c
 800553c:	20000060 	.word	0x20000060
 8005540:	2000005c 	.word	0x2000005c
 8005544:	40000800 	.word	0x40000800
 8005548:	20000260 	.word	0x20000260
 800554c:	40001400 	.word	0x40001400
 8005550:	200000f0 	.word	0x200000f0
 8005554:	200000f4 	.word	0x200000f4
 8005558:	200000f8 	.word	0x200000f8
 800555c:	200000ec 	.word	0x200000ec
 8005560:	3d23d70a 	.word	0x3d23d70a
 8005564:	40014000 	.word	0x40014000
 8005568:	20000354 	.word	0x20000354

0800556c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	pwm_cnt = 0;
 8005570:	4b4e      	ldr	r3, [pc, #312]	; (80056ac <main+0x140>)
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005576:	f7fb fe01 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800557a:	f000 f8b3 	bl	80056e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800557e:	f000 fb61 	bl	8005c44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005582:	f000 f943 	bl	800580c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8005586:	f000 fb33 	bl	8005bf0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800558a:	f000 f96d 	bl	8005868 <MX_TIM2_Init>
  MX_TIM4_Init();
 800558e:	f000 fa25 	bl	80059dc <MX_TIM4_Init>
  MX_TIM6_Init();
 8005592:	f000 fa71 	bl	8005a78 <MX_TIM6_Init>
  MX_TIM7_Init();
 8005596:	f000 faa5 	bl	8005ae4 <MX_TIM7_Init>
  MX_TIM3_Init();
 800559a:	f000 f9b1 	bl	8005900 <MX_TIM3_Init>
  MX_ADC1_Init();
 800559e:	f000 f8f7 	bl	8005790 <MX_ADC1_Init>
  MX_TIM15_Init();
 80055a2:	f000 fad3 	bl	8005b4c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  PID_Init();
 80055a6:	f7ff faab 	bl	8004b00 <PID_Init>
  gy521_Init();
 80055aa:	f7ff fda1 	bl	80050f0 <gy521_Init>
  gyroAngle = getAccelPitch();
 80055ae:	f7ff fe5f 	bl	8005270 <getAccelPitch>
 80055b2:	4602      	mov	r2, r0
 80055b4:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <main+0x144>)
 80055b6:	601a      	str	r2, [r3, #0]
  accAngle = gyroAngle;
 80055b8:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <main+0x144>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a3d      	ldr	r2, [pc, #244]	; (80056b4 <main+0x148>)
 80055be:	6013      	str	r3, [r2, #0]
  _angle = gyroAngle;
 80055c0:	4b3b      	ldr	r3, [pc, #236]	; (80056b0 <main+0x144>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fb fdb3 	bl	8001130 <__aeabi_f2iz>
 80055ca:	4603      	mov	r3, r0
 80055cc:	b21a      	sxth	r2, r3
 80055ce:	4b3a      	ldr	r3, [pc, #232]	; (80056b8 <main+0x14c>)
 80055d0:	801a      	strh	r2, [r3, #0]
  kalmanInit();
 80055d2:	f7ff f92b 	bl	800482c <kalmanInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80055d6:	4839      	ldr	r0, [pc, #228]	; (80056bc <main+0x150>)
 80055d8:	f7fe f807 	bl	80035ea <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80055dc:	4838      	ldr	r0, [pc, #224]	; (80056c0 <main+0x154>)
 80055de:	f7fe f804 	bl	80035ea <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80055e2:	4838      	ldr	r0, [pc, #224]	; (80056c4 <main+0x158>)
 80055e4:	f7fe f801 	bl	80035ea <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80055e8:	4837      	ldr	r0, [pc, #220]	; (80056c8 <main+0x15c>)
 80055ea:	f7fd fffe 	bl	80035ea <HAL_TIM_Base_Start_IT>
  HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 80055ee:	2001      	movs	r0, #1
 80055f0:	f7fb fe1e 	bl	8001230 <HAL_SetTickFreq>
  test = 0;
 80055f4:	4b35      	ldr	r3, [pc, #212]	; (80056cc <main+0x160>)
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 80055fc:	2104      	movs	r1, #4
 80055fe:	4834      	ldr	r0, [pc, #208]	; (80056d0 <main+0x164>)
 8005600:	f7fe f842 	bl	8003688 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8005604:	2108      	movs	r1, #8
 8005606:	4832      	ldr	r0, [pc, #200]	; (80056d0 <main+0x164>)
 8005608:	f7fe f83e 	bl	8003688 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 800560c:	210c      	movs	r1, #12
 800560e:	4830      	ldr	r0, [pc, #192]	; (80056d0 <main+0x164>)
 8005610:	f7fe f83a 	bl	8003688 <HAL_TIM_PWM_Start_IT>

  HAL_ADC_Start(&hadc1);
 8005614:	482f      	ldr	r0, [pc, #188]	; (80056d4 <main+0x168>)
 8005616:	f7fb ff27 	bl	8001468 <HAL_ADC_Start>

  HAL_UART_Receive_IT(&huart1, &received, sizeof(received));
 800561a:	2201      	movs	r2, #1
 800561c:	492e      	ldr	r1, [pc, #184]	; (80056d8 <main+0x16c>)
 800561e:	482f      	ldr	r0, [pc, #188]	; (80056dc <main+0x170>)
 8005620:	f7fe ff27 	bl	8004472 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  moveRobot(FORWARD);
 8005624:	2000      	movs	r0, #0
 8005626:	f000 fbb5 	bl	8005d94 <moveRobot>
	  setMotorSpeed(&left_motor, 0);
 800562a:	2100      	movs	r1, #0
 800562c:	482c      	ldr	r0, [pc, #176]	; (80056e0 <main+0x174>)
 800562e:	f000 fb6e 	bl	8005d0e <setMotorSpeed>
	  HAL_Delay(1000);
 8005632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005636:	f7fb fe1d 	bl	8001274 <HAL_Delay>
	  setMotorSpeed(&left_motor, 25);
 800563a:	2119      	movs	r1, #25
 800563c:	4828      	ldr	r0, [pc, #160]	; (80056e0 <main+0x174>)
 800563e:	f000 fb66 	bl	8005d0e <setMotorSpeed>
	  HAL_Delay(1000);
 8005642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005646:	f7fb fe15 	bl	8001274 <HAL_Delay>
	  setMotorSpeed(&left_motor, 50);
 800564a:	2132      	movs	r1, #50	; 0x32
 800564c:	4824      	ldr	r0, [pc, #144]	; (80056e0 <main+0x174>)
 800564e:	f000 fb5e 	bl	8005d0e <setMotorSpeed>
	  HAL_Delay(1000);
 8005652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005656:	f7fb fe0d 	bl	8001274 <HAL_Delay>
	  setMotorSpeed(&left_motor, 75);
 800565a:	214b      	movs	r1, #75	; 0x4b
 800565c:	4820      	ldr	r0, [pc, #128]	; (80056e0 <main+0x174>)
 800565e:	f000 fb56 	bl	8005d0e <setMotorSpeed>
	  HAL_Delay(1000);
 8005662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005666:	f7fb fe05 	bl	8001274 <HAL_Delay>
	  setMotorSpeed(&left_motor, 100);
 800566a:	2164      	movs	r1, #100	; 0x64
 800566c:	481c      	ldr	r0, [pc, #112]	; (80056e0 <main+0x174>)
 800566e:	f000 fb4e 	bl	8005d0e <setMotorSpeed>
	  HAL_Delay(1000);
 8005672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005676:	f7fb fdfd 	bl	8001274 <HAL_Delay>
	  setMotorSpeed(&left_motor, 75);
 800567a:	214b      	movs	r1, #75	; 0x4b
 800567c:	4818      	ldr	r0, [pc, #96]	; (80056e0 <main+0x174>)
 800567e:	f000 fb46 	bl	8005d0e <setMotorSpeed>
	  HAL_Delay(1000);
 8005682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005686:	f7fb fdf5 	bl	8001274 <HAL_Delay>
	  setMotorSpeed(&left_motor, 50);
 800568a:	2132      	movs	r1, #50	; 0x32
 800568c:	4814      	ldr	r0, [pc, #80]	; (80056e0 <main+0x174>)
 800568e:	f000 fb3e 	bl	8005d0e <setMotorSpeed>
	  HAL_Delay(1000);
 8005692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005696:	f7fb fded 	bl	8001274 <HAL_Delay>
	  setMotorSpeed(&left_motor, 25);
 800569a:	2119      	movs	r1, #25
 800569c:	4810      	ldr	r0, [pc, #64]	; (80056e0 <main+0x174>)
 800569e:	f000 fb36 	bl	8005d0e <setMotorSpeed>
	  HAL_Delay(1000);
 80056a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056a6:	f7fb fde5 	bl	8001274 <HAL_Delay>
	  moveRobot(FORWARD);
 80056aa:	e7bb      	b.n	8005624 <main+0xb8>
 80056ac:	2000021c 	.word	0x2000021c
 80056b0:	200000f0 	.word	0x200000f0
 80056b4:	200000ec 	.word	0x200000ec
 80056b8:	20000128 	.word	0x20000128
 80056bc:	20000314 	.word	0x20000314
 80056c0:	2000019c 	.word	0x2000019c
 80056c4:	200002d4 	.word	0x200002d4
 80056c8:	20000364 	.word	0x20000364
 80056cc:	20000124 	.word	0x20000124
 80056d0:	20000220 	.word	0x20000220
 80056d4:	20000264 	.word	0x20000264
 80056d8:	200003a4 	.word	0x200003a4
 80056dc:	20000294 	.word	0x20000294
 80056e0:	2000005c 	.word	0x2000005c

080056e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b092      	sub	sp, #72	; 0x48
 80056e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056ea:	f107 0320 	add.w	r3, r7, #32
 80056ee:	2228      	movs	r2, #40	; 0x28
 80056f0:	2100      	movs	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fe76 	bl	80063e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056f8:	f107 030c 	add.w	r3, r7, #12
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005708:	463b      	mov	r3, r7
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	605a      	str	r2, [r3, #4]
 8005710:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005712:	2301      	movs	r3, #1
 8005714:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV10;
 800571c:	2309      	movs	r3, #9
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005720:	2302      	movs	r3, #2
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800572a:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005730:	f107 0320 	add.w	r3, r7, #32
 8005734:	4618      	mov	r0, r3
 8005736:	f7fd fa99 	bl	8002c6c <HAL_RCC_OscConfig>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8005740:	f000 fae2 	bl	8005d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005744:	230f      	movs	r3, #15
 8005746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005748:	2302      	movs	r3, #2
 800574a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005758:	f107 030c 	add.w	r3, r7, #12
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f7fd fd04 	bl	800316c <HAL_RCC_ClockConfig>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800576a:	f000 facd 	bl	8005d08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800576e:	2302      	movs	r3, #2
 8005770:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005776:	463b      	mov	r3, r7
 8005778:	4618      	mov	r0, r3
 800577a:	f7fd fe65 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8005784:	f000 fac0 	bl	8005d08 <Error_Handler>
  }
}
 8005788:	bf00      	nop
 800578a:	3748      	adds	r7, #72	; 0x48
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80057a0:	4b18      	ldr	r3, [pc, #96]	; (8005804 <MX_ADC1_Init+0x74>)
 80057a2:	4a19      	ldr	r2, [pc, #100]	; (8005808 <MX_ADC1_Init+0x78>)
 80057a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80057a6:	4b17      	ldr	r3, [pc, #92]	; (8005804 <MX_ADC1_Init+0x74>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80057ac:	4b15      	ldr	r3, [pc, #84]	; (8005804 <MX_ADC1_Init+0x74>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <MX_ADC1_Init+0x74>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80057b8:	4b12      	ldr	r3, [pc, #72]	; (8005804 <MX_ADC1_Init+0x74>)
 80057ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80057be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80057c0:	4b10      	ldr	r3, [pc, #64]	; (8005804 <MX_ADC1_Init+0x74>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <MX_ADC1_Init+0x74>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80057cc:	480d      	ldr	r0, [pc, #52]	; (8005804 <MX_ADC1_Init+0x74>)
 80057ce:	f7fb fd73 	bl	80012b8 <HAL_ADC_Init>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80057d8:	f000 fa96 	bl	8005d08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80057dc:	2301      	movs	r3, #1
 80057de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80057e0:	2301      	movs	r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4805      	ldr	r0, [pc, #20]	; (8005804 <MX_ADC1_Init+0x74>)
 80057ee:	f7fb febb 	bl	8001568 <HAL_ADC_ConfigChannel>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80057f8:	f000 fa86 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000264 	.word	0x20000264
 8005808:	40012400 	.word	0x40012400

0800580c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005810:	4b12      	ldr	r3, [pc, #72]	; (800585c <MX_I2C1_Init+0x50>)
 8005812:	4a13      	ldr	r2, [pc, #76]	; (8005860 <MX_I2C1_Init+0x54>)
 8005814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005816:	4b11      	ldr	r3, [pc, #68]	; (800585c <MX_I2C1_Init+0x50>)
 8005818:	4a12      	ldr	r2, [pc, #72]	; (8005864 <MX_I2C1_Init+0x58>)
 800581a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <MX_I2C1_Init+0x50>)
 800581e:	2200      	movs	r2, #0
 8005820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005822:	4b0e      	ldr	r3, [pc, #56]	; (800585c <MX_I2C1_Init+0x50>)
 8005824:	2200      	movs	r2, #0
 8005826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <MX_I2C1_Init+0x50>)
 800582a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800582e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <MX_I2C1_Init+0x50>)
 8005832:	2200      	movs	r2, #0
 8005834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005836:	4b09      	ldr	r3, [pc, #36]	; (800585c <MX_I2C1_Init+0x50>)
 8005838:	2200      	movs	r2, #0
 800583a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <MX_I2C1_Init+0x50>)
 800583e:	2200      	movs	r2, #0
 8005840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <MX_I2C1_Init+0x50>)
 8005844:	2200      	movs	r2, #0
 8005846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005848:	4804      	ldr	r0, [pc, #16]	; (800585c <MX_I2C1_Init+0x50>)
 800584a:	f7fc fa91 	bl	8001d70 <HAL_I2C_Init>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005854:	f000 fa58 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005858:	bf00      	nop
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000148 	.word	0x20000148
 8005860:	40005400 	.word	0x40005400
 8005864:	000186a0 	.word	0x000186a0

08005868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800587c:	463b      	mov	r3, r7
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <MX_TIM2_Init+0x94>)
 8005886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800588a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <MX_TIM2_Init+0x94>)
 800588e:	2217      	movs	r2, #23
 8005890:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <MX_TIM2_Init+0x94>)
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8005898:	4b18      	ldr	r3, [pc, #96]	; (80058fc <MX_TIM2_Init+0x94>)
 800589a:	2263      	movs	r2, #99	; 0x63
 800589c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800589e:	4b17      	ldr	r3, [pc, #92]	; (80058fc <MX_TIM2_Init+0x94>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058a4:	4b15      	ldr	r3, [pc, #84]	; (80058fc <MX_TIM2_Init+0x94>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80058aa:	4814      	ldr	r0, [pc, #80]	; (80058fc <MX_TIM2_Init+0x94>)
 80058ac:	f7fd fe72 	bl	8003594 <HAL_TIM_Base_Init>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80058b6:	f000 fa27 	bl	8005d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	4619      	mov	r1, r3
 80058c6:	480d      	ldr	r0, [pc, #52]	; (80058fc <MX_TIM2_Init+0x94>)
 80058c8:	f7fe f93e 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80058d2:	f000 fa19 	bl	8005d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058d6:	2300      	movs	r3, #0
 80058d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80058de:	463b      	mov	r3, r7
 80058e0:	4619      	mov	r1, r3
 80058e2:	4806      	ldr	r0, [pc, #24]	; (80058fc <MX_TIM2_Init+0x94>)
 80058e4:	f7fe fd22 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80058ee:	f000 fa0b 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80058f2:	bf00      	nop
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000314 	.word	0x20000314

08005900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005906:	f107 0320 	add.w	r3, r7, #32
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	605a      	str	r2, [r3, #4]
 8005918:	609a      	str	r2, [r3, #8]
 800591a:	60da      	str	r2, [r3, #12]
 800591c:	611a      	str	r2, [r3, #16]
 800591e:	615a      	str	r2, [r3, #20]
 8005920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005922:	4b2c      	ldr	r3, [pc, #176]	; (80059d4 <MX_TIM3_Init+0xd4>)
 8005924:	4a2c      	ldr	r2, [pc, #176]	; (80059d8 <MX_TIM3_Init+0xd8>)
 8005926:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 93;
 8005928:	4b2a      	ldr	r3, [pc, #168]	; (80059d4 <MX_TIM3_Init+0xd4>)
 800592a:	225d      	movs	r2, #93	; 0x5d
 800592c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800592e:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <MX_TIM3_Init+0xd4>)
 8005930:	2200      	movs	r2, #0
 8005932:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8005934:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <MX_TIM3_Init+0xd4>)
 8005936:	22fe      	movs	r2, #254	; 0xfe
 8005938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <MX_TIM3_Init+0xd4>)
 800593c:	2200      	movs	r2, #0
 800593e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005940:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <MX_TIM3_Init+0xd4>)
 8005942:	2200      	movs	r2, #0
 8005944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005946:	4823      	ldr	r0, [pc, #140]	; (80059d4 <MX_TIM3_Init+0xd4>)
 8005948:	f7fd fe72 	bl	8003630 <HAL_TIM_PWM_Init>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8005952:	f000 f9d9 	bl	8005d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800595a:	2300      	movs	r3, #0
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800595e:	f107 0320 	add.w	r3, r7, #32
 8005962:	4619      	mov	r1, r3
 8005964:	481b      	ldr	r0, [pc, #108]	; (80059d4 <MX_TIM3_Init+0xd4>)
 8005966:	f7fe fce1 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8005970:	f000 f9ca 	bl	8005d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005974:	2360      	movs	r3, #96	; 0x60
 8005976:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	2204      	movs	r2, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4812      	ldr	r0, [pc, #72]	; (80059d4 <MX_TIM3_Init+0xd4>)
 800598c:	f7fe f816 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005996:	f000 f9b7 	bl	8005d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800599a:	1d3b      	adds	r3, r7, #4
 800599c:	2208      	movs	r2, #8
 800599e:	4619      	mov	r1, r3
 80059a0:	480c      	ldr	r0, [pc, #48]	; (80059d4 <MX_TIM3_Init+0xd4>)
 80059a2:	f7fe f80b 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80059ac:	f000 f9ac 	bl	8005d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	220c      	movs	r2, #12
 80059b4:	4619      	mov	r1, r3
 80059b6:	4807      	ldr	r0, [pc, #28]	; (80059d4 <MX_TIM3_Init+0xd4>)
 80059b8:	f7fe f800 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80059c2:	f000 f9a1 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80059c6:	4803      	ldr	r0, [pc, #12]	; (80059d4 <MX_TIM3_Init+0xd4>)
 80059c8:	f000 fb8c 	bl	80060e4 <HAL_TIM_MspPostInit>

}
 80059cc:	bf00      	nop
 80059ce:	3728      	adds	r7, #40	; 0x28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20000220 	.word	0x20000220
 80059d8:	40000400 	.word	0x40000400

080059dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	609a      	str	r2, [r3, #8]
 80059ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059f0:	463b      	mov	r3, r7
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <MX_TIM4_Init+0x94>)
 80059fa:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <MX_TIM4_Init+0x98>)
 80059fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 80059fe:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <MX_TIM4_Init+0x94>)
 8005a00:	f242 720f 	movw	r2, #9999	; 0x270f
 8005a04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a06:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <MX_TIM4_Init+0x94>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 239;
 8005a0c:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <MX_TIM4_Init+0x94>)
 8005a0e:	22ef      	movs	r2, #239	; 0xef
 8005a10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a12:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <MX_TIM4_Init+0x94>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <MX_TIM4_Init+0x94>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005a1e:	4814      	ldr	r0, [pc, #80]	; (8005a70 <MX_TIM4_Init+0x94>)
 8005a20:	f7fd fdb8 	bl	8003594 <HAL_TIM_Base_Init>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005a2a:	f000 f96d 	bl	8005d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005a34:	f107 0308 	add.w	r3, r7, #8
 8005a38:	4619      	mov	r1, r3
 8005a3a:	480d      	ldr	r0, [pc, #52]	; (8005a70 <MX_TIM4_Init+0x94>)
 8005a3c:	f7fe f884 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005a46:	f000 f95f 	bl	8005d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005a52:	463b      	mov	r3, r7
 8005a54:	4619      	mov	r1, r3
 8005a56:	4806      	ldr	r0, [pc, #24]	; (8005a70 <MX_TIM4_Init+0x94>)
 8005a58:	f7fe fc68 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005a62:	f000 f951 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005a66:	bf00      	nop
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	2000019c 	.word	0x2000019c
 8005a74:	40000800 	.word	0x40000800

08005a78 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a7e:	463b      	mov	r3, r7
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005a86:	4b15      	ldr	r3, [pc, #84]	; (8005adc <MX_TIM6_Init+0x64>)
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <MX_TIM6_Init+0x68>)
 8005a8a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 239;
 8005a8c:	4b13      	ldr	r3, [pc, #76]	; (8005adc <MX_TIM6_Init+0x64>)
 8005a8e:	22ef      	movs	r2, #239	; 0xef
 8005a90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <MX_TIM6_Init+0x64>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <MX_TIM6_Init+0x64>)
 8005a9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <MX_TIM6_Init+0x64>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005aa6:	480d      	ldr	r0, [pc, #52]	; (8005adc <MX_TIM6_Init+0x64>)
 8005aa8:	f7fd fd74 	bl	8003594 <HAL_TIM_Base_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005ab2:	f000 f929 	bl	8005d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005abe:	463b      	mov	r3, r7
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4806      	ldr	r0, [pc, #24]	; (8005adc <MX_TIM6_Init+0x64>)
 8005ac4:	f7fe fc32 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005ace:	f000 f91b 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	200002d4 	.word	0x200002d4
 8005ae0:	40001000 	.word	0x40001000

08005ae4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aea:	463b      	mov	r3, r7
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <MX_TIM7_Init+0x60>)
 8005af4:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <MX_TIM7_Init+0x64>)
 8005af6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8005af8:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <MX_TIM7_Init+0x60>)
 8005afa:	2263      	movs	r2, #99	; 0x63
 8005afc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005afe:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <MX_TIM7_Init+0x60>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 239;
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <MX_TIM7_Init+0x60>)
 8005b06:	22ef      	movs	r2, #239	; 0xef
 8005b08:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b0a:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <MX_TIM7_Init+0x60>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005b10:	480c      	ldr	r0, [pc, #48]	; (8005b44 <MX_TIM7_Init+0x60>)
 8005b12:	f7fd fd3f 	bl	8003594 <HAL_TIM_Base_Init>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005b1c:	f000 f8f4 	bl	8005d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b20:	2300      	movs	r3, #0
 8005b22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005b28:	463b      	mov	r3, r7
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4805      	ldr	r0, [pc, #20]	; (8005b44 <MX_TIM7_Init+0x60>)
 8005b2e:	f7fe fbfd 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005b38:	f000 f8e6 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000364 	.word	0x20000364
 8005b48:	40001400 	.word	0x40001400

08005b4c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b52:	f107 0308 	add.w	r3, r7, #8
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b60:	463b      	mov	r3, r7
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b6a:	4a20      	ldr	r2, [pc, #128]	; (8005bec <MX_TIM15_Init+0xa0>)
 8005b6c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 9999;
 8005b6e:	4b1e      	ldr	r3, [pc, #120]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b70:	f242 720f 	movw	r2, #9999	; 0x270f
 8005b74:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b76:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 23999;
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b7e:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8005b82:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b84:	4b18      	ldr	r3, [pc, #96]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005b8a:	4b17      	ldr	r3, [pc, #92]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b90:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005b96:	4814      	ldr	r0, [pc, #80]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005b98:	f7fd fcfc 	bl	8003594 <HAL_TIM_Base_Init>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8005ba2:	f000 f8b1 	bl	8005d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005bac:	f107 0308 	add.w	r3, r7, #8
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	480d      	ldr	r0, [pc, #52]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005bb4:	f7fd ffc8 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8005bbe:	f000 f8a3 	bl	8005d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005bca:	463b      	mov	r3, r7
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4806      	ldr	r0, [pc, #24]	; (8005be8 <MX_TIM15_Init+0x9c>)
 8005bd0:	f7fe fbac 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8005bda:	f000 f895 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005bde:	bf00      	nop
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200001dc 	.word	0x200001dc
 8005bec:	40014000 	.word	0x40014000

08005bf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <MX_USART1_UART_Init+0x50>)
 8005bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8005c02:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c08:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c18:	220c      	movs	r2, #12
 8005c1a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c28:	4804      	ldr	r0, [pc, #16]	; (8005c3c <MX_USART1_UART_Init+0x4c>)
 8005c2a:	f7fe fbd5 	bl	80043d8 <HAL_UART_Init>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8005c34:	f000 f868 	bl	8005d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005c38:	bf00      	nop
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20000294 	.word	0x20000294
 8005c40:	40013800 	.word	0x40013800

08005c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c4a:	f107 0310 	add.w	r3, r7, #16
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c58:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c5e:	f043 0320 	orr.w	r3, r3, #32
 8005c62:	6193      	str	r3, [r2, #24]
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c70:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c76:	f043 0304 	orr.w	r3, r3, #4
 8005c7a:	6193      	str	r3, [r2, #24]
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c88:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c8e:	f043 0308 	orr.w	r3, r3, #8
 8005c92:	6193      	str	r3, [r2, #24]
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <MX_GPIO_Init+0xb8>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|PWM_A_Pin|GPIO_PIN_14|GPIO_PIN_15 
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f24f 1118 	movw	r1, #61720	; 0xf118
 8005ca6:	4816      	ldr	r0, [pc, #88]	; (8005d00 <MX_GPIO_Init+0xbc>)
 8005ca8:	f7fc f84a 	bl	8001d40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|PWM_B_Pin|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8005cac:	2200      	movs	r2, #0
 8005cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cb2:	4814      	ldr	r0, [pc, #80]	; (8005d04 <MX_GPIO_Init+0xc0>)
 8005cb4:	f7fc f844 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PWM_A_Pin PB14 PB15 
                           PB3 PWM_B_Pin PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|PWM_A_Pin|GPIO_PIN_14|GPIO_PIN_15 
 8005cb8:	f24f 1318 	movw	r3, #61720	; 0xf118
 8005cbc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|PWM_B_Pin|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cca:	f107 0310 	add.w	r3, r7, #16
 8005cce:	4619      	mov	r1, r3
 8005cd0:	480b      	ldr	r0, [pc, #44]	; (8005d00 <MX_GPIO_Init+0xbc>)
 8005cd2:	f7fb fedb 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ce8:	f107 0310 	add.w	r3, r7, #16
 8005cec:	4619      	mov	r1, r3
 8005cee:	4805      	ldr	r0, [pc, #20]	; (8005d04 <MX_GPIO_Init+0xc0>)
 8005cf0:	f7fb fecc 	bl	8001a8c <HAL_GPIO_Init>

}
 8005cf4:	bf00      	nop
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	40010c00 	.word	0x40010c00
 8005d04:	40010800 	.word	0x40010800

08005d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8005d0c:	e7fe      	b.n	8005d0c <Error_Handler+0x4>

08005d0e <setMotorSpeed>:
 *      Author: wojciech
 */

#include "motor_control.h"

void setMotorSpeed(motor_t *motor, uint8_t speed){
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	70fb      	strb	r3, [r7, #3]

	if(speed > 100){
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	2b64      	cmp	r3, #100	; 0x64
 8005d1e:	d901      	bls.n	8005d24 <setMotorSpeed+0x16>
		speed = 100;
 8005d20:	2364      	movs	r3, #100	; 0x64
 8005d22:	70fb      	strb	r3, [r7, #3]
	} else if (speed < 0){
		speed = 0;
	}

	motor->duty_cycle = speed;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	705a      	strb	r2, [r3, #1]
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <generateMotorsPWM>:

void generateMotorsPWM(motor_t *left, motor_t *right, uint8_t cnt){
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	71fb      	strb	r3, [r7, #7]
	if(cnt < left->duty_cycle){
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	79fa      	ldrb	r2, [r7, #7]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d205      	bcs.n	8005d58 <generateMotorsPWM+0x24>
		HAL_GPIO_WritePin(PWM_B_PORT, PWM_B_PIN, GPIO_PIN_SET);
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	2110      	movs	r1, #16
 8005d50:	480f      	ldr	r0, [pc, #60]	; (8005d90 <generateMotorsPWM+0x5c>)
 8005d52:	f7fb fff5 	bl	8001d40 <HAL_GPIO_WritePin>
 8005d56:	e004      	b.n	8005d62 <generateMotorsPWM+0x2e>
	} else{
		HAL_GPIO_WritePin(PWM_B_PORT, PWM_B_PIN, GPIO_PIN_SET);
 8005d58:	2201      	movs	r2, #1
 8005d5a:	2110      	movs	r1, #16
 8005d5c:	480c      	ldr	r0, [pc, #48]	; (8005d90 <generateMotorsPWM+0x5c>)
 8005d5e:	f7fb ffef 	bl	8001d40 <HAL_GPIO_WritePin>
	}

	if(cnt < right->duty_cycle){
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	79fa      	ldrb	r2, [r7, #7]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d206      	bcs.n	8005d7a <generateMotorsPWM+0x46>
			HAL_GPIO_WritePin(PWM_A_PORT, PWM_A_PIN, GPIO_PIN_SET);
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d72:	4807      	ldr	r0, [pc, #28]	; (8005d90 <generateMotorsPWM+0x5c>)
 8005d74:	f7fb ffe4 	bl	8001d40 <HAL_GPIO_WritePin>
	} else{
			HAL_GPIO_WritePin(PWM_A_PORT, PWM_A_PIN, GPIO_PIN_SET);
	}
}
 8005d78:	e005      	b.n	8005d86 <generateMotorsPWM+0x52>
			HAL_GPIO_WritePin(PWM_A_PORT, PWM_A_PIN, GPIO_PIN_SET);
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d80:	4803      	ldr	r0, [pc, #12]	; (8005d90 <generateMotorsPWM+0x5c>)
 8005d82:	f7fb ffdd 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40010c00 	.word	0x40010c00

08005d94 <moveRobot>:


void moveRobot(direction_t dir){
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
	if(dir == FORWARD){
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d117      	bne.n	8005dd4 <moveRobot+0x40>
		HAL_GPIO_WritePin(AIN_1_PORT, AIN_1_PIN, GPIO_PIN_RESET);
 8005da4:	2200      	movs	r2, #0
 8005da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005daa:	4819      	ldr	r0, [pc, #100]	; (8005e10 <moveRobot+0x7c>)
 8005dac:	f7fb ffc8 	bl	8001d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN_2_PORT, AIN_2_PIN, GPIO_PIN_SET);
 8005db0:	2201      	movs	r2, #1
 8005db2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005db6:	4816      	ldr	r0, [pc, #88]	; (8005e10 <moveRobot+0x7c>)
 8005db8:	f7fb ffc2 	bl	8001d40 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(BIN_1_PORT, BIN_1_PIN, GPIO_PIN_RESET);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2108      	movs	r1, #8
 8005dc0:	4813      	ldr	r0, [pc, #76]	; (8005e10 <moveRobot+0x7c>)
 8005dc2:	f7fb ffbd 	bl	8001d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN_2_PORT, BIN_2_PIN, GPIO_PIN_SET);
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dcc:	4811      	ldr	r0, [pc, #68]	; (8005e14 <moveRobot+0x80>)
 8005dce:	f7fb ffb7 	bl	8001d40 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(BIN_1_PORT, BIN_1_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(BIN_2_PORT, BIN_2_PIN, GPIO_PIN_RESET);
	}

}
 8005dd2:	e019      	b.n	8005e08 <moveRobot+0x74>
	} else if (dir == BACKWARD){
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d116      	bne.n	8005e08 <moveRobot+0x74>
		HAL_GPIO_WritePin(AIN_1_PORT, AIN_1_PIN, GPIO_PIN_SET);
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005de0:	480b      	ldr	r0, [pc, #44]	; (8005e10 <moveRobot+0x7c>)
 8005de2:	f7fb ffad 	bl	8001d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN_2_PORT, AIN_2_PIN, GPIO_PIN_RESET);
 8005de6:	2200      	movs	r2, #0
 8005de8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dec:	4808      	ldr	r0, [pc, #32]	; (8005e10 <moveRobot+0x7c>)
 8005dee:	f7fb ffa7 	bl	8001d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN_1_PORT, BIN_1_PIN, GPIO_PIN_SET);
 8005df2:	2201      	movs	r2, #1
 8005df4:	2108      	movs	r1, #8
 8005df6:	4806      	ldr	r0, [pc, #24]	; (8005e10 <moveRobot+0x7c>)
 8005df8:	f7fb ffa2 	bl	8001d40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN_2_PORT, BIN_2_PIN, GPIO_PIN_RESET);
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e02:	4804      	ldr	r0, [pc, #16]	; (8005e14 <moveRobot+0x80>)
 8005e04:	f7fb ff9c 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40010c00 	.word	0x40010c00
 8005e14:	40010800 	.word	0x40010800

08005e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e1e:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <HAL_MspInit+0x5c>)
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <HAL_MspInit+0x5c>)
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	6193      	str	r3, [r2, #24]
 8005e2a:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <HAL_MspInit+0x5c>)
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	60bb      	str	r3, [r7, #8]
 8005e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <HAL_MspInit+0x5c>)
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <HAL_MspInit+0x5c>)
 8005e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e40:	61d3      	str	r3, [r2, #28]
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <HAL_MspInit+0x5c>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <HAL_MspInit+0x60>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <HAL_MspInit+0x60>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40010000 	.word	0x40010000

08005e7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e84:	f107 0310 	add.w	r3, r7, #16
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	609a      	str	r2, [r3, #8]
 8005e90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <HAL_ADC_MspInit+0x6c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d121      	bne.n	8005ee0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e9c:	4b13      	ldr	r3, [pc, #76]	; (8005eec <HAL_ADC_MspInit+0x70>)
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	4a12      	ldr	r2, [pc, #72]	; (8005eec <HAL_ADC_MspInit+0x70>)
 8005ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ea6:	6193      	str	r3, [r2, #24]
 8005ea8:	4b10      	ldr	r3, [pc, #64]	; (8005eec <HAL_ADC_MspInit+0x70>)
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <HAL_ADC_MspInit+0x70>)
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <HAL_ADC_MspInit+0x70>)
 8005eba:	f043 0304 	orr.w	r3, r3, #4
 8005ebe:	6193      	str	r3, [r2, #24]
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <HAL_ADC_MspInit+0x70>)
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = ADC_S1_Pin|ADC_S2_Pin|ADC_S3_Pin;
 8005ecc:	230e      	movs	r3, #14
 8005ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <HAL_ADC_MspInit+0x74>)
 8005edc:	f7fb fdd6 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ee0:	bf00      	nop
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40012400 	.word	0x40012400
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40010800 	.word	0x40010800

08005ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005efc:	f107 0310 	add.w	r3, r7, #16
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	605a      	str	r2, [r3, #4]
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <HAL_I2C_MspInit+0x70>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d123      	bne.n	8005f5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f14:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <HAL_I2C_MspInit+0x74>)
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	4a13      	ldr	r2, [pc, #76]	; (8005f68 <HAL_I2C_MspInit+0x74>)
 8005f1a:	f043 0308 	orr.w	r3, r3, #8
 8005f1e:	6193      	str	r3, [r2, #24]
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <HAL_I2C_MspInit+0x74>)
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f2c:	23c0      	movs	r3, #192	; 0xc0
 8005f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f30:	2312      	movs	r3, #18
 8005f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f34:	2303      	movs	r3, #3
 8005f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f38:	f107 0310 	add.w	r3, r7, #16
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	480b      	ldr	r0, [pc, #44]	; (8005f6c <HAL_I2C_MspInit+0x78>)
 8005f40:	f7fb fda4 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <HAL_I2C_MspInit+0x74>)
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <HAL_I2C_MspInit+0x74>)
 8005f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f4e:	61d3      	str	r3, [r2, #28]
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_I2C_MspInit+0x74>)
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005f5c:	bf00      	nop
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40005400 	.word	0x40005400
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40010c00 	.word	0x40010c00

08005f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d114      	bne.n	8005fac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f82:	4b40      	ldr	r3, [pc, #256]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4a3f      	ldr	r2, [pc, #252]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	61d3      	str	r3, [r2, #28]
 8005f8e:	4b3d      	ldr	r3, [pc, #244]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	201c      	movs	r0, #28
 8005fa0:	f7fb fd3d 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005fa4:	201c      	movs	r0, #28
 8005fa6:	f7fb fd56 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005faa:	e066      	b.n	800607a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM4)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a35      	ldr	r2, [pc, #212]	; (8006088 <HAL_TIM_Base_MspInit+0x118>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d114      	bne.n	8005fe0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005fb6:	4b33      	ldr	r3, [pc, #204]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4a32      	ldr	r2, [pc, #200]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005fbc:	f043 0304 	orr.w	r3, r3, #4
 8005fc0:	61d3      	str	r3, [r2, #28]
 8005fc2:	4b30      	ldr	r3, [pc, #192]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	201e      	movs	r0, #30
 8005fd4:	f7fb fd23 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005fd8:	201e      	movs	r0, #30
 8005fda:	f7fb fd3c 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 8005fde:	e04c      	b.n	800607a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a29      	ldr	r2, [pc, #164]	; (800608c <HAL_TIM_Base_MspInit+0x11c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d114      	bne.n	8006014 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005fea:	4b26      	ldr	r3, [pc, #152]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	4a25      	ldr	r2, [pc, #148]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005ff0:	f043 0310 	orr.w	r3, r3, #16
 8005ff4:	61d3      	str	r3, [r2, #28]
 8005ff6:	4b23      	ldr	r3, [pc, #140]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006002:	2200      	movs	r2, #0
 8006004:	2100      	movs	r1, #0
 8006006:	2036      	movs	r0, #54	; 0x36
 8006008:	f7fb fd09 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800600c:	2036      	movs	r0, #54	; 0x36
 800600e:	f7fb fd22 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 8006012:	e032      	b.n	800607a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM7)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1d      	ldr	r2, [pc, #116]	; (8006090 <HAL_TIM_Base_MspInit+0x120>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d114      	bne.n	8006048 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800601e:	4b19      	ldr	r3, [pc, #100]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8006024:	f043 0320 	orr.w	r3, r3, #32
 8006028:	61d3      	str	r3, [r2, #28]
 800602a:	4b16      	ldr	r3, [pc, #88]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006036:	2200      	movs	r2, #0
 8006038:	2100      	movs	r1, #0
 800603a:	2037      	movs	r0, #55	; 0x37
 800603c:	f7fb fcef 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006040:	2037      	movs	r0, #55	; 0x37
 8006042:	f7fb fd08 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 8006046:	e018      	b.n	800607a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM15)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a11      	ldr	r2, [pc, #68]	; (8006094 <HAL_TIM_Base_MspInit+0x124>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d113      	bne.n	800607a <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006052:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605c:	6193      	str	r3, [r2, #24]
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_TIM_Base_MspInit+0x114>)
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800606a:	2200      	movs	r2, #0
 800606c:	2100      	movs	r1, #0
 800606e:	2018      	movs	r0, #24
 8006070:	f7fb fcd5 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8006074:	2018      	movs	r0, #24
 8006076:	f7fb fcee 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 800607a:	bf00      	nop
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000
 8006088:	40000800 	.word	0x40000800
 800608c:	40001000 	.word	0x40001000
 8006090:	40001400 	.word	0x40001400
 8006094:	40014000 	.word	0x40014000

08006098 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <HAL_TIM_PWM_MspInit+0x44>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d113      	bne.n	80060d2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060aa:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <HAL_TIM_PWM_MspInit+0x48>)
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4a0c      	ldr	r2, [pc, #48]	; (80060e0 <HAL_TIM_PWM_MspInit+0x48>)
 80060b0:	f043 0302 	orr.w	r3, r3, #2
 80060b4:	61d3      	str	r3, [r2, #28]
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <HAL_TIM_PWM_MspInit+0x48>)
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2100      	movs	r1, #0
 80060c6:	201d      	movs	r0, #29
 80060c8:	f7fb fca9 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80060cc:	201d      	movs	r0, #29
 80060ce:	f7fb fcc2 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40021000 	.word	0x40021000

080060e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ec:	f107 030c 	add.w	r3, r7, #12
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	605a      	str	r2, [r3, #4]
 80060f6:	609a      	str	r2, [r3, #8]
 80060f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_TIM_MspPostInit+0x7c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d129      	bne.n	8006158 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006104:	4b17      	ldr	r3, [pc, #92]	; (8006164 <HAL_TIM_MspPostInit+0x80>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <HAL_TIM_MspPostInit+0x80>)
 800610a:	f043 0308 	orr.w	r3, r3, #8
 800610e:	6193      	str	r3, [r2, #24]
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <HAL_TIM_MspPostInit+0x80>)
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	60bb      	str	r3, [r7, #8]
 800611a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800611c:	2323      	movs	r3, #35	; 0x23
 800611e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006120:	2302      	movs	r3, #2
 8006122:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006124:	2302      	movs	r3, #2
 8006126:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006128:	f107 030c 	add.w	r3, r7, #12
 800612c:	4619      	mov	r1, r3
 800612e:	480e      	ldr	r0, [pc, #56]	; (8006168 <HAL_TIM_MspPostInit+0x84>)
 8006130:	f7fb fcac 	bl	8001a8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8006134:	4b0d      	ldr	r3, [pc, #52]	; (800616c <HAL_TIM_MspPostInit+0x88>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	4a06      	ldr	r2, [pc, #24]	; (800616c <HAL_TIM_MspPostInit+0x88>)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006158:	bf00      	nop
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40000400 	.word	0x40000400
 8006164:	40021000 	.word	0x40021000
 8006168:	40010c00 	.word	0x40010c00
 800616c:	40010000 	.word	0x40010000

08006170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006178:	f107 0310 	add.w	r3, r7, #16
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_UART_MspInit+0x8c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d131      	bne.n	80061f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <HAL_UART_MspInit+0x90>)
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	4a1a      	ldr	r2, [pc, #104]	; (8006200 <HAL_UART_MspInit+0x90>)
 8006196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800619a:	6193      	str	r3, [r2, #24]
 800619c:	4b18      	ldr	r3, [pc, #96]	; (8006200 <HAL_UART_MspInit+0x90>)
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061a8:	4b15      	ldr	r3, [pc, #84]	; (8006200 <HAL_UART_MspInit+0x90>)
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	4a14      	ldr	r2, [pc, #80]	; (8006200 <HAL_UART_MspInit+0x90>)
 80061ae:	f043 0304 	orr.w	r3, r3, #4
 80061b2:	6193      	str	r3, [r2, #24]
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <HAL_UART_MspInit+0x90>)
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80061c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c6:	2302      	movs	r3, #2
 80061c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061ca:	2303      	movs	r3, #3
 80061cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ce:	f107 0310 	add.w	r3, r7, #16
 80061d2:	4619      	mov	r1, r3
 80061d4:	480b      	ldr	r0, [pc, #44]	; (8006204 <HAL_UART_MspInit+0x94>)
 80061d6:	f7fb fc59 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80061da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	4619      	mov	r1, r3
 80061ee:	4805      	ldr	r0, [pc, #20]	; (8006204 <HAL_UART_MspInit+0x94>)
 80061f0:	f7fb fc4c 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80061f4:	bf00      	nop
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40013800 	.word	0x40013800
 8006200:	40021000 	.word	0x40021000
 8006204:	40010800 	.word	0x40010800

08006208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800620c:	bf00      	nop
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr

08006214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006218:	e7fe      	b.n	8006218 <HardFault_Handler+0x4>

0800621a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800621a:	b480      	push	{r7}
 800621c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800621e:	e7fe      	b.n	800621e <MemManage_Handler+0x4>

08006220 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006224:	e7fe      	b.n	8006224 <BusFault_Handler+0x4>

08006226 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006226:	b480      	push	{r7}
 8006228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800622a:	e7fe      	b.n	800622a <UsageFault_Handler+0x4>

0800622c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006230:	bf00      	nop
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800623c:	bf00      	nop
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr

08006244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006248:	bf00      	nop
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006254:	f7fa ffd0 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006258:	bf00      	nop
 800625a:	bd80      	pop	{r7, pc}

0800625c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006260:	4802      	ldr	r0, [pc, #8]	; (800626c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8006262:	f7fd faa3 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	200001dc 	.word	0x200001dc

08006270 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006274:	4802      	ldr	r0, [pc, #8]	; (8006280 <TIM2_IRQHandler+0x10>)
 8006276:	f7fd fa99 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000314 	.word	0x20000314

08006284 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006288:	4802      	ldr	r0, [pc, #8]	; (8006294 <TIM3_IRQHandler+0x10>)
 800628a:	f7fd fa8f 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800628e:	bf00      	nop
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000220 	.word	0x20000220

08006298 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800629c:	4802      	ldr	r0, [pc, #8]	; (80062a8 <TIM4_IRQHandler+0x10>)
 800629e:	f7fd fa85 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80062a2:	bf00      	nop
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	2000019c 	.word	0x2000019c

080062ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80062b0:	4802      	ldr	r0, [pc, #8]	; (80062bc <TIM6_DAC_IRQHandler+0x10>)
 80062b2:	f7fd fa7b 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80062b6:	bf00      	nop
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	200002d4 	.word	0x200002d4

080062c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80062c4:	4802      	ldr	r0, [pc, #8]	; (80062d0 <TIM7_IRQHandler+0x10>)
 80062c6:	f7fd fa71 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000364 	.word	0x20000364

080062d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80062d8:	4b17      	ldr	r3, [pc, #92]	; (8006338 <SystemInit+0x64>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a16      	ldr	r2, [pc, #88]	; (8006338 <SystemInit+0x64>)
 80062de:	f043 0301 	orr.w	r3, r3, #1
 80062e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80062e4:	4b14      	ldr	r3, [pc, #80]	; (8006338 <SystemInit+0x64>)
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	4913      	ldr	r1, [pc, #76]	; (8006338 <SystemInit+0x64>)
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <SystemInit+0x68>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <SystemInit+0x64>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a10      	ldr	r2, [pc, #64]	; (8006338 <SystemInit+0x64>)
 80062f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80062fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006300:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <SystemInit+0x64>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <SystemInit+0x64>)
 8006306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800630a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <SystemInit+0x64>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	4a09      	ldr	r2, [pc, #36]	; (8006338 <SystemInit+0x64>)
 8006312:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006316:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <SystemInit+0x64>)
 800631a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800631e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <SystemInit+0x64>)
 8006322:	2200      	movs	r2, #0
 8006324:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006326:	4b06      	ldr	r3, [pc, #24]	; (8006340 <SystemInit+0x6c>)
 8006328:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800632c:	609a      	str	r2, [r3, #8]
#endif 
}
 800632e:	bf00      	nop
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40021000 	.word	0x40021000
 800633c:	f8ff0000 	.word	0xf8ff0000
 8006340:	e000ed00 	.word	0xe000ed00

08006344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006344:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006346:	e003      	b.n	8006350 <LoopCopyDataInit>

08006348 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800634a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800634c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800634e:	3104      	adds	r1, #4

08006350 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006350:	480a      	ldr	r0, [pc, #40]	; (800637c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006354:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006356:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006358:	d3f6      	bcc.n	8006348 <CopyDataInit>
  ldr r2, =_sbss
 800635a:	4a0a      	ldr	r2, [pc, #40]	; (8006384 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800635c:	e002      	b.n	8006364 <LoopFillZerobss>

0800635e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800635e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006360:	f842 3b04 	str.w	r3, [r2], #4

08006364 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006364:	4b08      	ldr	r3, [pc, #32]	; (8006388 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006366:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006368:	d3f9      	bcc.n	800635e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800636a:	f7ff ffb3 	bl	80062d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800636e:	f000 f815 	bl	800639c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006372:	f7ff f8fb 	bl	800556c <main>
  bx lr
 8006376:	4770      	bx	lr
  ldr r3, =_sidata
 8006378:	08006c30 	.word	0x08006c30
  ldr r0, =_sdata
 800637c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006380:	200000d0 	.word	0x200000d0
  ldr r2, =_sbss
 8006384:	200000d0 	.word	0x200000d0
  ldr r3, = _ebss
 8006388:	200003a8 	.word	0x200003a8

0800638c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800638c:	e7fe      	b.n	800638c <ADC1_IRQHandler>
	...

08006390 <__errno>:
 8006390:	4b01      	ldr	r3, [pc, #4]	; (8006398 <__errno+0x8>)
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000068 	.word	0x20000068

0800639c <__libc_init_array>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	2500      	movs	r5, #0
 80063a0:	4e0c      	ldr	r6, [pc, #48]	; (80063d4 <__libc_init_array+0x38>)
 80063a2:	4c0d      	ldr	r4, [pc, #52]	; (80063d8 <__libc_init_array+0x3c>)
 80063a4:	1ba4      	subs	r4, r4, r6
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	42a5      	cmp	r5, r4
 80063aa:	d109      	bne.n	80063c0 <__libc_init_array+0x24>
 80063ac:	f000 fbf0 	bl	8006b90 <_init>
 80063b0:	2500      	movs	r5, #0
 80063b2:	4e0a      	ldr	r6, [pc, #40]	; (80063dc <__libc_init_array+0x40>)
 80063b4:	4c0a      	ldr	r4, [pc, #40]	; (80063e0 <__libc_init_array+0x44>)
 80063b6:	1ba4      	subs	r4, r4, r6
 80063b8:	10a4      	asrs	r4, r4, #2
 80063ba:	42a5      	cmp	r5, r4
 80063bc:	d105      	bne.n	80063ca <__libc_init_array+0x2e>
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063c4:	4798      	blx	r3
 80063c6:	3501      	adds	r5, #1
 80063c8:	e7ee      	b.n	80063a8 <__libc_init_array+0xc>
 80063ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ce:	4798      	blx	r3
 80063d0:	3501      	adds	r5, #1
 80063d2:	e7f2      	b.n	80063ba <__libc_init_array+0x1e>
 80063d4:	08006c28 	.word	0x08006c28
 80063d8:	08006c28 	.word	0x08006c28
 80063dc:	08006c28 	.word	0x08006c28
 80063e0:	08006c2c 	.word	0x08006c2c

080063e4 <memset>:
 80063e4:	4603      	mov	r3, r0
 80063e6:	4402      	add	r2, r0
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d100      	bne.n	80063ee <memset+0xa>
 80063ec:	4770      	bx	lr
 80063ee:	f803 1b01 	strb.w	r1, [r3], #1
 80063f2:	e7f9      	b.n	80063e8 <memset+0x4>

080063f4 <fmax>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	4604      	mov	r4, r0
 80063f8:	460d      	mov	r5, r1
 80063fa:	4616      	mov	r6, r2
 80063fc:	461f      	mov	r7, r3
 80063fe:	f000 f82b 	bl	8006458 <__fpclassifyd>
 8006402:	b158      	cbz	r0, 800641c <fmax+0x28>
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f000 f826 	bl	8006458 <__fpclassifyd>
 800640c:	b140      	cbz	r0, 8006420 <fmax+0x2c>
 800640e:	4632      	mov	r2, r6
 8006410:	463b      	mov	r3, r7
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	f7fa fb47 	bl	8000aa8 <__aeabi_dcmpgt>
 800641a:	b908      	cbnz	r0, 8006420 <fmax+0x2c>
 800641c:	4634      	mov	r4, r6
 800641e:	463d      	mov	r5, r7
 8006420:	4620      	mov	r0, r4
 8006422:	4629      	mov	r1, r5
 8006424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006426 <fmin>:
 8006426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	460d      	mov	r5, r1
 800642c:	4616      	mov	r6, r2
 800642e:	461f      	mov	r7, r3
 8006430:	f000 f812 	bl	8006458 <__fpclassifyd>
 8006434:	b158      	cbz	r0, 800644e <fmin+0x28>
 8006436:	4630      	mov	r0, r6
 8006438:	4639      	mov	r1, r7
 800643a:	f000 f80d 	bl	8006458 <__fpclassifyd>
 800643e:	b140      	cbz	r0, 8006452 <fmin+0x2c>
 8006440:	4632      	mov	r2, r6
 8006442:	463b      	mov	r3, r7
 8006444:	4620      	mov	r0, r4
 8006446:	4629      	mov	r1, r5
 8006448:	f7fa fb10 	bl	8000a6c <__aeabi_dcmplt>
 800644c:	b908      	cbnz	r0, 8006452 <fmin+0x2c>
 800644e:	4634      	mov	r4, r6
 8006450:	463d      	mov	r5, r7
 8006452:	4620      	mov	r0, r4
 8006454:	4629      	mov	r1, r5
 8006456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006458 <__fpclassifyd>:
 8006458:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800645c:	b510      	push	{r4, lr}
 800645e:	d01b      	beq.n	8006498 <__fpclassifyd+0x40>
 8006460:	4a0f      	ldr	r2, [pc, #60]	; (80064a0 <__fpclassifyd+0x48>)
 8006462:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8006466:	4294      	cmp	r4, r2
 8006468:	d910      	bls.n	800648c <__fpclassifyd+0x34>
 800646a:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 800646e:	4a0c      	ldr	r2, [pc, #48]	; (80064a0 <__fpclassifyd+0x48>)
 8006470:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 8006474:	4291      	cmp	r1, r2
 8006476:	d909      	bls.n	800648c <__fpclassifyd+0x34>
 8006478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800647c:	d308      	bcc.n	8006490 <__fpclassifyd+0x38>
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <__fpclassifyd+0x4c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d107      	bne.n	8006494 <__fpclassifyd+0x3c>
 8006484:	fab0 f080 	clz	r0, r0
 8006488:	0940      	lsrs	r0, r0, #5
 800648a:	bd10      	pop	{r4, pc}
 800648c:	2004      	movs	r0, #4
 800648e:	e7fc      	b.n	800648a <__fpclassifyd+0x32>
 8006490:	2003      	movs	r0, #3
 8006492:	e7fa      	b.n	800648a <__fpclassifyd+0x32>
 8006494:	2000      	movs	r0, #0
 8006496:	e7f8      	b.n	800648a <__fpclassifyd+0x32>
 8006498:	2800      	cmp	r0, #0
 800649a:	d1e6      	bne.n	800646a <__fpclassifyd+0x12>
 800649c:	2002      	movs	r0, #2
 800649e:	e7f4      	b.n	800648a <__fpclassifyd+0x32>
 80064a0:	7fdfffff 	.word	0x7fdfffff
 80064a4:	7ff00000 	.word	0x7ff00000

080064a8 <atan2>:
 80064a8:	f000 b856 	b.w	8006558 <__ieee754_atan2>

080064ac <sqrt>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	b08b      	sub	sp, #44	; 0x2c
 80064b2:	4604      	mov	r4, r0
 80064b4:	460d      	mov	r5, r1
 80064b6:	f000 f92d 	bl	8006714 <__ieee754_sqrt>
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <sqrt+0xa0>)
 80064bc:	4680      	mov	r8, r0
 80064be:	f993 a000 	ldrsb.w	sl, [r3]
 80064c2:	4689      	mov	r9, r1
 80064c4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80064c8:	d02b      	beq.n	8006522 <sqrt+0x76>
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa faf3 	bl	8000abc <__aeabi_dcmpun>
 80064d6:	4683      	mov	fp, r0
 80064d8:	bb18      	cbnz	r0, 8006522 <sqrt+0x76>
 80064da:	2600      	movs	r6, #0
 80064dc:	2700      	movs	r7, #0
 80064de:	4632      	mov	r2, r6
 80064e0:	463b      	mov	r3, r7
 80064e2:	4620      	mov	r0, r4
 80064e4:	4629      	mov	r1, r5
 80064e6:	f7fa fac1 	bl	8000a6c <__aeabi_dcmplt>
 80064ea:	b1d0      	cbz	r0, 8006522 <sqrt+0x76>
 80064ec:	2301      	movs	r3, #1
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <sqrt+0xa4>)
 80064f2:	f8cd b020 	str.w	fp, [sp, #32]
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80064fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006500:	f1ba 0f00 	cmp.w	sl, #0
 8006504:	d112      	bne.n	800652c <sqrt+0x80>
 8006506:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800650a:	4668      	mov	r0, sp
 800650c:	f000 fb3e 	bl	8006b8c <matherr>
 8006510:	b1b8      	cbz	r0, 8006542 <sqrt+0x96>
 8006512:	9b08      	ldr	r3, [sp, #32]
 8006514:	b11b      	cbz	r3, 800651e <sqrt+0x72>
 8006516:	f7ff ff3b 	bl	8006390 <__errno>
 800651a:	9b08      	ldr	r3, [sp, #32]
 800651c:	6003      	str	r3, [r0, #0]
 800651e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	b00b      	add	sp, #44	; 0x2c
 8006528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652c:	4632      	mov	r2, r6
 800652e:	463b      	mov	r3, r7
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	f7fa f952 	bl	80007dc <__aeabi_ddiv>
 8006538:	f1ba 0f02 	cmp.w	sl, #2
 800653c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006540:	d1e3      	bne.n	800650a <sqrt+0x5e>
 8006542:	f7ff ff25 	bl	8006390 <__errno>
 8006546:	2321      	movs	r3, #33	; 0x21
 8006548:	6003      	str	r3, [r0, #0]
 800654a:	e7e2      	b.n	8006512 <sqrt+0x66>
 800654c:	200000cc 	.word	0x200000cc
 8006550:	08006be0 	.word	0x08006be0
 8006554:	00000000 	.word	0x00000000

08006558 <__ieee754_atan2>:
 8006558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	4256      	negs	r6, r2
 800655e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8006562:	4316      	orrs	r6, r2
 8006564:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006710 <__ieee754_atan2+0x1b8>
 8006568:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800656c:	454e      	cmp	r6, r9
 800656e:	4604      	mov	r4, r0
 8006570:	460d      	mov	r5, r1
 8006572:	469e      	mov	lr, r3
 8006574:	d808      	bhi.n	8006588 <__ieee754_atan2+0x30>
 8006576:	4246      	negs	r6, r0
 8006578:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800657c:	4306      	orrs	r6, r0
 800657e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8006582:	454e      	cmp	r6, r9
 8006584:	4688      	mov	r8, r1
 8006586:	d906      	bls.n	8006596 <__ieee754_atan2+0x3e>
 8006588:	4620      	mov	r0, r4
 800658a:	4629      	mov	r1, r5
 800658c:	f7f9 fe46 	bl	800021c <__adddf3>
 8006590:	4604      	mov	r4, r0
 8006592:	460d      	mov	r5, r1
 8006594:	e030      	b.n	80065f8 <__ieee754_atan2+0xa0>
 8006596:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800659a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800659e:	4316      	orrs	r6, r2
 80065a0:	d103      	bne.n	80065aa <__ieee754_atan2+0x52>
 80065a2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a6:	f000 b963 	b.w	8006870 <atan>
 80065aa:	179e      	asrs	r6, r3, #30
 80065ac:	f006 0602 	and.w	r6, r6, #2
 80065b0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80065b4:	ea57 0100 	orrs.w	r1, r7, r0
 80065b8:	d107      	bne.n	80065ca <__ieee754_atan2+0x72>
 80065ba:	2e02      	cmp	r6, #2
 80065bc:	d079      	beq.n	80066b2 <__ieee754_atan2+0x15a>
 80065be:	2e03      	cmp	r6, #3
 80065c0:	d11a      	bne.n	80065f8 <__ieee754_atan2+0xa0>
 80065c2:	a541      	add	r5, pc, #260	; (adr r5, 80066c8 <__ieee754_atan2+0x170>)
 80065c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80065c8:	e016      	b.n	80065f8 <__ieee754_atan2+0xa0>
 80065ca:	ea5c 0102 	orrs.w	r1, ip, r2
 80065ce:	d106      	bne.n	80065de <__ieee754_atan2+0x86>
 80065d0:	f1b8 0f00 	cmp.w	r8, #0
 80065d4:	da71      	bge.n	80066ba <__ieee754_atan2+0x162>
 80065d6:	a53e      	add	r5, pc, #248	; (adr r5, 80066d0 <__ieee754_atan2+0x178>)
 80065d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80065dc:	e00c      	b.n	80065f8 <__ieee754_atan2+0xa0>
 80065de:	45cc      	cmp	ip, r9
 80065e0:	d123      	bne.n	800662a <__ieee754_atan2+0xd2>
 80065e2:	4567      	cmp	r7, ip
 80065e4:	d114      	bne.n	8006610 <__ieee754_atan2+0xb8>
 80065e6:	2e02      	cmp	r6, #2
 80065e8:	d00a      	beq.n	8006600 <__ieee754_atan2+0xa8>
 80065ea:	2e03      	cmp	r6, #3
 80065ec:	d00c      	beq.n	8006608 <__ieee754_atan2+0xb0>
 80065ee:	2e01      	cmp	r6, #1
 80065f0:	d15b      	bne.n	80066aa <__ieee754_atan2+0x152>
 80065f2:	a539      	add	r5, pc, #228	; (adr r5, 80066d8 <__ieee754_atan2+0x180>)
 80065f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	a537      	add	r5, pc, #220	; (adr r5, 80066e0 <__ieee754_atan2+0x188>)
 8006602:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006606:	e7f7      	b.n	80065f8 <__ieee754_atan2+0xa0>
 8006608:	a537      	add	r5, pc, #220	; (adr r5, 80066e8 <__ieee754_atan2+0x190>)
 800660a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800660e:	e7f3      	b.n	80065f8 <__ieee754_atan2+0xa0>
 8006610:	2e02      	cmp	r6, #2
 8006612:	d04e      	beq.n	80066b2 <__ieee754_atan2+0x15a>
 8006614:	2e03      	cmp	r6, #3
 8006616:	d0d4      	beq.n	80065c2 <__ieee754_atan2+0x6a>
 8006618:	2e01      	cmp	r6, #1
 800661a:	f04f 0400 	mov.w	r4, #0
 800661e:	d102      	bne.n	8006626 <__ieee754_atan2+0xce>
 8006620:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006624:	e7e8      	b.n	80065f8 <__ieee754_atan2+0xa0>
 8006626:	2500      	movs	r5, #0
 8006628:	e7e6      	b.n	80065f8 <__ieee754_atan2+0xa0>
 800662a:	454f      	cmp	r7, r9
 800662c:	d0d0      	beq.n	80065d0 <__ieee754_atan2+0x78>
 800662e:	eba7 070c 	sub.w	r7, r7, ip
 8006632:	153f      	asrs	r7, r7, #20
 8006634:	2f3c      	cmp	r7, #60	; 0x3c
 8006636:	dc1e      	bgt.n	8006676 <__ieee754_atan2+0x11e>
 8006638:	2b00      	cmp	r3, #0
 800663a:	da01      	bge.n	8006640 <__ieee754_atan2+0xe8>
 800663c:	373c      	adds	r7, #60	; 0x3c
 800663e:	db1e      	blt.n	800667e <__ieee754_atan2+0x126>
 8006640:	4620      	mov	r0, r4
 8006642:	4629      	mov	r1, r5
 8006644:	f7fa f8ca 	bl	80007dc <__aeabi_ddiv>
 8006648:	f000 fa9c 	bl	8006b84 <fabs>
 800664c:	f000 f910 	bl	8006870 <atan>
 8006650:	4604      	mov	r4, r0
 8006652:	460d      	mov	r5, r1
 8006654:	2e01      	cmp	r6, #1
 8006656:	d015      	beq.n	8006684 <__ieee754_atan2+0x12c>
 8006658:	2e02      	cmp	r6, #2
 800665a:	d017      	beq.n	800668c <__ieee754_atan2+0x134>
 800665c:	2e00      	cmp	r6, #0
 800665e:	d0cb      	beq.n	80065f8 <__ieee754_atan2+0xa0>
 8006660:	a323      	add	r3, pc, #140	; (adr r3, 80066f0 <__ieee754_atan2+0x198>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7f9 fdd5 	bl	8000218 <__aeabi_dsub>
 800666e:	a322      	add	r3, pc, #136	; (adr r3, 80066f8 <__ieee754_atan2+0x1a0>)
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	e016      	b.n	80066a4 <__ieee754_atan2+0x14c>
 8006676:	a522      	add	r5, pc, #136	; (adr r5, 8006700 <__ieee754_atan2+0x1a8>)
 8006678:	e9d5 4500 	ldrd	r4, r5, [r5]
 800667c:	e7ea      	b.n	8006654 <__ieee754_atan2+0xfc>
 800667e:	2400      	movs	r4, #0
 8006680:	2500      	movs	r5, #0
 8006682:	e7e7      	b.n	8006654 <__ieee754_atan2+0xfc>
 8006684:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006688:	461d      	mov	r5, r3
 800668a:	e7b5      	b.n	80065f8 <__ieee754_atan2+0xa0>
 800668c:	a318      	add	r3, pc, #96	; (adr r3, 80066f0 <__ieee754_atan2+0x198>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	4620      	mov	r0, r4
 8006694:	4629      	mov	r1, r5
 8006696:	f7f9 fdbf 	bl	8000218 <__aeabi_dsub>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	a116      	add	r1, pc, #88	; (adr r1, 80066f8 <__ieee754_atan2+0x1a0>)
 80066a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066a4:	f7f9 fdb8 	bl	8000218 <__aeabi_dsub>
 80066a8:	e772      	b.n	8006590 <__ieee754_atan2+0x38>
 80066aa:	a517      	add	r5, pc, #92	; (adr r5, 8006708 <__ieee754_atan2+0x1b0>)
 80066ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066b0:	e7a2      	b.n	80065f8 <__ieee754_atan2+0xa0>
 80066b2:	a511      	add	r5, pc, #68	; (adr r5, 80066f8 <__ieee754_atan2+0x1a0>)
 80066b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066b8:	e79e      	b.n	80065f8 <__ieee754_atan2+0xa0>
 80066ba:	a511      	add	r5, pc, #68	; (adr r5, 8006700 <__ieee754_atan2+0x1a8>)
 80066bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066c0:	e79a      	b.n	80065f8 <__ieee754_atan2+0xa0>
 80066c2:	bf00      	nop
 80066c4:	f3af 8000 	nop.w
 80066c8:	54442d18 	.word	0x54442d18
 80066cc:	c00921fb 	.word	0xc00921fb
 80066d0:	54442d18 	.word	0x54442d18
 80066d4:	bff921fb 	.word	0xbff921fb
 80066d8:	54442d18 	.word	0x54442d18
 80066dc:	bfe921fb 	.word	0xbfe921fb
 80066e0:	7f3321d2 	.word	0x7f3321d2
 80066e4:	4002d97c 	.word	0x4002d97c
 80066e8:	7f3321d2 	.word	0x7f3321d2
 80066ec:	c002d97c 	.word	0xc002d97c
 80066f0:	33145c07 	.word	0x33145c07
 80066f4:	3ca1a626 	.word	0x3ca1a626
 80066f8:	54442d18 	.word	0x54442d18
 80066fc:	400921fb 	.word	0x400921fb
 8006700:	54442d18 	.word	0x54442d18
 8006704:	3ff921fb 	.word	0x3ff921fb
 8006708:	54442d18 	.word	0x54442d18
 800670c:	3fe921fb 	.word	0x3fe921fb
 8006710:	7ff00000 	.word	0x7ff00000

08006714 <__ieee754_sqrt>:
 8006714:	4b54      	ldr	r3, [pc, #336]	; (8006868 <__ieee754_sqrt+0x154>)
 8006716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671a:	438b      	bics	r3, r1
 800671c:	4606      	mov	r6, r0
 800671e:	460d      	mov	r5, r1
 8006720:	460a      	mov	r2, r1
 8006722:	460c      	mov	r4, r1
 8006724:	d10f      	bne.n	8006746 <__ieee754_sqrt+0x32>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	f7f9 ff2d 	bl	8000588 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4630      	mov	r0, r6
 8006734:	4629      	mov	r1, r5
 8006736:	f7f9 fd71 	bl	800021c <__adddf3>
 800673a:	4606      	mov	r6, r0
 800673c:	460d      	mov	r5, r1
 800673e:	4630      	mov	r0, r6
 8006740:	4629      	mov	r1, r5
 8006742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006746:	2900      	cmp	r1, #0
 8006748:	4607      	mov	r7, r0
 800674a:	4603      	mov	r3, r0
 800674c:	dc0e      	bgt.n	800676c <__ieee754_sqrt+0x58>
 800674e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006752:	ea5c 0707 	orrs.w	r7, ip, r7
 8006756:	d0f2      	beq.n	800673e <__ieee754_sqrt+0x2a>
 8006758:	b141      	cbz	r1, 800676c <__ieee754_sqrt+0x58>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	f7f9 fd5b 	bl	8000218 <__aeabi_dsub>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	f7fa f839 	bl	80007dc <__aeabi_ddiv>
 800676a:	e7e6      	b.n	800673a <__ieee754_sqrt+0x26>
 800676c:	1512      	asrs	r2, r2, #20
 800676e:	d074      	beq.n	800685a <__ieee754_sqrt+0x146>
 8006770:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006774:	07d5      	lsls	r5, r2, #31
 8006776:	f04f 0500 	mov.w	r5, #0
 800677a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800677e:	bf48      	it	mi
 8006780:	0fd9      	lsrmi	r1, r3, #31
 8006782:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006786:	bf44      	itt	mi
 8006788:	005b      	lslmi	r3, r3, #1
 800678a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800678e:	1051      	asrs	r1, r2, #1
 8006790:	0fda      	lsrs	r2, r3, #31
 8006792:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006796:	4628      	mov	r0, r5
 8006798:	2216      	movs	r2, #22
 800679a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	1987      	adds	r7, r0, r6
 80067a2:	42a7      	cmp	r7, r4
 80067a4:	bfde      	ittt	le
 80067a6:	19b8      	addle	r0, r7, r6
 80067a8:	1be4      	suble	r4, r4, r7
 80067aa:	19ad      	addle	r5, r5, r6
 80067ac:	0fdf      	lsrs	r7, r3, #31
 80067ae:	3a01      	subs	r2, #1
 80067b0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80067b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80067bc:	d1f0      	bne.n	80067a0 <__ieee754_sqrt+0x8c>
 80067be:	f04f 0c20 	mov.w	ip, #32
 80067c2:	4696      	mov	lr, r2
 80067c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80067c8:	4284      	cmp	r4, r0
 80067ca:	eb06 070e 	add.w	r7, r6, lr
 80067ce:	dc02      	bgt.n	80067d6 <__ieee754_sqrt+0xc2>
 80067d0:	d112      	bne.n	80067f8 <__ieee754_sqrt+0xe4>
 80067d2:	429f      	cmp	r7, r3
 80067d4:	d810      	bhi.n	80067f8 <__ieee754_sqrt+0xe4>
 80067d6:	2f00      	cmp	r7, #0
 80067d8:	eb07 0e06 	add.w	lr, r7, r6
 80067dc:	da42      	bge.n	8006864 <__ieee754_sqrt+0x150>
 80067de:	f1be 0f00 	cmp.w	lr, #0
 80067e2:	db3f      	blt.n	8006864 <__ieee754_sqrt+0x150>
 80067e4:	f100 0801 	add.w	r8, r0, #1
 80067e8:	1a24      	subs	r4, r4, r0
 80067ea:	4640      	mov	r0, r8
 80067ec:	429f      	cmp	r7, r3
 80067ee:	bf88      	it	hi
 80067f0:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 80067f4:	1bdb      	subs	r3, r3, r7
 80067f6:	4432      	add	r2, r6
 80067f8:	0064      	lsls	r4, r4, #1
 80067fa:	f1bc 0c01 	subs.w	ip, ip, #1
 80067fe:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006802:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006806:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800680a:	d1dd      	bne.n	80067c8 <__ieee754_sqrt+0xb4>
 800680c:	4323      	orrs	r3, r4
 800680e:	d006      	beq.n	800681e <__ieee754_sqrt+0x10a>
 8006810:	1c54      	adds	r4, r2, #1
 8006812:	bf0b      	itete	eq
 8006814:	4662      	moveq	r2, ip
 8006816:	3201      	addne	r2, #1
 8006818:	3501      	addeq	r5, #1
 800681a:	f022 0201 	bicne.w	r2, r2, #1
 800681e:	106b      	asrs	r3, r5, #1
 8006820:	0852      	lsrs	r2, r2, #1
 8006822:	07e8      	lsls	r0, r5, #31
 8006824:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006828:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800682c:	bf48      	it	mi
 800682e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006832:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006836:	4616      	mov	r6, r2
 8006838:	e781      	b.n	800673e <__ieee754_sqrt+0x2a>
 800683a:	0adc      	lsrs	r4, r3, #11
 800683c:	3915      	subs	r1, #21
 800683e:	055b      	lsls	r3, r3, #21
 8006840:	2c00      	cmp	r4, #0
 8006842:	d0fa      	beq.n	800683a <__ieee754_sqrt+0x126>
 8006844:	02e6      	lsls	r6, r4, #11
 8006846:	d50a      	bpl.n	800685e <__ieee754_sqrt+0x14a>
 8006848:	f1c2 0020 	rsb	r0, r2, #32
 800684c:	fa23 f000 	lsr.w	r0, r3, r0
 8006850:	1e55      	subs	r5, r2, #1
 8006852:	4093      	lsls	r3, r2
 8006854:	4304      	orrs	r4, r0
 8006856:	1b4a      	subs	r2, r1, r5
 8006858:	e78a      	b.n	8006770 <__ieee754_sqrt+0x5c>
 800685a:	4611      	mov	r1, r2
 800685c:	e7f0      	b.n	8006840 <__ieee754_sqrt+0x12c>
 800685e:	0064      	lsls	r4, r4, #1
 8006860:	3201      	adds	r2, #1
 8006862:	e7ef      	b.n	8006844 <__ieee754_sqrt+0x130>
 8006864:	4680      	mov	r8, r0
 8006866:	e7bf      	b.n	80067e8 <__ieee754_sqrt+0xd4>
 8006868:	7ff00000 	.word	0x7ff00000
 800686c:	00000000 	.word	0x00000000

08006870 <atan>:
 8006870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	4bb6      	ldr	r3, [pc, #728]	; (8006b50 <atan+0x2e0>)
 8006876:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800687a:	429e      	cmp	r6, r3
 800687c:	4604      	mov	r4, r0
 800687e:	460d      	mov	r5, r1
 8006880:	468b      	mov	fp, r1
 8006882:	dd17      	ble.n	80068b4 <atan+0x44>
 8006884:	4bb3      	ldr	r3, [pc, #716]	; (8006b54 <atan+0x2e4>)
 8006886:	429e      	cmp	r6, r3
 8006888:	dc01      	bgt.n	800688e <atan+0x1e>
 800688a:	d109      	bne.n	80068a0 <atan+0x30>
 800688c:	b140      	cbz	r0, 80068a0 <atan+0x30>
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	4620      	mov	r0, r4
 8006894:	4629      	mov	r1, r5
 8006896:	f7f9 fcc1 	bl	800021c <__adddf3>
 800689a:	4604      	mov	r4, r0
 800689c:	460d      	mov	r5, r1
 800689e:	e005      	b.n	80068ac <atan+0x3c>
 80068a0:	f1bb 0f00 	cmp.w	fp, #0
 80068a4:	4cac      	ldr	r4, [pc, #688]	; (8006b58 <atan+0x2e8>)
 80068a6:	f340 8121 	ble.w	8006aec <atan+0x27c>
 80068aa:	4dac      	ldr	r5, [pc, #688]	; (8006b5c <atan+0x2ec>)
 80068ac:	4620      	mov	r0, r4
 80068ae:	4629      	mov	r1, r5
 80068b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b4:	4baa      	ldr	r3, [pc, #680]	; (8006b60 <atan+0x2f0>)
 80068b6:	429e      	cmp	r6, r3
 80068b8:	dc11      	bgt.n	80068de <atan+0x6e>
 80068ba:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80068be:	429e      	cmp	r6, r3
 80068c0:	dc0a      	bgt.n	80068d8 <atan+0x68>
 80068c2:	a38b      	add	r3, pc, #556	; (adr r3, 8006af0 <atan+0x280>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f7f9 fca8 	bl	800021c <__adddf3>
 80068cc:	2200      	movs	r2, #0
 80068ce:	4ba5      	ldr	r3, [pc, #660]	; (8006b64 <atan+0x2f4>)
 80068d0:	f7fa f8ea 	bl	8000aa8 <__aeabi_dcmpgt>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d1e9      	bne.n	80068ac <atan+0x3c>
 80068d8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80068dc:	e027      	b.n	800692e <atan+0xbe>
 80068de:	f000 f951 	bl	8006b84 <fabs>
 80068e2:	4ba1      	ldr	r3, [pc, #644]	; (8006b68 <atan+0x2f8>)
 80068e4:	4604      	mov	r4, r0
 80068e6:	429e      	cmp	r6, r3
 80068e8:	460d      	mov	r5, r1
 80068ea:	f300 80b8 	bgt.w	8006a5e <atan+0x1ee>
 80068ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80068f2:	429e      	cmp	r6, r3
 80068f4:	f300 809c 	bgt.w	8006a30 <atan+0x1c0>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	f7f9 fc8e 	bl	800021c <__adddf3>
 8006900:	2200      	movs	r2, #0
 8006902:	4b98      	ldr	r3, [pc, #608]	; (8006b64 <atan+0x2f4>)
 8006904:	f7f9 fc88 	bl	8000218 <__aeabi_dsub>
 8006908:	2200      	movs	r2, #0
 800690a:	4606      	mov	r6, r0
 800690c:	460f      	mov	r7, r1
 800690e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	f7f9 fc81 	bl	800021c <__adddf3>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4630      	mov	r0, r6
 8006920:	4639      	mov	r1, r7
 8006922:	f7f9 ff5b 	bl	80007dc <__aeabi_ddiv>
 8006926:	f04f 0a00 	mov.w	sl, #0
 800692a:	4604      	mov	r4, r0
 800692c:	460d      	mov	r5, r1
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7f9 fe27 	bl	8000588 <__aeabi_dmul>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4680      	mov	r8, r0
 8006940:	4689      	mov	r9, r1
 8006942:	f7f9 fe21 	bl	8000588 <__aeabi_dmul>
 8006946:	a36c      	add	r3, pc, #432	; (adr r3, 8006af8 <atan+0x288>)
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	4606      	mov	r6, r0
 800694e:	460f      	mov	r7, r1
 8006950:	f7f9 fe1a 	bl	8000588 <__aeabi_dmul>
 8006954:	a36a      	add	r3, pc, #424	; (adr r3, 8006b00 <atan+0x290>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fc5f 	bl	800021c <__adddf3>
 800695e:	4632      	mov	r2, r6
 8006960:	463b      	mov	r3, r7
 8006962:	f7f9 fe11 	bl	8000588 <__aeabi_dmul>
 8006966:	a368      	add	r3, pc, #416	; (adr r3, 8006b08 <atan+0x298>)
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f7f9 fc56 	bl	800021c <__adddf3>
 8006970:	4632      	mov	r2, r6
 8006972:	463b      	mov	r3, r7
 8006974:	f7f9 fe08 	bl	8000588 <__aeabi_dmul>
 8006978:	a365      	add	r3, pc, #404	; (adr r3, 8006b10 <atan+0x2a0>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fc4d 	bl	800021c <__adddf3>
 8006982:	4632      	mov	r2, r6
 8006984:	463b      	mov	r3, r7
 8006986:	f7f9 fdff 	bl	8000588 <__aeabi_dmul>
 800698a:	a363      	add	r3, pc, #396	; (adr r3, 8006b18 <atan+0x2a8>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f7f9 fc44 	bl	800021c <__adddf3>
 8006994:	4632      	mov	r2, r6
 8006996:	463b      	mov	r3, r7
 8006998:	f7f9 fdf6 	bl	8000588 <__aeabi_dmul>
 800699c:	a360      	add	r3, pc, #384	; (adr r3, 8006b20 <atan+0x2b0>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 fc3b 	bl	800021c <__adddf3>
 80069a6:	4642      	mov	r2, r8
 80069a8:	464b      	mov	r3, r9
 80069aa:	f7f9 fded 	bl	8000588 <__aeabi_dmul>
 80069ae:	a35e      	add	r3, pc, #376	; (adr r3, 8006b28 <atan+0x2b8>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7f9 fde4 	bl	8000588 <__aeabi_dmul>
 80069c0:	a35b      	add	r3, pc, #364	; (adr r3, 8006b30 <atan+0x2c0>)
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	f7f9 fc27 	bl	8000218 <__aeabi_dsub>
 80069ca:	4632      	mov	r2, r6
 80069cc:	463b      	mov	r3, r7
 80069ce:	f7f9 fddb 	bl	8000588 <__aeabi_dmul>
 80069d2:	a359      	add	r3, pc, #356	; (adr r3, 8006b38 <atan+0x2c8>)
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f7f9 fc1e 	bl	8000218 <__aeabi_dsub>
 80069dc:	4632      	mov	r2, r6
 80069de:	463b      	mov	r3, r7
 80069e0:	f7f9 fdd2 	bl	8000588 <__aeabi_dmul>
 80069e4:	a356      	add	r3, pc, #344	; (adr r3, 8006b40 <atan+0x2d0>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f7f9 fc15 	bl	8000218 <__aeabi_dsub>
 80069ee:	4632      	mov	r2, r6
 80069f0:	463b      	mov	r3, r7
 80069f2:	f7f9 fdc9 	bl	8000588 <__aeabi_dmul>
 80069f6:	a354      	add	r3, pc, #336	; (adr r3, 8006b48 <atan+0x2d8>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f7f9 fc0c 	bl	8000218 <__aeabi_dsub>
 8006a00:	4632      	mov	r2, r6
 8006a02:	463b      	mov	r3, r7
 8006a04:	f7f9 fdc0 	bl	8000588 <__aeabi_dmul>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4649      	mov	r1, r9
 8006a10:	f7f9 fc04 	bl	800021c <__adddf3>
 8006a14:	4622      	mov	r2, r4
 8006a16:	462b      	mov	r3, r5
 8006a18:	f7f9 fdb6 	bl	8000588 <__aeabi_dmul>
 8006a1c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	d144      	bne.n	8006ab0 <atan+0x240>
 8006a26:	4620      	mov	r0, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f7f9 fbf5 	bl	8000218 <__aeabi_dsub>
 8006a2e:	e734      	b.n	800689a <atan+0x2a>
 8006a30:	2200      	movs	r2, #0
 8006a32:	4b4c      	ldr	r3, [pc, #304]	; (8006b64 <atan+0x2f4>)
 8006a34:	f7f9 fbf0 	bl	8000218 <__aeabi_dsub>
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	4b49      	ldr	r3, [pc, #292]	; (8006b64 <atan+0x2f4>)
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 fbea 	bl	800021c <__adddf3>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	4639      	mov	r1, r7
 8006a50:	f7f9 fec4 	bl	80007dc <__aeabi_ddiv>
 8006a54:	f04f 0a01 	mov.w	sl, #1
 8006a58:	4604      	mov	r4, r0
 8006a5a:	460d      	mov	r5, r1
 8006a5c:	e767      	b.n	800692e <atan+0xbe>
 8006a5e:	4b43      	ldr	r3, [pc, #268]	; (8006b6c <atan+0x2fc>)
 8006a60:	429e      	cmp	r6, r3
 8006a62:	dc1a      	bgt.n	8006a9a <atan+0x22a>
 8006a64:	2200      	movs	r2, #0
 8006a66:	4b42      	ldr	r3, [pc, #264]	; (8006b70 <atan+0x300>)
 8006a68:	f7f9 fbd6 	bl	8000218 <__aeabi_dsub>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460f      	mov	r7, r1
 8006a72:	4b3f      	ldr	r3, [pc, #252]	; (8006b70 <atan+0x300>)
 8006a74:	4620      	mov	r0, r4
 8006a76:	4629      	mov	r1, r5
 8006a78:	f7f9 fd86 	bl	8000588 <__aeabi_dmul>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4b39      	ldr	r3, [pc, #228]	; (8006b64 <atan+0x2f4>)
 8006a80:	f7f9 fbcc 	bl	800021c <__adddf3>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7f9 fea6 	bl	80007dc <__aeabi_ddiv>
 8006a90:	f04f 0a02 	mov.w	sl, #2
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
 8006a98:	e749      	b.n	800692e <atan+0xbe>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	4934      	ldr	r1, [pc, #208]	; (8006b74 <atan+0x304>)
 8006aa2:	f7f9 fe9b 	bl	80007dc <__aeabi_ddiv>
 8006aa6:	f04f 0a03 	mov.w	sl, #3
 8006aaa:	4604      	mov	r4, r0
 8006aac:	460d      	mov	r5, r1
 8006aae:	e73e      	b.n	800692e <atan+0xbe>
 8006ab0:	4b31      	ldr	r3, [pc, #196]	; (8006b78 <atan+0x308>)
 8006ab2:	4e32      	ldr	r6, [pc, #200]	; (8006b7c <atan+0x30c>)
 8006ab4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006ab8:	4456      	add	r6, sl
 8006aba:	449a      	add	sl, r3
 8006abc:	e9da 2300 	ldrd	r2, r3, [sl]
 8006ac0:	f7f9 fbaa 	bl	8000218 <__aeabi_dsub>
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	462b      	mov	r3, r5
 8006ac8:	f7f9 fba6 	bl	8000218 <__aeabi_dsub>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006ad4:	f7f9 fba0 	bl	8000218 <__aeabi_dsub>
 8006ad8:	f1bb 0f00 	cmp.w	fp, #0
 8006adc:	4604      	mov	r4, r0
 8006ade:	460d      	mov	r5, r1
 8006ae0:	f6bf aee4 	bge.w	80068ac <atan+0x3c>
 8006ae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ae8:	461d      	mov	r5, r3
 8006aea:	e6df      	b.n	80068ac <atan+0x3c>
 8006aec:	4d24      	ldr	r5, [pc, #144]	; (8006b80 <atan+0x310>)
 8006aee:	e6dd      	b.n	80068ac <atan+0x3c>
 8006af0:	8800759c 	.word	0x8800759c
 8006af4:	7e37e43c 	.word	0x7e37e43c
 8006af8:	e322da11 	.word	0xe322da11
 8006afc:	3f90ad3a 	.word	0x3f90ad3a
 8006b00:	24760deb 	.word	0x24760deb
 8006b04:	3fa97b4b 	.word	0x3fa97b4b
 8006b08:	a0d03d51 	.word	0xa0d03d51
 8006b0c:	3fb10d66 	.word	0x3fb10d66
 8006b10:	c54c206e 	.word	0xc54c206e
 8006b14:	3fb745cd 	.word	0x3fb745cd
 8006b18:	920083ff 	.word	0x920083ff
 8006b1c:	3fc24924 	.word	0x3fc24924
 8006b20:	5555550d 	.word	0x5555550d
 8006b24:	3fd55555 	.word	0x3fd55555
 8006b28:	2c6a6c2f 	.word	0x2c6a6c2f
 8006b2c:	bfa2b444 	.word	0xbfa2b444
 8006b30:	52defd9a 	.word	0x52defd9a
 8006b34:	3fadde2d 	.word	0x3fadde2d
 8006b38:	af749a6d 	.word	0xaf749a6d
 8006b3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006b40:	fe231671 	.word	0xfe231671
 8006b44:	3fbc71c6 	.word	0x3fbc71c6
 8006b48:	9998ebc4 	.word	0x9998ebc4
 8006b4c:	3fc99999 	.word	0x3fc99999
 8006b50:	440fffff 	.word	0x440fffff
 8006b54:	7ff00000 	.word	0x7ff00000
 8006b58:	54442d18 	.word	0x54442d18
 8006b5c:	3ff921fb 	.word	0x3ff921fb
 8006b60:	3fdbffff 	.word	0x3fdbffff
 8006b64:	3ff00000 	.word	0x3ff00000
 8006b68:	3ff2ffff 	.word	0x3ff2ffff
 8006b6c:	40037fff 	.word	0x40037fff
 8006b70:	3ff80000 	.word	0x3ff80000
 8006b74:	bff00000 	.word	0xbff00000
 8006b78:	08006c08 	.word	0x08006c08
 8006b7c:	08006be8 	.word	0x08006be8
 8006b80:	bff921fb 	.word	0xbff921fb

08006b84 <fabs>:
 8006b84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4770      	bx	lr

08006b8c <matherr>:
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	4770      	bx	lr

08006b90 <_init>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr

08006b9c <_fini>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr
