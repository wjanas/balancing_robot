
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005970  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005b40  08005b40  00015b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc0  08005bc0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005bc0  08005bc0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bc0  08005bc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000078  08005c3c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08005c3c  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122f1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025e7  00000000  00000000  0003238e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00034978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e18  00000000  00000000  00035888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000eab2  00000000  00000000  000366a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba42  00000000  00000000  00045152  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005362f  00000000  00000000  00050b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a41c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004324  00000000  00000000  000a4240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b28 	.word	0x08005b28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005b28 	.word	0x08005b28

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_frsub>:
 8000bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	e002      	b.n	8000be4 <__addsf3>
 8000bde:	bf00      	nop

08000be0 <__aeabi_fsub>:
 8000be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000be4 <__addsf3>:
 8000be4:	0042      	lsls	r2, r0, #1
 8000be6:	bf1f      	itttt	ne
 8000be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bec:	ea92 0f03 	teqne	r2, r3
 8000bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf8:	d06a      	beq.n	8000cd0 <__addsf3+0xec>
 8000bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c02:	bfc1      	itttt	gt
 8000c04:	18d2      	addgt	r2, r2, r3
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	4048      	eorgt	r0, r1
 8000c0a:	4041      	eorgt	r1, r0
 8000c0c:	bfb8      	it	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	2b19      	cmp	r3, #25
 8000c12:	bf88      	it	hi
 8000c14:	4770      	bxhi	lr
 8000c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4249      	negne	r1, r1
 8000c36:	ea92 0f03 	teq	r2, r3
 8000c3a:	d03f      	beq.n	8000cbc <__addsf3+0xd8>
 8000c3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c40:	fa41 fc03 	asr.w	ip, r1, r3
 8000c44:	eb10 000c 	adds.w	r0, r0, ip
 8000c48:	f1c3 0320 	rsb	r3, r3, #32
 8000c4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__addsf3+0x78>
 8000c56:	4249      	negs	r1, r1
 8000c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c60:	d313      	bcc.n	8000c8a <__addsf3+0xa6>
 8000c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c66:	d306      	bcc.n	8000c76 <__addsf3+0x92>
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6e:	f102 0201 	add.w	r2, r2, #1
 8000c72:	2afe      	cmp	r2, #254	; 0xfe
 8000c74:	d251      	bcs.n	8000d1a <__addsf3+0x136>
 8000c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	ea40 0003 	orr.w	r0, r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	eb40 0000 	adc.w	r0, r0, r0
 8000c90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	d1ed      	bne.n	8000c76 <__addsf3+0x92>
 8000c9a:	fab0 fc80 	clz	ip, r0
 8000c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ca2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000caa:	bfaa      	itet	ge
 8000cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb0:	4252      	neglt	r2, r2
 8000cb2:	4318      	orrge	r0, r3
 8000cb4:	bfbc      	itt	lt
 8000cb6:	40d0      	lsrlt	r0, r2
 8000cb8:	4318      	orrlt	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	f092 0f00 	teq	r2, #0
 8000cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cc4:	bf06      	itte	eq
 8000cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cca:	3201      	addeq	r2, #1
 8000ccc:	3b01      	subne	r3, #1
 8000cce:	e7b5      	b.n	8000c3c <__addsf3+0x58>
 8000cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd8:	bf18      	it	ne
 8000cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cde:	d021      	beq.n	8000d24 <__addsf3+0x140>
 8000ce0:	ea92 0f03 	teq	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <__addsf3+0x10c>
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	bf08      	it	eq
 8000cec:	4608      	moveq	r0, r1
 8000cee:	4770      	bx	lr
 8000cf0:	ea90 0f01 	teq	r0, r1
 8000cf4:	bf1c      	itt	ne
 8000cf6:	2000      	movne	r0, #0
 8000cf8:	4770      	bxne	lr
 8000cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cfe:	d104      	bne.n	8000d0a <__addsf3+0x126>
 8000d00:	0040      	lsls	r0, r0, #1
 8000d02:	bf28      	it	cs
 8000d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	4770      	bx	lr
 8000d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d0e:	bf3c      	itt	cc
 8000d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bxcc	lr
 8000d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	4770      	bx	lr
 8000d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d28:	bf16      	itet	ne
 8000d2a:	4608      	movne	r0, r1
 8000d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d30:	4601      	movne	r1, r0
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	bf06      	itte	eq
 8000d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d3a:	ea90 0f01 	teqeq	r0, r1
 8000d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_ui2f>:
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e004      	b.n	8000d54 <__aeabi_i2f+0x8>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_i2f>:
 8000d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	bf48      	it	mi
 8000d52:	4240      	negmi	r0, r0
 8000d54:	ea5f 0c00 	movs.w	ip, r0
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d60:	4601      	mov	r1, r0
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	e01c      	b.n	8000da2 <__aeabi_l2f+0x2a>

08000d68 <__aeabi_ul2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e00a      	b.n	8000d8c <__aeabi_l2f+0x14>
 8000d76:	bf00      	nop

08000d78 <__aeabi_l2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__aeabi_l2f+0x14>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	ea5f 0c01 	movs.w	ip, r1
 8000d90:	bf02      	ittt	eq
 8000d92:	4684      	moveq	ip, r0
 8000d94:	4601      	moveq	r1, r0
 8000d96:	2000      	moveq	r0, #0
 8000d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d9c:	bf08      	it	eq
 8000d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000da6:	fabc f28c 	clz	r2, ip
 8000daa:	3a08      	subs	r2, #8
 8000dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db0:	db10      	blt.n	8000dd4 <__aeabi_l2f+0x5c>
 8000db2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db6:	4463      	add	r3, ip
 8000db8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f102 0220 	add.w	r2, r2, #32
 8000dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de4:	fa21 f202 	lsr.w	r2, r1, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_fmul>:
 8000df4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dfc:	bf1e      	ittt	ne
 8000dfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e02:	ea92 0f0c 	teqne	r2, ip
 8000e06:	ea93 0f0c 	teqne	r3, ip
 8000e0a:	d06f      	beq.n	8000eec <__aeabi_fmul+0xf8>
 8000e0c:	441a      	add	r2, r3
 8000e0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	bf18      	it	ne
 8000e16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e1a:	d01e      	beq.n	8000e5a <__aeabi_fmul+0x66>
 8000e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e28:	fba0 3101 	umull	r3, r1, r0, r1
 8000e2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e34:	bf3e      	ittt	cc
 8000e36:	0049      	lslcc	r1, r1, #1
 8000e38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e3c:	005b      	lslcc	r3, r3, #1
 8000e3e:	ea40 0001 	orr.w	r0, r0, r1
 8000e42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e46:	2afd      	cmp	r2, #253	; 0xfd
 8000e48:	d81d      	bhi.n	8000e86 <__aeabi_fmul+0x92>
 8000e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e52:	bf08      	it	eq
 8000e54:	f020 0001 	biceq.w	r0, r0, #1
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e62:	bf08      	it	eq
 8000e64:	0249      	lsleq	r1, r1, #9
 8000e66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e6e:	3a7f      	subs	r2, #127	; 0x7f
 8000e70:	bfc2      	ittt	gt
 8000e72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e7a:	4770      	bxgt	lr
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	3a01      	subs	r2, #1
 8000e86:	dc5d      	bgt.n	8000f44 <__aeabi_fmul+0x150>
 8000e88:	f112 0f19 	cmn.w	r2, #25
 8000e8c:	bfdc      	itt	le
 8000e8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e92:	4770      	bxle	lr
 8000e94:	f1c2 0200 	rsb	r2, r2, #0
 8000e98:	0041      	lsls	r1, r0, #1
 8000e9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ea2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ea6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eaa:	f140 0000 	adc.w	r0, r0, #0
 8000eae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eb2:	bf08      	it	eq
 8000eb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb8:	4770      	bx	lr
 8000eba:	f092 0f00 	teq	r2, #0
 8000ebe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ec2:	bf02      	ittt	eq
 8000ec4:	0040      	lsleq	r0, r0, #1
 8000ec6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eca:	3a01      	subeq	r2, #1
 8000ecc:	d0f9      	beq.n	8000ec2 <__aeabi_fmul+0xce>
 8000ece:	ea40 000c 	orr.w	r0, r0, ip
 8000ed2:	f093 0f00 	teq	r3, #0
 8000ed6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0049      	lsleq	r1, r1, #1
 8000ede:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ee2:	3b01      	subeq	r3, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fmul+0xe6>
 8000ee6:	ea41 010c 	orr.w	r1, r1, ip
 8000eea:	e78f      	b.n	8000e0c <__aeabi_fmul+0x18>
 8000eec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	bf18      	it	ne
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d00a      	beq.n	8000f12 <__aeabi_fmul+0x11e>
 8000efc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f00:	bf18      	it	ne
 8000f02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	d1d8      	bne.n	8000eba <__aeabi_fmul+0xc6>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	4770      	bx	lr
 8000f12:	f090 0f00 	teq	r0, #0
 8000f16:	bf17      	itett	ne
 8000f18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f1c:	4608      	moveq	r0, r1
 8000f1e:	f091 0f00 	teqne	r1, #0
 8000f22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f26:	d014      	beq.n	8000f52 <__aeabi_fmul+0x15e>
 8000f28:	ea92 0f0c 	teq	r2, ip
 8000f2c:	d101      	bne.n	8000f32 <__aeabi_fmul+0x13e>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	d10f      	bne.n	8000f52 <__aeabi_fmul+0x15e>
 8000f32:	ea93 0f0c 	teq	r3, ip
 8000f36:	d103      	bne.n	8000f40 <__aeabi_fmul+0x14c>
 8000f38:	024b      	lsls	r3, r1, #9
 8000f3a:	bf18      	it	ne
 8000f3c:	4608      	movne	r0, r1
 8000f3e:	d108      	bne.n	8000f52 <__aeabi_fmul+0x15e>
 8000f40:	ea80 0001 	eor.w	r0, r0, r1
 8000f44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f50:	4770      	bx	lr
 8000f52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_fdiv>:
 8000f5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f64:	bf1e      	ittt	ne
 8000f66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f6a:	ea92 0f0c 	teqne	r2, ip
 8000f6e:	ea93 0f0c 	teqne	r3, ip
 8000f72:	d069      	beq.n	8001048 <__aeabi_fdiv+0xec>
 8000f74:	eba2 0203 	sub.w	r2, r2, r3
 8000f78:	ea80 0c01 	eor.w	ip, r0, r1
 8000f7c:	0249      	lsls	r1, r1, #9
 8000f7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f82:	d037      	beq.n	8000ff4 <__aeabi_fdiv+0x98>
 8000f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f94:	428b      	cmp	r3, r1
 8000f96:	bf38      	it	cc
 8000f98:	005b      	lslcc	r3, r3, #1
 8000f9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	bf24      	itt	cs
 8000fa6:	1a5b      	subcs	r3, r3, r1
 8000fa8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb0:	bf24      	itt	cs
 8000fb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fbe:	bf24      	itt	cs
 8000fc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fcc:	bf24      	itt	cs
 8000fce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	bf18      	it	ne
 8000fda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fde:	d1e0      	bne.n	8000fa2 <__aeabi_fdiv+0x46>
 8000fe0:	2afd      	cmp	r2, #253	; 0xfd
 8000fe2:	f63f af50 	bhi.w	8000e86 <__aeabi_fmul+0x92>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fec:	bf08      	it	eq
 8000fee:	f020 0001 	biceq.w	r0, r0, #1
 8000ff2:	4770      	bx	lr
 8000ff4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ff8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ffc:	327f      	adds	r2, #127	; 0x7f
 8000ffe:	bfc2      	ittt	gt
 8001000:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001004:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001008:	4770      	bxgt	lr
 800100a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	3a01      	subs	r2, #1
 8001014:	e737      	b.n	8000e86 <__aeabi_fmul+0x92>
 8001016:	f092 0f00 	teq	r2, #0
 800101a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800101e:	bf02      	ittt	eq
 8001020:	0040      	lsleq	r0, r0, #1
 8001022:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001026:	3a01      	subeq	r2, #1
 8001028:	d0f9      	beq.n	800101e <__aeabi_fdiv+0xc2>
 800102a:	ea40 000c 	orr.w	r0, r0, ip
 800102e:	f093 0f00 	teq	r3, #0
 8001032:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001036:	bf02      	ittt	eq
 8001038:	0049      	lsleq	r1, r1, #1
 800103a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800103e:	3b01      	subeq	r3, #1
 8001040:	d0f9      	beq.n	8001036 <__aeabi_fdiv+0xda>
 8001042:	ea41 010c 	orr.w	r1, r1, ip
 8001046:	e795      	b.n	8000f74 <__aeabi_fdiv+0x18>
 8001048:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800104c:	ea92 0f0c 	teq	r2, ip
 8001050:	d108      	bne.n	8001064 <__aeabi_fdiv+0x108>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	f47f af7d 	bne.w	8000f52 <__aeabi_fmul+0x15e>
 8001058:	ea93 0f0c 	teq	r3, ip
 800105c:	f47f af70 	bne.w	8000f40 <__aeabi_fmul+0x14c>
 8001060:	4608      	mov	r0, r1
 8001062:	e776      	b.n	8000f52 <__aeabi_fmul+0x15e>
 8001064:	ea93 0f0c 	teq	r3, ip
 8001068:	d104      	bne.n	8001074 <__aeabi_fdiv+0x118>
 800106a:	024b      	lsls	r3, r1, #9
 800106c:	f43f af4c 	beq.w	8000f08 <__aeabi_fmul+0x114>
 8001070:	4608      	mov	r0, r1
 8001072:	e76e      	b.n	8000f52 <__aeabi_fmul+0x15e>
 8001074:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001078:	bf18      	it	ne
 800107a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800107e:	d1ca      	bne.n	8001016 <__aeabi_fdiv+0xba>
 8001080:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001084:	f47f af5c 	bne.w	8000f40 <__aeabi_fmul+0x14c>
 8001088:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800108c:	f47f af3c 	bne.w	8000f08 <__aeabi_fmul+0x114>
 8001090:	e75f      	b.n	8000f52 <__aeabi_fmul+0x15e>
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f965 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f806 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f003 ff14 	bl	8004f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f97f 	bl	800141e <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001138:	f000 f947 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000008 	.word	0x20000008
 8001154:	20000004 	.word	0x20000004
 8001158:	20000000 	.word	0x20000000

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <HAL_IncTick+0x20>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000004 	.word	0x20000004
 800117c:	200000ac 	.word	0x200000ac

08001180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	; (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	200000ac 	.word	0x200000ac

08001194 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_SetTickFreq+0x3c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d00c      	beq.n	80011c6 <HAL_SetTickFreq+0x32>
  {
    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_SetTickFreq+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffa3 	bl	80010fc <HAL_InitTick>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <HAL_SetTickFreq+0x32>
    {
      uwTickFreq = Freq;
 80011c0:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <HAL_SetTickFreq+0x3c>)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000004 	.word	0x20000004
 80011d4:	20000000 	.word	0x20000000

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffce 	bl	8001180 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_Delay+0x40>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffbe 	bl	8001180 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000004 	.word	0x20000004

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4906      	ldr	r1, [pc, #24]	; (80012b4 <__NVIC_EnableIRQ+0x34>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001394:	f7ff ff90 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff2d 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff42 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff90 	bl	800130c <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5f 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff35 	bl	8001280 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b08b      	sub	sp, #44	; 0x2c
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e127      	b.n	800169c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800144c:	2201      	movs	r2, #1
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 8116 	bne.w	8001696 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b12      	cmp	r3, #18
 8001470:	d034      	beq.n	80014dc <HAL_GPIO_Init+0xa4>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d80d      	bhi.n	8001492 <HAL_GPIO_Init+0x5a>
 8001476:	2b02      	cmp	r3, #2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x9a>
 800147a:	2b02      	cmp	r3, #2
 800147c:	d804      	bhi.n	8001488 <HAL_GPIO_Init+0x50>
 800147e:	2b00      	cmp	r3, #0
 8001480:	d031      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 8001482:	2b01      	cmp	r3, #1
 8001484:	d01c      	beq.n	80014c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001486:	e048      	b.n	800151a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001488:	2b03      	cmp	r3, #3
 800148a:	d043      	beq.n	8001514 <HAL_GPIO_Init+0xdc>
 800148c:	2b11      	cmp	r3, #17
 800148e:	d01b      	beq.n	80014c8 <HAL_GPIO_Init+0x90>
          break;
 8001490:	e043      	b.n	800151a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001492:	4a89      	ldr	r2, [pc, #548]	; (80016b8 <HAL_GPIO_Init+0x280>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d026      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 8001498:	4a87      	ldr	r2, [pc, #540]	; (80016b8 <HAL_GPIO_Init+0x280>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d806      	bhi.n	80014ac <HAL_GPIO_Init+0x74>
 800149e:	4a87      	ldr	r2, [pc, #540]	; (80016bc <HAL_GPIO_Init+0x284>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d020      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 80014a4:	4a86      	ldr	r2, [pc, #536]	; (80016c0 <HAL_GPIO_Init+0x288>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01d      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
          break;
 80014aa:	e036      	b.n	800151a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ac:	4a85      	ldr	r2, [pc, #532]	; (80016c4 <HAL_GPIO_Init+0x28c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 80014b2:	4a85      	ldr	r2, [pc, #532]	; (80016c8 <HAL_GPIO_Init+0x290>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d016      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 80014b8:	4a84      	ldr	r2, [pc, #528]	; (80016cc <HAL_GPIO_Init+0x294>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
          break;
 80014be:	e02c      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	623b      	str	r3, [r7, #32]
          break;
 80014c6:	e028      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	3304      	adds	r3, #4
 80014ce:	623b      	str	r3, [r7, #32]
          break;
 80014d0:	e023      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	3308      	adds	r3, #8
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e01e      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	330c      	adds	r3, #12
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e019      	b.n	800151a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ee:	2304      	movs	r3, #4
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e012      	b.n	800151a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014fc:	2308      	movs	r3, #8
 80014fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	611a      	str	r2, [r3, #16]
          break;
 8001506:	e008      	b.n	800151a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	615a      	str	r2, [r3, #20]
          break;
 8001512:	e002      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2bff      	cmp	r3, #255	; 0xff
 800151e:	d801      	bhi.n	8001524 <HAL_GPIO_Init+0xec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	e001      	b.n	8001528 <HAL_GPIO_Init+0xf0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3304      	adds	r3, #4
 8001528:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2bff      	cmp	r3, #255	; 0xff
 800152e:	d802      	bhi.n	8001536 <HAL_GPIO_Init+0xfe>
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x104>
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	3b08      	subs	r3, #8
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	210f      	movs	r1, #15
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	6a39      	ldr	r1, [r7, #32]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	431a      	orrs	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8096 	beq.w	8001696 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800156a:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_GPIO_Init+0x298>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x298>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6193      	str	r3, [r2, #24]
 8001576:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <HAL_GPIO_Init+0x298>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001582:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <HAL_GPIO_Init+0x29c>)
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_GPIO_Init+0x2a0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x19e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_GPIO_Init+0x2a4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x19a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x2a8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x196>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2ac>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x192>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x1a0>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x1a0>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x1a0>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x1a0>
 80015d6:	2300      	movs	r3, #0
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	f002 0203 	and.w	r2, r2, #3
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e8:	493a      	ldr	r1, [pc, #232]	; (80016d4 <HAL_GPIO_Init+0x29c>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4938      	ldr	r1, [pc, #224]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001610:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	43db      	mvns	r3, r3
 8001618:	4933      	ldr	r1, [pc, #204]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800161a:	4013      	ands	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	492e      	ldr	r1, [pc, #184]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4929      	ldr	r1, [pc, #164]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001642:	4013      	ands	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	4924      	ldr	r1, [pc, #144]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	491f      	ldr	r1, [pc, #124]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800166a:	4013      	ands	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	491a      	ldr	r1, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	60cb      	str	r3, [r1, #12]
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	4915      	ldr	r1, [pc, #84]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001692:	4013      	ands	r3, r2
 8001694:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f aed0 	bne.w	800144c <HAL_GPIO_Init+0x14>
  }
}
 80016ac:	bf00      	nop
 80016ae:	372c      	adds	r7, #44	; 0x2c
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	10210000 	.word	0x10210000
 80016bc:	10110000 	.word	0x10110000
 80016c0:	10120000 	.word	0x10120000
 80016c4:	10310000 	.word	0x10310000
 80016c8:	10320000 	.word	0x10320000
 80016cc:	10220000 	.word	0x10220000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40011400 	.word	0x40011400
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	611a      	str	r2, [r3, #16]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e10f      	b.n	800194e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f003 fc1c 	bl	8004f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001760:	f001 f94e 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8001764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a7b      	ldr	r2, [pc, #492]	; (8001958 <HAL_I2C_Init+0x23c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d807      	bhi.n	8001780 <HAL_I2C_Init+0x64>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a7a      	ldr	r2, [pc, #488]	; (800195c <HAL_I2C_Init+0x240>)
 8001774:	4293      	cmp	r3, r2
 8001776:	bf94      	ite	ls
 8001778:	2301      	movls	r3, #1
 800177a:	2300      	movhi	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e006      	b.n	800178e <HAL_I2C_Init+0x72>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a77      	ldr	r2, [pc, #476]	; (8001960 <HAL_I2C_Init+0x244>)
 8001784:	4293      	cmp	r3, r2
 8001786:	bf94      	ite	ls
 8001788:	2301      	movls	r3, #1
 800178a:	2300      	movhi	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0db      	b.n	800194e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4a72      	ldr	r2, [pc, #456]	; (8001964 <HAL_I2C_Init+0x248>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9b      	lsrs	r3, r3, #18
 80017a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a64      	ldr	r2, [pc, #400]	; (8001958 <HAL_I2C_Init+0x23c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d802      	bhi.n	80017d0 <HAL_I2C_Init+0xb4>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3301      	adds	r3, #1
 80017ce:	e009      	b.n	80017e4 <HAL_I2C_Init+0xc8>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	4a63      	ldr	r2, [pc, #396]	; (8001968 <HAL_I2C_Init+0x24c>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	3301      	adds	r3, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4956      	ldr	r1, [pc, #344]	; (8001958 <HAL_I2C_Init+0x23c>)
 8001800:	428b      	cmp	r3, r1
 8001802:	d80d      	bhi.n	8001820 <HAL_I2C_Init+0x104>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e59      	subs	r1, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001812:	3301      	adds	r3, #1
 8001814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	bf38      	it	cc
 800181c:	2304      	movcc	r3, #4
 800181e:	e04f      	b.n	80018c0 <HAL_I2C_Init+0x1a4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d111      	bne.n	800184c <HAL_I2C_Init+0x130>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1e58      	subs	r0, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	440b      	add	r3, r1
 8001836:	fbb0 f3f3 	udiv	r3, r0, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	e012      	b.n	8001872 <HAL_I2C_Init+0x156>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1e58      	subs	r0, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	0099      	lsls	r1, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001862:	3301      	adds	r3, #1
 8001864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Init+0x15e>
 8001876:	2301      	movs	r3, #1
 8001878:	e022      	b.n	80018c0 <HAL_I2C_Init+0x1a4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10e      	bne.n	80018a0 <HAL_I2C_Init+0x184>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1e58      	subs	r0, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	440b      	add	r3, r1
 8001890:	fbb0 f3f3 	udiv	r3, r0, r3
 8001894:	3301      	adds	r3, #1
 8001896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189e:	e00f      	b.n	80018c0 <HAL_I2C_Init+0x1a4>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1e58      	subs	r0, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	0099      	lsls	r1, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	6809      	ldr	r1, [r1, #0]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6911      	ldr	r1, [r2, #16]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68d2      	ldr	r2, [r2, #12]
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	430b      	orrs	r3, r1
 8001902:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	000186a0 	.word	0x000186a0
 800195c:	001e847f 	.word	0x001e847f
 8001960:	003d08ff 	.word	0x003d08ff
 8001964:	431bde83 	.word	0x431bde83
 8001968:	10624dd3 	.word	0x10624dd3

0800196c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	460b      	mov	r3, r1
 8001980:	813b      	strh	r3, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001986:	f7ff fbfb 	bl	8001180 <HAL_GetTick>
 800198a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b20      	cmp	r3, #32
 8001996:	f040 8218 	bne.w	8001dca <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2319      	movs	r3, #25
 80019a0:	2201      	movs	r2, #1
 80019a2:	4981      	ldr	r1, [pc, #516]	; (8001ba8 <HAL_I2C_Mem_Read+0x23c>)
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fae7 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019b0:	2302      	movs	r3, #2
 80019b2:	e20b      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Mem_Read+0x56>
 80019be:	2302      	movs	r3, #2
 80019c0:	e204      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d007      	beq.n	80019e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2222      	movs	r2, #34	; 0x22
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4a61      	ldr	r2, [pc, #388]	; (8001bac <HAL_I2C_Mem_Read+0x240>)
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a2a:	88f8      	ldrh	r0, [r7, #6]
 8001a2c:	893a      	ldrh	r2, [r7, #8]
 8001a2e:	8979      	ldrh	r1, [r7, #10]
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4603      	mov	r3, r0
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f9cc 	bl	8001dd8 <I2C_RequestMemoryRead>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e1c0      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d113      	bne.n	8001a7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	623b      	str	r3, [r7, #32]
 8001a66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e194      	b.n	8001da4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d11d      	bne.n	8001abe <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a90:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a92:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001aba:	b662      	cpsie	i
 8001abc:	e172      	b.n	8001da4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d11d      	bne.n	8001b02 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001afe:	b662      	cpsie	i
 8001b00:	e150      	b.n	8001da4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b10:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b28:	e13c      	b.n	8001da4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	f200 80f5 	bhi.w	8001d1e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d123      	bne.n	8001b84 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 fb30 	bl	80021a6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e13d      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b82:	e10f      	b.n	8001da4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d150      	bne.n	8001c2e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b92:	2200      	movs	r2, #0
 8001b94:	4906      	ldr	r1, [pc, #24]	; (8001bb0 <HAL_I2C_Mem_Read+0x244>)
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f9ee 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e112      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
 8001ba6:	bf00      	nop
 8001ba8:	00100002 	.word	0x00100002
 8001bac:	ffff0000 	.word	0xffff0000
 8001bb0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bf8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c2c:	e0ba      	b.n	8001da4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c34:	2200      	movs	r2, #0
 8001c36:	4967      	ldr	r1, [pc, #412]	; (8001dd4 <HAL_I2C_Mem_Read+0x468>)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f99d 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0c1      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c92:	2200      	movs	r2, #0
 8001c94:	494f      	ldr	r1, [pc, #316]	; (8001dd4 <HAL_I2C_Mem_Read+0x468>)
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f96e 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e092      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ce8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d1c:	e042      	b.n	8001da4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fa3f 	bl	80021a6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e04c      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d118      	bne.n	8001da4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f aebe 	bne.w	8001b2a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8001dca:	2302      	movs	r3, #2
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	00010004 	.word	0x00010004

08001dd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	817b      	strh	r3, [r7, #10]
 8001dea:	460b      	mov	r3, r1
 8001dec:	813b      	strh	r3, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f8aa 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e09e      	b.n	8001f6c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	6a3a      	ldr	r2, [r7, #32]
 8001e42:	494c      	ldr	r1, [pc, #304]	; (8001f74 <I2C_RequestMemoryRead+0x19c>)
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f8ee 	bl	8002026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e08b      	b.n	8001f6c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6c:	6a39      	ldr	r1, [r7, #32]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f958 	bl	8002124 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00d      	beq.n	8001e96 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d107      	bne.n	8001e92 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06a      	b.n	8001f6c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	611a      	str	r2, [r3, #16]
 8001ea6:	e021      	b.n	8001eec <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb8:	6a39      	ldr	r1, [r7, #32]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f932 	bl	8002124 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d107      	bne.n	8001ede <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001edc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e044      	b.n	8001f6c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee2:	893b      	ldrh	r3, [r7, #8]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	6a39      	ldr	r1, [r7, #32]
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f917 	bl	8002124 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d107      	bne.n	8001f14 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e029      	b.n	8001f6c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f81f 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e013      	b.n	8001f6c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f44:	897b      	ldrh	r3, [r7, #10]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	6a3a      	ldr	r2, [r7, #32]
 8001f58:	4906      	ldr	r1, [pc, #24]	; (8001f74 <I2C_RequestMemoryRead+0x19c>)
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f863 	bl	8002026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	00010002 	.word	0x00010002

08001f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f88:	e025      	b.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f90:	d021      	beq.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f92:	f7ff f8f5 	bl	8001180 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d116      	bne.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f043 0220 	orr.w	r2, r3, #32
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e023      	b.n	800201e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10d      	bne.n	8001ffc <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	e00c      	b.n	8002016 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4013      	ands	r3, r2
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	429a      	cmp	r2, r3
 800201a:	d0b6      	beq.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002034:	e051      	b.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002044:	d123      	bne.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002054:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800205e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0204 	orr.w	r2, r3, #4
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e046      	b.n	800211c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002094:	d021      	beq.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7ff f873 	bl	8001180 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d116      	bne.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f043 0220 	orr.w	r2, r3, #32
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e020      	b.n	800211c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10c      	bne.n	80020fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4013      	ands	r3, r2
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf14      	ite	ne
 80020f6:	2301      	movne	r3, #1
 80020f8:	2300      	moveq	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	e00b      	b.n	8002116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	43da      	mvns	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4013      	ands	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d18d      	bne.n	8002036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002130:	e02d      	b.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f88d 	bl	8002252 <I2C_IsAcknowledgeFailed>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e02d      	b.n	800219e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002148:	d021      	beq.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff f819 	bl	8001180 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d116      	bne.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e007      	b.n	800219e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002198:	2b80      	cmp	r3, #128	; 0x80
 800219a:	d1ca      	bne.n	8002132 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021b2:	e042      	b.n	800223a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d119      	bne.n	80021f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f06f 0210 	mvn.w	r2, #16
 80021ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e029      	b.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f6:	f7fe ffc3 	bl	8001180 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	d302      	bcc.n	800220c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d116      	bne.n	800223a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e007      	b.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	d1b5      	bne.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002268:	d11b      	bne.n	80022a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002272:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0204 	orr.w	r2, r3, #4
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
	...

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e26c      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8087 	beq.w	80023de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d0:	4b92      	ldr	r3, [pc, #584]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d00c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022dc:	4b8f      	ldr	r3, [pc, #572]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d112      	bne.n	800230e <HAL_RCC_OscConfig+0x5e>
 80022e8:	4b8c      	ldr	r3, [pc, #560]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d10b      	bne.n	800230e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f6:	4b89      	ldr	r3, [pc, #548]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d06c      	beq.n	80023dc <HAL_RCC_OscConfig+0x12c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d168      	bne.n	80023dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e246      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x76>
 8002318:	4b80      	ldr	r3, [pc, #512]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a7f      	ldr	r2, [pc, #508]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e02e      	b.n	8002384 <HAL_RCC_OscConfig+0xd4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x98>
 800232e:	4b7b      	ldr	r3, [pc, #492]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7a      	ldr	r2, [pc, #488]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b78      	ldr	r3, [pc, #480]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a77      	ldr	r2, [pc, #476]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xd4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0xbc>
 8002352:	4b72      	ldr	r3, [pc, #456]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a71      	ldr	r2, [pc, #452]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b6f      	ldr	r3, [pc, #444]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6e      	ldr	r2, [pc, #440]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xd4>
 800236c:	4b6b      	ldr	r3, [pc, #428]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a6a      	ldr	r2, [pc, #424]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a67      	ldr	r2, [pc, #412]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002382:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fef8 	bl	8001180 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fef4 	bl	8001180 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1fa      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xe4>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fee4 	bl	8001180 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fee0 	bl	8001180 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1e6      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x10c>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d063      	beq.n	80024b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ea:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023f6:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x18c>
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b43      	ldr	r3, [pc, #268]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x176>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1ba      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4939      	ldr	r1, [pc, #228]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e03a      	b.n	80024b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b36      	ldr	r3, [pc, #216]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fe99 	bl	8001180 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe fe95 	bl	8001180 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e19b      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4927      	ldr	r1, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fe78 	bl	8001180 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002494:	f7fe fe74 	bl	8001180 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e17a      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d03a      	beq.n	8002534 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d019      	beq.n	80024fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_RCC_OscConfig+0x274>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fe58 	bl	8001180 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe fe54 	bl	8001180 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e15a      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f000 faac 	bl	8002a50 <RCC_Delay>
 80024f8:	e01c      	b.n	8002534 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_RCC_OscConfig+0x274>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002500:	f7fe fe3e 	bl	8001180 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002506:	e00f      	b.n	8002528 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002508:	f7fe fe3a 	bl	8001180 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d908      	bls.n	8002528 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e140      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	42420000 	.word	0x42420000
 8002524:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b9e      	ldr	r3, [pc, #632]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e9      	bne.n	8002508 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a6 	beq.w	800268e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b97      	ldr	r3, [pc, #604]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10d      	bne.n	800256e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a93      	ldr	r2, [pc, #588]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	61d3      	str	r3, [r2, #28]
 800255e:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	4b8e      	ldr	r3, [pc, #568]	; (80027a8 <HAL_RCC_OscConfig+0x4f8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d118      	bne.n	80025ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257a:	4b8b      	ldr	r3, [pc, #556]	; (80027a8 <HAL_RCC_OscConfig+0x4f8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a8a      	ldr	r2, [pc, #552]	; (80027a8 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7fe fdfb 	bl	8001180 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7fe fdf7 	bl	8001180 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b64      	cmp	r3, #100	; 0x64
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0fd      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <HAL_RCC_OscConfig+0x4f8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x312>
 80025b4:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a7a      	ldr	r2, [pc, #488]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	e02d      	b.n	800261e <HAL_RCC_OscConfig+0x36e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x334>
 80025ca:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4a75      	ldr	r2, [pc, #468]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6213      	str	r3, [r2, #32]
 80025d6:	4b73      	ldr	r3, [pc, #460]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a72      	ldr	r2, [pc, #456]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	6213      	str	r3, [r2, #32]
 80025e2:	e01c      	b.n	800261e <HAL_RCC_OscConfig+0x36e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d10c      	bne.n	8002606 <HAL_RCC_OscConfig+0x356>
 80025ec:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4a6c      	ldr	r2, [pc, #432]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6213      	str	r3, [r2, #32]
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a69      	ldr	r2, [pc, #420]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	e00b      	b.n	800261e <HAL_RCC_OscConfig+0x36e>
 8002606:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4a66      	ldr	r2, [pc, #408]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	6213      	str	r3, [r2, #32]
 8002612:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a63      	ldr	r2, [pc, #396]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d015      	beq.n	8002652 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7fe fdab 	bl	8001180 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fda7 	bl	8001180 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0ab      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	4b57      	ldr	r3, [pc, #348]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ee      	beq.n	800262e <HAL_RCC_OscConfig+0x37e>
 8002650:	e014      	b.n	800267c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7fe fd95 	bl	8001180 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fd91 	bl	8001180 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e095      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002670:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ee      	bne.n	800265a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d105      	bne.n	800268e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002682:	4b48      	ldr	r3, [pc, #288]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8081 	beq.w	800279a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002698:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d061      	beq.n	8002768 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d146      	bne.n	800273a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_OscConfig+0x4fc>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fd65 	bl	8001180 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe fd61 	bl	8001180 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e067      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026cc:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e0:	d108      	bne.n	80026f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026e2:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f023 020f 	bic.w	r2, r3, #15
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	492d      	ldr	r1, [pc, #180]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a19      	ldr	r1, [r3, #32]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	430b      	orrs	r3, r1
 8002706:	4927      	ldr	r1, [pc, #156]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_OscConfig+0x4fc>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fd35 	bl	8001180 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7fe fd31 	bl	8001180 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e037      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x46a>
 8002738:	e02f      	b.n	800279a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <HAL_RCC_OscConfig+0x4fc>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fd1e 	bl	8001180 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fd1a 	bl	8001180 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e020      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x498>
 8002766:	e018      	b.n	800279a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e013      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	429a      	cmp	r2, r3
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40007000 	.word	0x40007000
 80027ac:	42420060 	.word	0x42420060

080027b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0a0      	b.n	8002906 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80027e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b46      	ldr	r3, [pc, #280]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a45      	ldr	r2, [pc, #276]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80027fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4940      	ldr	r1, [pc, #256]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d040      	beq.n	80028a0 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d115      	bne.n	800285e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e067      	b.n	8002906 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b34      	ldr	r3, [pc, #208]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e05b      	b.n	8002906 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e053      	b.n	8002906 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4929      	ldr	r1, [pc, #164]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fc86 	bl	8001180 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fc82 	bl	8001180 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e03b      	b.n	8002906 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4915      	ldr	r1, [pc, #84]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	490d      	ldr	r1, [pc, #52]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028de:	f000 f81f 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028e2:	4601      	mov	r1, r0
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_RCC_ClockConfig+0x160>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x164>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	fa21 f303 	lsr.w	r3, r1, r3
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_RCC_ClockConfig+0x168>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_RCC_ClockConfig+0x16c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fbfc 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	08005b60 	.word	0x08005b60
 8002918:	20000008 	.word	0x20000008
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b490      	push	{r4, r7}
 8002922:	b08e      	sub	sp, #56	; 0x38
 8002924:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002928:	f107 0414 	add.w	r4, r7, #20
 800292c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800292e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002932:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002934:	1d3c      	adds	r4, r7, #4
 8002936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002940:	2300      	movs	r3, #0
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
 8002944:	2300      	movs	r3, #0
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b04      	cmp	r3, #4
 800295e:	d002      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x46>
 8002960:	2b08      	cmp	r3, #8
 8002962:	d003      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x4c>
 8002964:	e02c      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800296a:	e02c      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	0c9b      	lsrs	r3, r3, #18
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002978:	4413      	add	r3, r2
 800297a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002996:	4413      	add	r3, r2
 8002998:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	4a0f      	ldr	r2, [pc, #60]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a2:	fb02 f203 	mul.w	r2, r2, r3
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
 80029ae:	e004      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029be:	e002      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3738      	adds	r7, #56	; 0x38
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc90      	pop	{r4, r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	08005b40 	.word	0x08005b40
 80029d8:	08005b50 	.word	0x08005b50
 80029dc:	40021000 	.word	0x40021000
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	003d0900 	.word	0x003d0900
 80029e8:	007a1200 	.word	0x007a1200

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <HAL_RCC_GetHCLKFreq+0x10>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000008 	.word	0x20000008

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff2 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a08:	4601      	mov	r1, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08005b70 	.word	0x08005b70

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a30:	4601      	mov	r1, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0adb      	lsrs	r3, r3, #11
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08005b70 	.word	0x08005b70

08002a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <RCC_Delay+0x34>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <RCC_Delay+0x38>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0a5b      	lsrs	r3, r3, #9
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a6c:	bf00      	nop
  }
  while (Delay --);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	60fa      	str	r2, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f9      	bne.n	8002a6c <RCC_Delay+0x1c>
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000008 	.word	0x20000008
 8002a88:	10624dd3 	.word	0x10624dd3

08002a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e01d      	b.n	8002ada <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f002 faa2 	bl	8004ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f000 fb94 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d007      	beq.n	8002b1c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01d      	b.n	8002b76 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f002 facc 	bl	80050ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 fb46 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	d841      	bhi.n	8002c14 <HAL_TIM_PWM_Start_IT+0x94>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <HAL_TIM_PWM_Start_IT+0x18>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bcd 	.word	0x08002bcd
 8002b9c:	08002c15 	.word	0x08002c15
 8002ba0:	08002c15 	.word	0x08002c15
 8002ba4:	08002c15 	.word	0x08002c15
 8002ba8:	08002bdf 	.word	0x08002bdf
 8002bac:	08002c15 	.word	0x08002c15
 8002bb0:	08002c15 	.word	0x08002c15
 8002bb4:	08002c15 	.word	0x08002c15
 8002bb8:	08002bf1 	.word	0x08002bf1
 8002bbc:	08002c15 	.word	0x08002c15
 8002bc0:	08002c15 	.word	0x08002c15
 8002bc4:	08002c15 	.word	0x08002c15
 8002bc8:	08002c03 	.word	0x08002c03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0202 	orr.w	r2, r2, #2
 8002bda:	60da      	str	r2, [r3, #12]
      break;
 8002bdc:	e01b      	b.n	8002c16 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0204 	orr.w	r2, r2, #4
 8002bec:	60da      	str	r2, [r3, #12]
      break;
 8002bee:	e012      	b.n	8002c16 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0208 	orr.w	r2, r2, #8
 8002bfe:	60da      	str	r2, [r3, #12]
      break;
 8002c00:	e009      	b.n	8002c16 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0210 	orr.w	r2, r2, #16
 8002c10:	60da      	str	r2, [r3, #12]
      break;
 8002c12:	e000      	b.n	8002c16 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002c14:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fddc 	bl	80037dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <HAL_TIM_PWM_Start_IT+0x114>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_TIM_PWM_Start_IT+0xcc>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_TIM_PWM_Start_IT+0x118>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_TIM_PWM_Start_IT+0xcc>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_TIM_PWM_Start_IT+0x11c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_TIM_PWM_Start_IT+0xcc>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <HAL_TIM_PWM_Start_IT+0x120>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIM_PWM_Start_IT+0xd0>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_TIM_PWM_Start_IT+0xd2>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_TIM_PWM_Start_IT+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d007      	beq.n	8002c88 <HAL_TIM_PWM_Start_IT+0x108>
  {
    __HAL_TIM_ENABLE(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40014000 	.word	0x40014000
 8002c9c:	40014400 	.word	0x40014400
 8002ca0:	40014800 	.word	0x40014800

08002ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0202 	mvn.w	r2, #2
 8002cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa6a 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa5d 	bl	80031ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa6c 	bl	80031d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0204 	mvn.w	r2, #4
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa40 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa33 	bl	80031ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa42 	bl	80031d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d122      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d11b      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0208 	mvn.w	r2, #8
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa16 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa09 	bl	80031ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa18 	bl	80031d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d122      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d11b      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0210 	mvn.w	r2, #16
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9ec 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9df 	bl	80031ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9ee 	bl	80031d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0201 	mvn.w	r2, #1
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f001 fc10 	bl	8004648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fd35 	bl	80038be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f9b2 	bl	80031e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0220 	mvn.w	r2, #32
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fd00 	bl	80038ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0b4      	b.n	8003038 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	f200 809f 	bhi.w	8003024 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08003025 	.word	0x08003025
 8002ef4:	08003025 	.word	0x08003025
 8002ef8:	08003025 	.word	0x08003025
 8002efc:	08002f61 	.word	0x08002f61
 8002f00:	08003025 	.word	0x08003025
 8002f04:	08003025 	.word	0x08003025
 8002f08:	08003025 	.word	0x08003025
 8002f0c:	08002fa3 	.word	0x08002fa3
 8002f10:	08003025 	.word	0x08003025
 8002f14:	08003025 	.word	0x08003025
 8002f18:	08003025 	.word	0x08003025
 8002f1c:	08002fe3 	.word	0x08002fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f9e6 	bl	80032f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	619a      	str	r2, [r3, #24]
      break;
 8002f5e:	e062      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa4a 	bl	8003400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6999      	ldr	r1, [r3, #24]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	619a      	str	r2, [r3, #24]
      break;
 8002fa0:	e041      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 faa5 	bl	80034f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0208 	orr.w	r2, r2, #8
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0204 	bic.w	r2, r2, #4
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	61da      	str	r2, [r3, #28]
      break;
 8002fe0:	e021      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fb01 	bl	80035f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	61da      	str	r2, [r3, #28]
      break;
 8003022:	e000      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003024:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIM_ConfigClockSource+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e0a6      	b.n	80031a6 <HAL_TIM_ConfigClockSource+0x166>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003076:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d067      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x120>
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d80b      	bhi.n	80030ac <HAL_TIM_ConfigClockSource+0x6c>
 8003094:	2b10      	cmp	r3, #16
 8003096:	d073      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x140>
 8003098:	2b10      	cmp	r3, #16
 800309a:	d802      	bhi.n	80030a2 <HAL_TIM_ConfigClockSource+0x62>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d06f      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80030a0:	e078      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d06c      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x140>
 80030a6:	2b30      	cmp	r3, #48	; 0x30
 80030a8:	d06a      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030aa:	e073      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030ac:	2b70      	cmp	r3, #112	; 0x70
 80030ae:	d00d      	beq.n	80030cc <HAL_TIM_ConfigClockSource+0x8c>
 80030b0:	2b70      	cmp	r3, #112	; 0x70
 80030b2:	d804      	bhi.n	80030be <HAL_TIM_ConfigClockSource+0x7e>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d033      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0xe0>
 80030b8:	2b60      	cmp	r3, #96	; 0x60
 80030ba:	d041      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030bc:	e06a      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c2:	d066      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x152>
 80030c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c8:	d017      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030ca:	e063      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f000 fb5f 	bl	800379e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]
      break;
 80030f8:	e04c      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6899      	ldr	r1, [r3, #8]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f000 fb48 	bl	800379e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311c:	609a      	str	r2, [r3, #8]
      break;
 800311e:	e039      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 fabf 	bl	80036b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2150      	movs	r1, #80	; 0x50
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fb16 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 800313e:	e029      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	461a      	mov	r2, r3
 800314e:	f000 fadd 	bl	800370c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2160      	movs	r1, #96	; 0x60
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fb06 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 800315e:	e019      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	461a      	mov	r2, r3
 800316e:	f000 fa9f 	bl	80036b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	4618      	mov	r0, r3
 800317a:	f000 faf6 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 800317e:	e009      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 faed 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 8003190:	e000      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
	...

080031f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a35      	ldr	r2, [pc, #212]	; (80032e0 <TIM_Base_SetConfig+0xe8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00b      	beq.n	8003228 <TIM_Base_SetConfig+0x30>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003216:	d007      	beq.n	8003228 <TIM_Base_SetConfig+0x30>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a32      	ldr	r2, [pc, #200]	; (80032e4 <TIM_Base_SetConfig+0xec>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_Base_SetConfig+0x30>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <TIM_Base_SetConfig+0xf0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d108      	bne.n	800323a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <TIM_Base_SetConfig+0xe8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d017      	beq.n	8003272 <TIM_Base_SetConfig+0x7a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d013      	beq.n	8003272 <TIM_Base_SetConfig+0x7a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <TIM_Base_SetConfig+0xec>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00f      	beq.n	8003272 <TIM_Base_SetConfig+0x7a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <TIM_Base_SetConfig+0xf0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_Base_SetConfig+0x7a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <TIM_Base_SetConfig+0xf4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0x7a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <TIM_Base_SetConfig+0xf8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0x7a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <TIM_Base_SetConfig+0xfc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <TIM_Base_SetConfig+0xe8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0xd0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <TIM_Base_SetConfig+0xf4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0xd0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <TIM_Base_SetConfig+0xf8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0xd0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <TIM_Base_SetConfig+0xfc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d103      	bne.n	80032d0 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	615a      	str	r2, [r3, #20]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800

080032f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 0302 	bic.w	r3, r3, #2
 8003340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <TIM_OC1_SetConfig+0xf8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_OC1_SetConfig+0x74>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <TIM_OC1_SetConfig+0xfc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_OC1_SetConfig+0x74>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <TIM_OC1_SetConfig+0x100>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_OC1_SetConfig+0x74>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a25      	ldr	r2, [pc, #148]	; (80033fc <TIM_OC1_SetConfig+0x104>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10c      	bne.n	8003386 <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0308 	bic.w	r3, r3, #8
 8003372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <TIM_OC1_SetConfig+0xf8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00b      	beq.n	80033a6 <TIM_OC1_SetConfig+0xae>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <TIM_OC1_SetConfig+0xfc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <TIM_OC1_SetConfig+0xae>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <TIM_OC1_SetConfig+0x100>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_OC1_SetConfig+0xae>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a16      	ldr	r2, [pc, #88]	; (80033fc <TIM_OC1_SetConfig+0x104>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d111      	bne.n	80033ca <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800

08003400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0210 	bic.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0320 	bic.w	r3, r3, #32
 800344a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <TIM_OC2_SetConfig+0xe8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d10d      	bne.n	800347c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <TIM_OC2_SetConfig+0xe8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00b      	beq.n	800349c <TIM_OC2_SetConfig+0x9c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a19      	ldr	r2, [pc, #100]	; (80034ec <TIM_OC2_SetConfig+0xec>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <TIM_OC2_SetConfig+0x9c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <TIM_OC2_SetConfig+0xf0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_OC2_SetConfig+0x9c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <TIM_OC2_SetConfig+0xf4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d113      	bne.n	80034c4 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40014000 	.word	0x40014000
 80034f0:	40014400 	.word	0x40014400
 80034f4:	40014800 	.word	0x40014800

080034f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <TIM_OC3_SetConfig+0xe8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10d      	bne.n	8003572 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <TIM_OC3_SetConfig+0xe8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00b      	beq.n	8003592 <TIM_OC3_SetConfig+0x9a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a19      	ldr	r2, [pc, #100]	; (80035e4 <TIM_OC3_SetConfig+0xec>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <TIM_OC3_SetConfig+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <TIM_OC3_SetConfig+0xf0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d003      	beq.n	8003592 <TIM_OC3_SetConfig+0x9a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <TIM_OC3_SetConfig+0xf4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d113      	bne.n	80035ba <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800

080035f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <TIM_OC4_SetConfig+0xb0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00b      	beq.n	8003668 <TIM_OC4_SetConfig+0x78>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <TIM_OC4_SetConfig+0xb4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <TIM_OC4_SetConfig+0x78>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <TIM_OC4_SetConfig+0xb8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_OC4_SetConfig+0x78>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <TIM_OC4_SetConfig+0xbc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d109      	bne.n	800367c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800

080036b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 030a 	bic.w	r3, r3, #10
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f023 0210 	bic.w	r2, r3, #16
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	031b      	lsls	r3, r3, #12
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	621a      	str	r2, [r3, #32]
}
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	f043 0307 	orr.w	r3, r3, #7
 800378c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800379e:	b480      	push	{r7}
 80037a0:	b087      	sub	sp, #28
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	021a      	lsls	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	609a      	str	r2, [r3, #8]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2201      	movs	r2, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003838:	2302      	movs	r3, #2
 800383a:	e032      	b.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003874:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	4313      	orrs	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e03f      	b.n	8003962 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f001 fc6a 	bl	80051d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2224      	movs	r2, #36	; 0x24
 8003900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f829 	bl	800396c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039ac:	f023 030c 	bic.w	r3, r3, #12
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	430b      	orrs	r3, r1
 80039b8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d8:	f040 80a5 	bne.w	8003b26 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4aa4      	ldr	r2, [pc, #656]	; (8003c74 <UART_SetConfig+0x308>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d14f      	bne.n	8003a86 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e6:	f7ff f81f 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 80039ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a02:	4a9d      	ldr	r2, [pc, #628]	; (8003c78 <UART_SetConfig+0x30c>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	0119      	lsls	r1, r3, #4
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009a      	lsls	r2, r3, #2
 8003a16:	441a      	add	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a22:	4b95      	ldr	r3, [pc, #596]	; (8003c78 <UART_SetConfig+0x30c>)
 8003a24:	fba3 0302 	umull	r0, r3, r3, r2
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	2064      	movs	r0, #100	; 0x64
 8003a2c:	fb00 f303 	mul.w	r3, r0, r3
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	3332      	adds	r3, #50	; 0x32
 8003a36:	4a90      	ldr	r2, [pc, #576]	; (8003c78 <UART_SetConfig+0x30c>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a44:	4419      	add	r1, r3
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009a      	lsls	r2, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a5c:	4b86      	ldr	r3, [pc, #536]	; (8003c78 <UART_SetConfig+0x30c>)
 8003a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2064      	movs	r0, #100	; 0x64
 8003a66:	fb00 f303 	mul.w	r3, r0, r3
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	3332      	adds	r3, #50	; 0x32
 8003a70:	4a81      	ldr	r2, [pc, #516]	; (8003c78 <UART_SetConfig+0x30c>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	f003 0207 	and.w	r2, r3, #7
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	440a      	add	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003a84:	e0f1      	b.n	8003c6a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a86:	f7fe ffbb 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003a8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	441a      	add	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4a75      	ldr	r2, [pc, #468]	; (8003c78 <UART_SetConfig+0x30c>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	0119      	lsls	r1, r3, #4
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009a      	lsls	r2, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	; (8003c78 <UART_SetConfig+0x30c>)
 8003ac4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2064      	movs	r0, #100	; 0x64
 8003acc:	fb00 f303 	mul.w	r3, r0, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	3332      	adds	r3, #50	; 0x32
 8003ad6:	4a68      	ldr	r2, [pc, #416]	; (8003c78 <UART_SetConfig+0x30c>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae4:	4419      	add	r1, r3
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009a      	lsls	r2, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003afc:	4b5e      	ldr	r3, [pc, #376]	; (8003c78 <UART_SetConfig+0x30c>)
 8003afe:	fba3 0302 	umull	r0, r3, r3, r2
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2064      	movs	r0, #100	; 0x64
 8003b06:	fb00 f303 	mul.w	r3, r0, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	3332      	adds	r3, #50	; 0x32
 8003b10:	4a59      	ldr	r2, [pc, #356]	; (8003c78 <UART_SetConfig+0x30c>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	f003 0207 	and.w	r2, r3, #7
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	440a      	add	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	e0a1      	b.n	8003c6a <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a52      	ldr	r2, [pc, #328]	; (8003c74 <UART_SetConfig+0x308>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d14e      	bne.n	8003bce <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b30:	f7fe ff7a 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8003b34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009a      	lsls	r2, r3, #2
 8003b40:	441a      	add	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	4a4a      	ldr	r2, [pc, #296]	; (8003c78 <UART_SetConfig+0x30c>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	0119      	lsls	r1, r3, #4
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009a      	lsls	r2, r3, #2
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6c:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <UART_SetConfig+0x30c>)
 8003b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2064      	movs	r0, #100	; 0x64
 8003b76:	fb00 f303 	mul.w	r3, r0, r3
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	3332      	adds	r3, #50	; 0x32
 8003b80:	4a3d      	ldr	r2, [pc, #244]	; (8003c78 <UART_SetConfig+0x30c>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b8c:	4419      	add	r1, r3
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009a      	lsls	r2, r3, #2
 8003b98:	441a      	add	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba4:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <UART_SetConfig+0x30c>)
 8003ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	fb00 f303 	mul.w	r3, r0, r3
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	3332      	adds	r3, #50	; 0x32
 8003bb8:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <UART_SetConfig+0x30c>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	440a      	add	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	e04d      	b.n	8003c6a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bce:	f7fe ff17 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8003bd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009a      	lsls	r2, r3, #2
 8003bde:	441a      	add	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <UART_SetConfig+0x30c>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	0119      	lsls	r1, r3, #4
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009a      	lsls	r2, r3, #2
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <UART_SetConfig+0x30c>)
 8003c0c:	fba3 0302 	umull	r0, r3, r3, r2
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	2064      	movs	r0, #100	; 0x64
 8003c14:	fb00 f303 	mul.w	r3, r0, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	3332      	adds	r3, #50	; 0x32
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <UART_SetConfig+0x30c>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c2a:	4419      	add	r1, r3
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009a      	lsls	r2, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c42:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <UART_SetConfig+0x30c>)
 8003c44:	fba3 0302 	umull	r0, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2064      	movs	r0, #100	; 0x64
 8003c4c:	fb00 f303 	mul.w	r3, r0, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	3332      	adds	r3, #50	; 0x32
 8003c56:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <UART_SetConfig+0x30c>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	440a      	add	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40013800 	.word	0x40013800
 8003c78:	51eb851f 	.word	0x51eb851f

08003c7c <kalmanInit>:
 *  Created on: 13.11.2018
 *      Author: user
 */
#include "Kalman.h"

void kalmanInit(){
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
/*Variables used to adjust filter*/


	Q_angle = 0.0005f;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <kalmanInit+0x4c>)
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <kalmanInit+0x50>)
 8003c84:	601a      	str	r2, [r3, #0]
	Q_bias = 0.0005f;
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <kalmanInit+0x54>)
 8003c88:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <kalmanInit+0x50>)
 8003c8a:	601a      	str	r2, [r3, #0]
	R_measure = 0.0003f;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <kalmanInit+0x58>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <kalmanInit+0x5c>)
 8003c90:	601a      	str	r2, [r3, #0]

	_angle = 0.0f; // Reset the angle
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <kalmanInit+0x60>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	801a      	strh	r2, [r3, #0]
	_bias = 0.0f; // Reset bias
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <kalmanInit+0x64>)
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

	P[0][0] = 0.0f;
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <kalmanInit+0x68>)
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
	P[0][1] = 0.0f;
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <kalmanInit+0x68>)
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	605a      	str	r2, [r3, #4]
	P[1][0] = 0.0f;
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <kalmanInit+0x68>)
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
	P[1][1] = 0.0f;
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <kalmanInit+0x68>)
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	60da      	str	r2, [r3, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	200000c0 	.word	0x200000c0
 8003ccc:	3a03126f 	.word	0x3a03126f
 8003cd0:	200000b0 	.word	0x200000b0
 8003cd4:	200000e0 	.word	0x200000e0
 8003cd8:	399d4952 	.word	0x399d4952
 8003cdc:	200000ec 	.word	0x200000ec
 8003ce0:	200000fc 	.word	0x200000fc
 8003ce4:	20000100 	.word	0x20000100

08003ce8 <getKalmanAngle>:


int16_t getKalmanAngle(float newAngle, float newRate, float dt) {
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b08b      	sub	sp, #44	; 0x2c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]

    _rate = newRate - _bias;
 8003cf4:	4b8f      	ldr	r3, [pc, #572]	; (8003f34 <getKalmanAngle+0x24c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	68b8      	ldr	r0, [r7, #8]
 8003cfc:	f7fc ff70 	bl	8000be0 <__aeabi_fsub>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b8c      	ldr	r3, [pc, #560]	; (8003f38 <getKalmanAngle+0x250>)
 8003d06:	601a      	str	r2, [r3, #0]
    _angle += dt * _rate;
 8003d08:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <getKalmanAngle+0x254>)
 8003d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd f81c 	bl	8000d4c <__aeabi_i2f>
 8003d14:	4604      	mov	r4, r0
 8003d16:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <getKalmanAngle+0x250>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fd f869 	bl	8000df4 <__aeabi_fmul>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4619      	mov	r1, r3
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7fc ff5c 	bl	8000be4 <__addsf3>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd f9b0 	bl	8001094 <__aeabi_f2iz>
 8003d34:	4603      	mov	r3, r0
 8003d36:	b21a      	sxth	r2, r3
 8003d38:	4b80      	ldr	r3, [pc, #512]	; (8003f3c <getKalmanAngle+0x254>)
 8003d3a:	801a      	strh	r2, [r3, #0]

    // Update estimation error covariance - Project the error covariance ahead
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
 8003d3c:	4b80      	ldr	r3, [pc, #512]	; (8003f40 <getKalmanAngle+0x258>)
 8003d3e:	681c      	ldr	r4, [r3, #0]
 8003d40:	4b7f      	ldr	r3, [pc, #508]	; (8003f40 <getKalmanAngle+0x258>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd f854 	bl	8000df4 <__aeabi_fmul>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b7b      	ldr	r3, [pc, #492]	; (8003f40 <getKalmanAngle+0x258>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f7fc ff42 	bl	8000be0 <__aeabi_fsub>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b77      	ldr	r3, [pc, #476]	; (8003f40 <getKalmanAngle+0x258>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f7fc ff3a 	bl	8000be0 <__aeabi_fsub>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b74      	ldr	r3, [pc, #464]	; (8003f44 <getKalmanAngle+0x25c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f7fc ff34 	bl	8000be4 <__addsf3>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd f837 	bl	8000df4 <__aeabi_fmul>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7fc ff2a 	bl	8000be4 <__addsf3>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <getKalmanAngle+0x258>)
 8003d96:	601a      	str	r2, [r3, #0]
    P[0][1] -= dt * P[1][1];
 8003d98:	4b69      	ldr	r3, [pc, #420]	; (8003f40 <getKalmanAngle+0x258>)
 8003d9a:	685c      	ldr	r4, [r3, #4]
 8003d9c:	4b68      	ldr	r3, [pc, #416]	; (8003f40 <getKalmanAngle+0x258>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd f826 	bl	8000df4 <__aeabi_fmul>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4619      	mov	r1, r3
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7fc ff17 	bl	8000be0 <__aeabi_fsub>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b62      	ldr	r3, [pc, #392]	; (8003f40 <getKalmanAngle+0x258>)
 8003db8:	605a      	str	r2, [r3, #4]
    P[1][0] -= dt * P[1][1];
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <getKalmanAngle+0x258>)
 8003dbc:	689c      	ldr	r4, [r3, #8]
 8003dbe:	4b60      	ldr	r3, [pc, #384]	; (8003f40 <getKalmanAngle+0x258>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fd f815 	bl	8000df4 <__aeabi_fmul>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7fc ff06 	bl	8000be0 <__aeabi_fsub>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b59      	ldr	r3, [pc, #356]	; (8003f40 <getKalmanAngle+0x258>)
 8003dda:	609a      	str	r2, [r3, #8]
    P[1][1] += Q_bias * dt;
 8003ddc:	4b58      	ldr	r3, [pc, #352]	; (8003f40 <getKalmanAngle+0x258>)
 8003dde:	68dc      	ldr	r4, [r3, #12]
 8003de0:	4b59      	ldr	r3, [pc, #356]	; (8003f48 <getKalmanAngle+0x260>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd f804 	bl	8000df4 <__aeabi_fmul>
 8003dec:	4603      	mov	r3, r0
 8003dee:	4619      	mov	r1, r3
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7fc fef7 	bl	8000be4 <__addsf3>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b51      	ldr	r3, [pc, #324]	; (8003f40 <getKalmanAngle+0x258>)
 8003dfc:	60da      	str	r2, [r3, #12]

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    float S = P[0][0] + R_measure; // Estimate error
 8003dfe:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <getKalmanAngle+0x258>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b52      	ldr	r3, [pc, #328]	; (8003f4c <getKalmanAngle+0x264>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7fc feeb 	bl	8000be4 <__addsf3>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24

    //Calculate Kalman gain
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
 8003e12:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <getKalmanAngle+0x258>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fd f89f 	bl	8000f5c <__aeabi_fdiv>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	613b      	str	r3, [r7, #16]
    K[1] = P[1][0] / S;
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <getKalmanAngle+0x258>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fd f897 	bl	8000f5c <__aeabi_fdiv>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	617b      	str	r3, [r7, #20]

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    float y = newAngle - _angle; // Angle difference
 8003e32:	4b42      	ldr	r3, [pc, #264]	; (8003f3c <getKalmanAngle+0x254>)
 8003e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fc ff87 	bl	8000d4c <__aeabi_i2f>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4619      	mov	r1, r3
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7fc fecc 	bl	8000be0 <__aeabi_fsub>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	623b      	str	r3, [r7, #32]

    //Update angle and bias
    _angle += (int16_t)(K[0] * y);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6a39      	ldr	r1, [r7, #32]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc ffcf 	bl	8000df4 <__aeabi_fmul>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fd f91b 	bl	8001094 <__aeabi_f2iz>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <getKalmanAngle+0x254>)
 8003e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	b21a      	sxth	r2, r3
 8003e72:	4b32      	ldr	r3, [pc, #200]	; (8003f3c <getKalmanAngle+0x254>)
 8003e74:	801a      	strh	r2, [r3, #0]
    _bias += K[1] * y;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc ffba 	bl	8000df4 <__aeabi_fmul>
 8003e80:	4603      	mov	r3, r0
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <getKalmanAngle+0x24c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7fc feaa 	bl	8000be4 <__addsf3>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <getKalmanAngle+0x24c>)
 8003e96:	601a      	str	r2, [r3, #0]

    // Calculate estimation error covariance - Update the error covariance
    float P00_temp = P[0][0];
 8003e98:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <getKalmanAngle+0x258>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61fb      	str	r3, [r7, #28]
    float P01_temp = P[0][1];
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <getKalmanAngle+0x258>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]

    P[0][0] -= K[0] * P00_temp;
 8003ea4:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <getKalmanAngle+0x258>)
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	69f9      	ldr	r1, [r7, #28]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc ffa1 	bl	8000df4 <__aeabi_fmul>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7fc fe92 	bl	8000be0 <__aeabi_fsub>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <getKalmanAngle+0x258>)
 8003ec2:	601a      	str	r2, [r3, #0]
    P[0][1] -= K[0] * P01_temp;
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <getKalmanAngle+0x258>)
 8003ec6:	685c      	ldr	r4, [r3, #4]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	69b9      	ldr	r1, [r7, #24]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc ff91 	bl	8000df4 <__aeabi_fmul>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f7fc fe82 	bl	8000be0 <__aeabi_fsub>
 8003edc:	4603      	mov	r3, r0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <getKalmanAngle+0x258>)
 8003ee2:	605a      	str	r2, [r3, #4]
    P[1][0] -= K[1] * P00_temp;
 8003ee4:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <getKalmanAngle+0x258>)
 8003ee6:	689c      	ldr	r4, [r3, #8]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	69f9      	ldr	r1, [r7, #28]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc ff81 	bl	8000df4 <__aeabi_fmul>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f7fc fe72 	bl	8000be0 <__aeabi_fsub>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <getKalmanAngle+0x258>)
 8003f02:	609a      	str	r2, [r3, #8]
    P[1][1] -= K[1] * P01_temp;
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <getKalmanAngle+0x258>)
 8003f06:	68dc      	ldr	r4, [r3, #12]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	69b9      	ldr	r1, [r7, #24]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc ff71 	bl	8000df4 <__aeabi_fmul>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4619      	mov	r1, r3
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7fc fe62 	bl	8000be0 <__aeabi_fsub>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <getKalmanAngle+0x258>)
 8003f22:	60da      	str	r2, [r3, #12]

    return _angle;
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <getKalmanAngle+0x254>)
 8003f26:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	372c      	adds	r7, #44	; 0x2c
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200000fc 	.word	0x200000fc
 8003f38:	200000d4 	.word	0x200000d4
 8003f3c:	200000ec 	.word	0x200000ec
 8003f40:	20000100 	.word	0x20000100
 8003f44:	200000c0 	.word	0x200000c0
 8003f48:	200000b0 	.word	0x200000b0
 8003f4c:	200000e0 	.word	0x200000e0

08003f50 <PID_Init>:
#include "PID.h"
#include "stm32f1xx_hal.h"
#include "main.h"
#include "math.h"

void PID_Init(){
 8003f50:	b490      	push	{r4, r7}
 8003f52:	af00      	add	r7, sp, #0
	speedIntegral = 0;
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <PID_Init+0x30>)
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
	angleIntegral = 0;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <PID_Init+0x34>)
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
	previousError = 0;
 8003f64:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <PID_Init+0x38>)
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	f04f 0400 	mov.w	r4, #0
 8003f6e:	e9c2 3400 	strd	r3, r4, [r2]
	previousSpeed = 0;
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <PID_Init+0x3c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	801a      	strh	r2, [r3, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc90      	pop	{r4, r7}
 8003f7e:	4770      	bx	lr
 8003f80:	200000f4 	.word	0x200000f4
 8003f84:	200000f0 	.word	0x200000f0
 8003f88:	200000b8 	.word	0x200000b8
 8003f8c:	200000e4 	.word	0x200000e4

08003f90 <anglePID>:


void anglePID(float refAngle, int8_t realAngle){
 8003f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f94:	b08d      	sub	sp, #52	; 0x34
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	70fb      	strb	r3, [r7, #3]

	double error;
	float Kp = 5; //5.85
 8003f9e:	4b68      	ldr	r3, [pc, #416]	; (8004140 <anglePID+0x1b0>)
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Ki = 0;
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	float Kd = 0;
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
	double v = 0;
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	f04f 0400 	mov.w	r4, #0
 8003fb6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	float dt = ((1 + TIM2->PSC)*(1+TIM2->ARR))/24000000;
 8003fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fc8:	3201      	adds	r2, #1
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	4a5d      	ldr	r2, [pc, #372]	; (8004144 <anglePID+0x1b4>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	0d5b      	lsrs	r3, r3, #21
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc feb4 	bl	8000d44 <__aeabi_ui2f>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	617b      	str	r3, [r7, #20]
	/*
	if(realAngle >= (refAngle - 3) && realAngle <= (refAngle + 3)){
		realAngle = refAngle;
	}
*/
	error = refAngle - realAngle;
 8003fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc feb1 	bl	8000d4c <__aeabi_i2f>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fdf6 	bl	8000be0 <__aeabi_fsub>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc fa6e 	bl	80004d8 <__aeabi_f2d>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	e9c7 3402 	strd	r3, r4, [r7, #8]
	angleIntegral = angleIntegral  + error * dt;
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <anglePID+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc fa65 	bl	80004d8 <__aeabi_f2d>
 800400e:	4604      	mov	r4, r0
 8004010:	460d      	mov	r5, r1
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7fc fa60 	bl	80004d8 <__aeabi_f2d>
 8004018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800401c:	f7fc fab4 	bl	8000588 <__aeabi_dmul>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc f8f8 	bl	800021c <__adddf3>
 800402c:	4603      	mov	r3, r0
 800402e:	460c      	mov	r4, r1
 8004030:	4618      	mov	r0, r3
 8004032:	4621      	mov	r1, r4
 8004034:	f7fc fd80 	bl	8000b38 <__aeabi_d2f>
 8004038:	4602      	mov	r2, r0
 800403a:	4b43      	ldr	r3, [pc, #268]	; (8004148 <anglePID+0x1b8>)
 800403c:	601a      	str	r2, [r3, #0]
	v = Kp*(error + (Kd* (error - previousError) / dt) + Ki * angleIntegral);// * 1.33;
 800403e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004040:	f7fc fa4a 	bl	80004d8 <__aeabi_f2d>
 8004044:	4605      	mov	r5, r0
 8004046:	460e      	mov	r6, r1
 8004048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800404a:	f7fc fa45 	bl	80004d8 <__aeabi_f2d>
 800404e:	4680      	mov	r8, r0
 8004050:	4689      	mov	r9, r1
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <anglePID+0x1bc>)
 8004054:	cb18      	ldmia	r3, {r3, r4}
 8004056:	461a      	mov	r2, r3
 8004058:	4623      	mov	r3, r4
 800405a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800405e:	f7fc f8db 	bl	8000218 <__aeabi_dsub>
 8004062:	4603      	mov	r3, r0
 8004064:	460c      	mov	r4, r1
 8004066:	461a      	mov	r2, r3
 8004068:	4623      	mov	r3, r4
 800406a:	4640      	mov	r0, r8
 800406c:	4649      	mov	r1, r9
 800406e:	f7fc fa8b 	bl	8000588 <__aeabi_dmul>
 8004072:	4603      	mov	r3, r0
 8004074:	460c      	mov	r4, r1
 8004076:	4698      	mov	r8, r3
 8004078:	46a1      	mov	r9, r4
 800407a:	6978      	ldr	r0, [r7, #20]
 800407c:	f7fc fa2c 	bl	80004d8 <__aeabi_f2d>
 8004080:	4603      	mov	r3, r0
 8004082:	460c      	mov	r4, r1
 8004084:	461a      	mov	r2, r3
 8004086:	4623      	mov	r3, r4
 8004088:	4640      	mov	r0, r8
 800408a:	4649      	mov	r1, r9
 800408c:	f7fc fba6 	bl	80007dc <__aeabi_ddiv>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	4618      	mov	r0, r3
 8004096:	4621      	mov	r1, r4
 8004098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800409c:	f7fc f8be 	bl	800021c <__adddf3>
 80040a0:	4603      	mov	r3, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	4698      	mov	r8, r3
 80040a6:	46a1      	mov	r9, r4
 80040a8:	4b27      	ldr	r3, [pc, #156]	; (8004148 <anglePID+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fea0 	bl	8000df4 <__aeabi_fmul>
 80040b4:	4603      	mov	r3, r0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc fa0e 	bl	80004d8 <__aeabi_f2d>
 80040bc:	4603      	mov	r3, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	461a      	mov	r2, r3
 80040c2:	4623      	mov	r3, r4
 80040c4:	4640      	mov	r0, r8
 80040c6:	4649      	mov	r1, r9
 80040c8:	f7fc f8a8 	bl	800021c <__adddf3>
 80040cc:	4603      	mov	r3, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	461a      	mov	r2, r3
 80040d2:	4623      	mov	r3, r4
 80040d4:	4628      	mov	r0, r5
 80040d6:	4631      	mov	r1, r6
 80040d8:	f7fc fa56 	bl	8000588 <__aeabi_dmul>
 80040dc:	4603      	mov	r3, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	e9c7 3406 	strd	r3, r4, [r7, #24]

	if(v < 0){
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040f0:	f7fc fcbc 	bl	8000a6c <__aeabi_dcmplt>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <anglePID+0x186>
		_dir = BACKWARD;
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <anglePID+0x1c0>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
		 _speed = -(int)(v);
 8004100:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004104:	f7fc fcf0 	bl	8000ae8 <__aeabi_d2iz>
 8004108:	4603      	mov	r3, r0
 800410a:	b29b      	uxth	r3, r3
 800410c:	425b      	negs	r3, r3
 800410e:	b29a      	uxth	r2, r3
 8004110:	4b10      	ldr	r3, [pc, #64]	; (8004154 <anglePID+0x1c4>)
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	e00a      	b.n	800412c <anglePID+0x19c>
	}
	else{
		_dir = FORWARD;
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <anglePID+0x1c0>)
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
		_speed = (int)(v);
 800411c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004120:	f7fc fce2 	bl	8000ae8 <__aeabi_d2iz>
 8004124:	4603      	mov	r3, r0
 8004126:	b29a      	uxth	r2, r3
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <anglePID+0x1c4>)
 800412a:	801a      	strh	r2, [r3, #0]

	/*if(_speed != previousSpeed){
		changeSpeed(_speed);
	}*/

	previousError = error;
 800412c:	4a07      	ldr	r2, [pc, #28]	; (800414c <anglePID+0x1bc>)
 800412e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004132:	e9c2 3400 	strd	r3, r4, [r2]
}
 8004136:	bf00      	nop
 8004138:	3734      	adds	r7, #52	; 0x34
 800413a:	46bd      	mov	sp, r7
 800413c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004140:	40a00000 	.word	0x40a00000
 8004144:	165e9f81 	.word	0x165e9f81
 8004148:	200000f0 	.word	0x200000f0
 800414c:	200000b8 	.word	0x200000b8
 8004150:	200000d8 	.word	0x200000d8
 8004154:	200000d0 	.word	0x200000d0

08004158 <displayBatteryLevel>:

extern TIM_HandleTypeDef htim3;



void displayBatteryLevel(int percentage){
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	int red = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
	int green = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]

	float red_dimming_factor = 0.5;
 8004168:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800416c:	60fb      	str	r3, [r7, #12]
	float green_dimming_factor = red_dimming_factor * 0.5;
 800416e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7fc fe3e 	bl	8000df4 <__aeabi_fmul>
 8004178:	4603      	mov	r3, r0
 800417a:	60bb      	str	r3, [r7, #8]

	if(percentage < 0){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	da02      	bge.n	8004188 <displayBatteryLevel+0x30>
		percentage = 0;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	e004      	b.n	8004192 <displayBatteryLevel+0x3a>
	} else if(percentage > 100){
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	dd01      	ble.n	8004192 <displayBatteryLevel+0x3a>
		percentage = 100;
 800418e:	2364      	movs	r3, #100	; 0x64
 8004190:	607b      	str	r3, [r7, #4]
	}

	if(percentage < 50){
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b31      	cmp	r3, #49	; 0x31
 8004196:	dc23      	bgt.n	80041e0 <displayBatteryLevel+0x88>

		red = 255 * red_dimming_factor;
 8004198:	492c      	ldr	r1, [pc, #176]	; (800424c <displayBatteryLevel+0xf4>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7fc fe2a 	bl	8000df4 <__aeabi_fmul>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc ff76 	bl	8001094 <__aeabi_f2iz>
 80041a8:	4603      	mov	r3, r0
 80041aa:	617b      	str	r3, [r7, #20]
		green = ((255 * 2 * percentage) / 100) * green_dimming_factor;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4a26      	ldr	r2, [pc, #152]	; (8004250 <displayBatteryLevel+0xf8>)
 80041b8:	fb82 1203 	smull	r1, r2, r2, r3
 80041bc:	1152      	asrs	r2, r2, #5
 80041be:	17db      	asrs	r3, r3, #31
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc fdc2 	bl	8000d4c <__aeabi_i2f>
 80041c8:	4603      	mov	r3, r0
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc fe11 	bl	8000df4 <__aeabi_fmul>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc ff5d 	bl	8001094 <__aeabi_f2iz>
 80041da:	4603      	mov	r3, r0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e025      	b.n	800422c <displayBatteryLevel+0xd4>

	} else{
		red = (255 -((255 * ( (percentage - 50) * 2))  / 100)) * red_dimming_factor;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 80041e6:	4613      	mov	r3, r2
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4a18      	ldr	r2, [pc, #96]	; (8004250 <displayBatteryLevel+0xf8>)
 80041f0:	fb82 1203 	smull	r1, r2, r2, r3
 80041f4:	1152      	asrs	r2, r2, #5
 80041f6:	17db      	asrs	r3, r3, #31
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	33ff      	adds	r3, #255	; 0xff
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc fda5 	bl	8000d4c <__aeabi_i2f>
 8004202:	4603      	mov	r3, r0
 8004204:	68f9      	ldr	r1, [r7, #12]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc fdf4 	bl	8000df4 <__aeabi_fmul>
 800420c:	4603      	mov	r3, r0
 800420e:	4618      	mov	r0, r3
 8004210:	f7fc ff40 	bl	8001094 <__aeabi_f2iz>
 8004214:	4603      	mov	r3, r0
 8004216:	617b      	str	r3, [r7, #20]
		green = 255 * green_dimming_factor;
 8004218:	490c      	ldr	r1, [pc, #48]	; (800424c <displayBatteryLevel+0xf4>)
 800421a:	68b8      	ldr	r0, [r7, #8]
 800421c:	f7fc fdea 	bl	8000df4 <__aeabi_fmul>
 8004220:	4603      	mov	r3, r0
 8004222:	4618      	mov	r0, r3
 8004224:	f7fc ff36 	bl	8001094 <__aeabi_f2iz>
 8004228:	4603      	mov	r3, r0
 800422a:	613b      	str	r3, [r7, #16]
	}
	htim3.Instance->CCR2 = green;
 800422c:	4b09      	ldr	r3, [pc, #36]	; (8004254 <displayBatteryLevel+0xfc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 0;
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <displayBatteryLevel+0xfc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2200      	movs	r2, #0
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = red;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <displayBatteryLevel+0xfc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40

}
 8004244:	bf00      	nop
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	437f0000 	.word	0x437f0000
 8004250:	51eb851f 	.word	0x51eb851f
 8004254:	200001a4 	.word	0x200001a4

08004258 <gy521_Init>:
#include "stm32f1xx_hal.h"
#include "Kalman.h"
 I2C_HandleTypeDef hi2c1;


void gy521_Init(){
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
	  uint8_t d[2];
	  d[0] = 0x6B;
 800425e:	236b      	movs	r3, #107	; 0x6b
 8004260:	703b      	strb	r3, [r7, #0]
	  d[1] = 0x00;
 8004262:	2300      	movs	r3, #0
 8004264:	707b      	strb	r3, [r7, #1]
	  //while(HAL_I2C_Master_Transmit(&hi2c1, ADDR, (uint8_t*)d,2,100) != HAL_OK){}
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8004266:	2201      	movs	r2, #1
 8004268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800426c:	481d      	ldr	r0, [pc, #116]	; (80042e4 <gy521_Init+0x8c>)
 800426e:	f7fd fa3d 	bl	80016ec <HAL_GPIO_WritePin>
	  int i = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	607b      	str	r3, [r7, #4]
	  for(i; i<1000000; i++){
 8004276:	e003      	b.n	8004280 <gy521_Init+0x28>
		  asm("NOP");
 8004278:	bf00      	nop
	  for(i; i<1000000; i++){
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3301      	adds	r3, #1
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <gy521_Init+0x90>)
 8004284:	4293      	cmp	r3, r2
 8004286:	ddf7      	ble.n	8004278 <gy521_Init+0x20>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8004288:	2200      	movs	r2, #0
 800428a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800428e:	4815      	ldr	r0, [pc, #84]	; (80042e4 <gy521_Init+0x8c>)
 8004290:	f7fd fa2c 	bl	80016ec <HAL_GPIO_WritePin>
	  i = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	607b      	str	r3, [r7, #4]
	  for(i; i<1000000; i++){
 8004298:	e003      	b.n	80042a2 <gy521_Init+0x4a>
		  asm("NOP");
 800429a:	bf00      	nop
	  for(i; i<1000000; i++){
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3301      	adds	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <gy521_Init+0x90>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	ddf7      	ble.n	800429a <gy521_Init+0x42>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80042aa:	2201      	movs	r2, #1
 80042ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042b0:	480c      	ldr	r0, [pc, #48]	; (80042e4 <gy521_Init+0x8c>)
 80042b2:	f7fd fa1b 	bl	80016ec <HAL_GPIO_WritePin>
	  i = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
	  for(i; i<1000000; i++){
 80042ba:	e003      	b.n	80042c4 <gy521_Init+0x6c>
		  asm("NOP");
 80042bc:	bf00      	nop
	  for(i; i<1000000; i++){
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3301      	adds	r3, #1
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <gy521_Init+0x90>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	ddf7      	ble.n	80042bc <gy521_Init+0x64>
	  }
	  i = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	607b      	str	r3, [r7, #4]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042d6:	4803      	ldr	r0, [pc, #12]	; (80042e4 <gy521_Init+0x8c>)
 80042d8:	f7fd fa08 	bl	80016ec <HAL_GPIO_WritePin>

}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40010c00 	.word	0x40010c00
 80042e8:	000f423f 	.word	0x000f423f

080042ec <getAcc_X>:
	HAL_I2C_Mem_Read(&hi2c1, ADDR, GYRO_ZOUT_L , 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);

	value = ((temp[0] << 8) | temp[1]);
	return value;
}
int16_t getAcc_X(){
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];


	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_XOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f6:	9302      	str	r3, [sp, #8]
 80042f8:	2301      	movs	r3, #1
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2301      	movs	r3, #1
 8004302:	223b      	movs	r2, #59	; 0x3b
 8004304:	21d0      	movs	r1, #208	; 0xd0
 8004306:	480f      	ldr	r0, [pc, #60]	; (8004344 <getAcc_X+0x58>)
 8004308:	f7fd fb30 	bl	800196c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_XOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 800430c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004310:	9302      	str	r3, [sp, #8]
 8004312:	2301      	movs	r3, #1
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	1d3b      	adds	r3, r7, #4
 8004318:	3301      	adds	r3, #1
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2301      	movs	r3, #1
 800431e:	223c      	movs	r2, #60	; 0x3c
 8004320:	21d0      	movs	r1, #208	; 0xd0
 8004322:	4808      	ldr	r0, [pc, #32]	; (8004344 <getAcc_X+0x58>)
 8004324:	f7fd fb22 	bl	800196c <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 8004328:	793b      	ldrb	r3, [r7, #4]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	b21a      	sxth	r2, r3
 800432e:	797b      	ldrb	r3, [r7, #5]
 8004330:	b21b      	sxth	r3, r3
 8004332:	4313      	orrs	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
	return value;
 8004336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000110 	.word	0x20000110

08004348 <getAcc_Y>:
int16_t getAcc_Y(){
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_YOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 800434e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004352:	9302      	str	r3, [sp, #8]
 8004354:	2301      	movs	r3, #1
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2301      	movs	r3, #1
 800435e:	223d      	movs	r2, #61	; 0x3d
 8004360:	21d0      	movs	r1, #208	; 0xd0
 8004362:	480f      	ldr	r0, [pc, #60]	; (80043a0 <getAcc_Y+0x58>)
 8004364:	f7fd fb02 	bl	800196c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_YOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 8004368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800436c:	9302      	str	r3, [sp, #8]
 800436e:	2301      	movs	r3, #1
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	3301      	adds	r3, #1
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2301      	movs	r3, #1
 800437a:	223e      	movs	r2, #62	; 0x3e
 800437c:	21d0      	movs	r1, #208	; 0xd0
 800437e:	4808      	ldr	r0, [pc, #32]	; (80043a0 <getAcc_Y+0x58>)
 8004380:	f7fd faf4 	bl	800196c <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 8004384:	793b      	ldrb	r3, [r7, #4]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	b21a      	sxth	r2, r3
 800438a:	797b      	ldrb	r3, [r7, #5]
 800438c:	b21b      	sxth	r3, r3
 800438e:	4313      	orrs	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
	return value;
 8004392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000110 	.word	0x20000110

080043a4 <getAcc_Z>:
int16_t getAcc_Z(){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_ZOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ae:	9302      	str	r3, [sp, #8]
 80043b0:	2301      	movs	r3, #1
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	1d3b      	adds	r3, r7, #4
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2301      	movs	r3, #1
 80043ba:	223f      	movs	r2, #63	; 0x3f
 80043bc:	21d0      	movs	r1, #208	; 0xd0
 80043be:	480f      	ldr	r0, [pc, #60]	; (80043fc <getAcc_Z+0x58>)
 80043c0:	f7fd fad4 	bl	800196c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_ZOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c8:	9302      	str	r3, [sp, #8]
 80043ca:	2301      	movs	r3, #1
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	3301      	adds	r3, #1
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2301      	movs	r3, #1
 80043d6:	2240      	movs	r2, #64	; 0x40
 80043d8:	21d0      	movs	r1, #208	; 0xd0
 80043da:	4808      	ldr	r0, [pc, #32]	; (80043fc <getAcc_Z+0x58>)
 80043dc:	f7fd fac6 	bl	800196c <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 80043e0:	793b      	ldrb	r3, [r7, #4]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	b21a      	sxth	r2, r3
 80043e6:	797b      	ldrb	r3, [r7, #5]
 80043e8:	b21b      	sxth	r3, r3
 80043ea:	4313      	orrs	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
	return value;
 80043ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000110 	.word	0x20000110

08004400 <getAccelPitch>:


float getAccelPitch(){
 8004400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0

	float Ax = (float)(getAcc_X() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 8004408:	f7ff ff70 	bl	80042ec <getAcc_X>
 800440c:	4603      	mov	r3, r0
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc f850 	bl	80004b4 <__aeabi_i2d>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	f7fb ff00 	bl	800021c <__adddf3>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	f7fc fb88 	bl	8000b38 <__aeabi_d2f>
 8004428:	4603      	mov	r3, r0
 800442a:	4945      	ldr	r1, [pc, #276]	; (8004540 <getAccelPitch+0x140>)
 800442c:	4618      	mov	r0, r3
 800442e:	f7fc fd95 	bl	8000f5c <__aeabi_fdiv>
 8004432:	4603      	mov	r3, r0
 8004434:	60fb      	str	r3, [r7, #12]
	float Ay = (float)(getAcc_Y() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 8004436:	f7ff ff87 	bl	8004348 <getAcc_Y>
 800443a:	4603      	mov	r3, r0
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc f839 	bl	80004b4 <__aeabi_i2d>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	f7fb fee9 	bl	800021c <__adddf3>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	f7fc fb71 	bl	8000b38 <__aeabi_d2f>
 8004456:	4603      	mov	r3, r0
 8004458:	4939      	ldr	r1, [pc, #228]	; (8004540 <getAccelPitch+0x140>)
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc fd7e 	bl	8000f5c <__aeabi_fdiv>
 8004460:	4603      	mov	r3, r0
 8004462:	60bb      	str	r3, [r7, #8]
	float Az = (float)(getAcc_Z() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 8004464:	f7ff ff9e 	bl	80043a4 <getAcc_Z>
 8004468:	4603      	mov	r3, r0
 800446a:	4618      	mov	r0, r3
 800446c:	f7fc f822 	bl	80004b4 <__aeabi_i2d>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	f7fb fed2 	bl	800021c <__adddf3>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	f7fc fb5a 	bl	8000b38 <__aeabi_d2f>
 8004484:	4603      	mov	r3, r0
 8004486:	492e      	ldr	r1, [pc, #184]	; (8004540 <getAccelPitch+0x140>)
 8004488:	4618      	mov	r0, r3
 800448a:	f7fc fd67 	bl	8000f5c <__aeabi_fdiv>
 800448e:	4603      	mov	r3, r0
 8004490:	607b      	str	r3, [r7, #4]

	float accelAngle = (double)((-atan2(sqrt(Ay*Ay + Ax*Ax),Az)*180/3.14) + 90);
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68b8      	ldr	r0, [r7, #8]
 8004496:	f7fc fcad 	bl	8000df4 <__aeabi_fmul>
 800449a:	4603      	mov	r3, r0
 800449c:	461e      	mov	r6, r3
 800449e:	68f9      	ldr	r1, [r7, #12]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7fc fca7 	bl	8000df4 <__aeabi_fmul>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4619      	mov	r1, r3
 80044aa:	4630      	mov	r0, r6
 80044ac:	f7fc fb9a 	bl	8000be4 <__addsf3>
 80044b0:	4603      	mov	r3, r0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc f810 	bl	80004d8 <__aeabi_f2d>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	f000 ffc0 	bl	8005444 <sqrt>
 80044c4:	4680      	mov	r8, r0
 80044c6:	4689      	mov	r9, r1
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fc f805 	bl	80004d8 <__aeabi_f2d>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4640      	mov	r0, r8
 80044d4:	4649      	mov	r1, r9
 80044d6:	f000 ffb3 	bl	8005440 <atan2>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4614      	mov	r4, r2
 80044e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	4b16      	ldr	r3, [pc, #88]	; (8004544 <getAccelPitch+0x144>)
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7fc f84b 	bl	8000588 <__aeabi_dmul>
 80044f2:	4603      	mov	r3, r0
 80044f4:	460c      	mov	r4, r1
 80044f6:	4618      	mov	r0, r3
 80044f8:	4621      	mov	r1, r4
 80044fa:	a30f      	add	r3, pc, #60	; (adr r3, 8004538 <getAccelPitch+0x138>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fc f96c 	bl	80007dc <__aeabi_ddiv>
 8004504:	4603      	mov	r3, r0
 8004506:	460c      	mov	r4, r1
 8004508:	4618      	mov	r0, r3
 800450a:	4621      	mov	r1, r4
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <getAccelPitch+0x148>)
 8004512:	f7fb fe83 	bl	800021c <__adddf3>
 8004516:	4603      	mov	r3, r0
 8004518:	460c      	mov	r4, r1
 800451a:	4618      	mov	r0, r3
 800451c:	4621      	mov	r1, r4
 800451e:	f7fc fb0b 	bl	8000b38 <__aeabi_d2f>
 8004522:	4603      	mov	r3, r0
 8004524:	603b      	str	r3, [r7, #0]

	return accelAngle;
 8004526:	683b      	ldr	r3, [r7, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004532:	bf00      	nop
 8004534:	f3af 8000 	nop.w
 8004538:	51eb851f 	.word	0x51eb851f
 800453c:	40091eb8 	.word	0x40091eb8
 8004540:	46fffe00 	.word	0x46fffe00
 8004544:	40668000 	.word	0x40668000
 8004548:	40568000 	.word	0x40568000
 800454c:	00000000 	.word	0x00000000

08004550 <getGyroPitch>:

float getGyroPitch(float gyroAngle , int16_t rawGyro){
 8004550:	b5b0      	push	{r4, r5, r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
	float Gy = getGyroYRate(rawGyro);
 800455c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f825 	bl	80045b0 <getGyroYRate>
 8004566:	60f8      	str	r0, [r7, #12]
	gyroAngle = gyroAngle + Gy * 0.001;
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fb ffb5 	bl	80004d8 <__aeabi_f2d>
 800456e:	4604      	mov	r4, r0
 8004570:	460d      	mov	r5, r1
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7fb ffb0 	bl	80004d8 <__aeabi_f2d>
 8004578:	a30b      	add	r3, pc, #44	; (adr r3, 80045a8 <getGyroPitch+0x58>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fc f803 	bl	8000588 <__aeabi_dmul>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4620      	mov	r0, r4
 8004588:	4629      	mov	r1, r5
 800458a:	f7fb fe47 	bl	800021c <__adddf3>
 800458e:	4603      	mov	r3, r0
 8004590:	460c      	mov	r4, r1
 8004592:	4618      	mov	r0, r3
 8004594:	4621      	mov	r1, r4
 8004596:	f7fc facf 	bl	8000b38 <__aeabi_d2f>
 800459a:	4603      	mov	r3, r0
 800459c:	607b      	str	r3, [r7, #4]

	return gyroAngle;
 800459e:	687b      	ldr	r3, [r7, #4]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}
 80045a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80045ac:	3f50624d 	.word	0x3f50624d

080045b0 <getGyroYRate>:

float getGyroYRate(int16_t rawGyro){
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	80fb      	strh	r3, [r7, #6]
	float zero = 80.75;
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <getGyroYRate+0x3c>)
 80045bc:	60fb      	str	r3, [r7, #12]
	float gYRate = (float)(rawGyro-zero) / 131.0;
 80045be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fc fbc2 	bl	8000d4c <__aeabi_i2f>
 80045c8:	4603      	mov	r3, r0
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fc fb07 	bl	8000be0 <__aeabi_fsub>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4906      	ldr	r1, [pc, #24]	; (80045f0 <getGyroYRate+0x40>)
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fc fcc0 	bl	8000f5c <__aeabi_fdiv>
 80045dc:	4603      	mov	r3, r0
 80045de:	60bb      	str	r3, [r7, #8]

	return gYRate;
 80045e0:	68bb      	ldr	r3, [r7, #8]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	42a18000 	.word	0x42a18000
 80045f0:	43030000 	.word	0x43030000

080045f4 <complementaryFilter>:

int8_t complementaryFilter(float gyro, float accel){
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
	float u = 0.1;
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <complementaryFilter+0x50>)
 8004600:	60fb      	str	r3, [r7, #12]
	float theta = u * gyro + (1-u) * accel;
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7fc fbf5 	bl	8000df4 <__aeabi_fmul>
 800460a:	4603      	mov	r3, r0
 800460c:	461c      	mov	r4, r3
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004614:	f7fc fae4 	bl	8000be0 <__aeabi_fsub>
 8004618:	4603      	mov	r3, r0
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fc fbe9 	bl	8000df4 <__aeabi_fmul>
 8004622:	4603      	mov	r3, r0
 8004624:	4619      	mov	r1, r3
 8004626:	4620      	mov	r0, r4
 8004628:	f7fc fadc 	bl	8000be4 <__addsf3>
 800462c:	4603      	mov	r3, r0
 800462e:	60bb      	str	r3, [r7, #8]

	return (int)(theta);
 8004630:	68b8      	ldr	r0, [r7, #8]
 8004632:	f7fc fd2f 	bl	8001094 <__aeabi_f2iz>
 8004636:	4603      	mov	r3, r0
 8004638:	b25b      	sxtb	r3, r3
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bd90      	pop	{r4, r7, pc}
 8004642:	bf00      	nop
 8004644:	3dcccccd 	.word	0x3dcccccd

08004648 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM6_Init(void);
static void MX_TIM7_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d106      	bne.n	8004668 <HAL_TIM_PeriodElapsedCallback+0x20>
		moveRobot(150,_dir);
 800465a:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	4619      	mov	r1, r3
 8004662:	2096      	movs	r0, #150	; 0x96
 8004664:	f000 fc28 	bl	8004eb8 <moveRobot>
	}
	if(htim->Instance == TIM4){
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a39      	ldr	r2, [pc, #228]	; (8004754 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d107      	bne.n	8004682 <HAL_TIM_PeriodElapsedCallback+0x3a>
		anglePID(0,theta);
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004674:	f993 3000 	ldrsb.w	r3, [r3]
 8004678:	4619      	mov	r1, r3
 800467a:	f04f 0000 	mov.w	r0, #0
 800467e:	f7ff fc87 	bl	8003f90 <anglePID>
	if(htim->Instance == TIM6){
		//frequency = 100Hz
		//_v = getSpeed();
		//_steps = 0;
	}
	if(htim->Instance == TIM7){
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a35      	ldr	r2, [pc, #212]	; (800475c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d15d      	bne.n	8004748 <HAL_TIM_PeriodElapsedCallback+0x100>
		//frequency = 1kHz
		gyroAngle = getGyroPitch(gyroAngle, rawGyro);
 800468c:	4b34      	ldr	r3, [pc, #208]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800468e:	681c      	ldr	r4, [r3, #0]
 8004690:	4b34      	ldr	r3, [pc, #208]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fc fcfd 	bl	8001094 <__aeabi_f2iz>
 800469a:	4603      	mov	r3, r0
 800469c:	b21b      	sxth	r3, r3
 800469e:	4619      	mov	r1, r3
 80046a0:	4620      	mov	r0, r4
 80046a2:	f7ff ff55 	bl	8004550 <getGyroPitch>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b2d      	ldr	r3, [pc, #180]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80046aa:	601a      	str	r2, [r3, #0]
		accAngle = rawAccel;
 80046ac:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a2e      	ldr	r2, [pc, #184]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80046b2:	6013      	str	r3, [r2, #0]
		cnt++;
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80046be:	701a      	strb	r2, [r3, #0]
		if(cnt <= 40){
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b28      	cmp	r3, #40	; 0x28
 80046c6:	d813      	bhi.n	80046f0 <HAL_TIM_PeriodElapsedCallback+0xa8>

			currentAngle = currentAngle + complementaryFilter(gyroAngle, accAngle);
 80046c8:	4b25      	ldr	r3, [pc, #148]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b27      	ldr	r3, [pc, #156]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f7ff ff8e 	bl	80045f4 <complementaryFilter>
 80046d8:	4603      	mov	r3, r0
 80046da:	b29a      	uxth	r2, r3
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80046de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	b21a      	sxth	r2, r3
 80046ea:	4b22      	ldr	r3, [pc, #136]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80046ec:	801a      	strh	r2, [r3, #0]
			theta = getKalmanAngle(test,getGyroYRate(rawGyro), 0.04);
			currentAngle = 0;
			cnt = 0;
		}
	}
}
 80046ee:	e02b      	b.n	8004748 <HAL_TIM_PeriodElapsedCallback+0x100>
			test = currentAngle /40;
 80046f0:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80046f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f6:	4a20      	ldr	r2, [pc, #128]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80046f8:	fb82 1203 	smull	r1, r2, r2, r3
 80046fc:	1112      	asrs	r2, r2, #4
 80046fe:	17db      	asrs	r3, r3, #31
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	b21b      	sxth	r3, r3
 8004704:	4618      	mov	r0, r3
 8004706:	f7fc fb21 	bl	8000d4c <__aeabi_i2f>
 800470a:	4602      	mov	r2, r0
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800470e:	601a      	str	r2, [r3, #0]
			theta = getKalmanAngle(test,getGyroYRate(rawGyro), 0.04);
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004712:	681c      	ldr	r4, [r3, #0]
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fc fcbb 	bl	8001094 <__aeabi_f2iz>
 800471e:	4603      	mov	r3, r0
 8004720:	b21b      	sxth	r3, r3
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff44 	bl	80045b0 <getGyroYRate>
 8004728:	4603      	mov	r3, r0
 800472a:	4a15      	ldr	r2, [pc, #84]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800472c:	4619      	mov	r1, r3
 800472e:	4620      	mov	r0, r4
 8004730:	f7ff fada 	bl	8003ce8 <getKalmanAngle>
 8004734:	4603      	mov	r3, r0
 8004736:	b25a      	sxtb	r2, r3
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800473a:	701a      	strb	r2, [r3, #0]
			currentAngle = 0;
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800473e:	2200      	movs	r2, #0
 8004740:	801a      	strh	r2, [r3, #0]
			cnt = 0;
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}
 8004750:	200000d8 	.word	0x200000d8
 8004754:	40000800 	.word	0x40000800
 8004758:	200001e4 	.word	0x200001e4
 800475c:	40001400 	.word	0x40001400
 8004760:	20000098 	.word	0x20000098
 8004764:	2000009c 	.word	0x2000009c
 8004768:	200000a0 	.word	0x200000a0
 800476c:	20000094 	.word	0x20000094
 8004770:	200000a4 	.word	0x200000a4
 8004774:	200000a6 	.word	0x200000a6
 8004778:	66666667 	.word	0x66666667
 800477c:	200000e8 	.word	0x200000e8
 8004780:	3d23d70a 	.word	0x3d23d70a

08004784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004788:	f7fc fcaa 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800478c:	f000 f874 	bl	8004878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004790:	f000 fa7e 	bl	8004c90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004794:	f000 f8b2 	bl	80048fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004798:	f000 fa50 	bl	8004c3c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800479c:	f000 f8dc 	bl	8004958 <MX_TIM2_Init>
  MX_TIM4_Init();
 80047a0:	f000 f994 	bl	8004acc <MX_TIM4_Init>
  MX_TIM6_Init();
 80047a4:	f000 f9e0 	bl	8004b68 <MX_TIM6_Init>
  MX_TIM7_Init();
 80047a8:	f000 fa14 	bl	8004bd4 <MX_TIM7_Init>
  MX_TIM3_Init();
 80047ac:	f000 f920 	bl	80049f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  PID_Init();
 80047b0:	f7ff fbce 	bl	8003f50 <PID_Init>
  motorsInit();
 80047b4:	f000 fb1c 	bl	8004df0 <motorsInit>
  gy521_Init();
 80047b8:	f7ff fd4e 	bl	8004258 <gy521_Init>
  gyroAngle = getAccelPitch();
 80047bc:	f7ff fe20 	bl	8004400 <getAccelPitch>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b23      	ldr	r3, [pc, #140]	; (8004850 <main+0xcc>)
 80047c4:	601a      	str	r2, [r3, #0]
  accAngle = gyroAngle;
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <main+0xcc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a22      	ldr	r2, [pc, #136]	; (8004854 <main+0xd0>)
 80047cc:	6013      	str	r3, [r2, #0]
  _angle = gyroAngle;
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <main+0xcc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fc fc5e 	bl	8001094 <__aeabi_f2iz>
 80047d8:	4603      	mov	r3, r0
 80047da:	b21a      	sxth	r2, r3
 80047dc:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <main+0xd4>)
 80047de:	801a      	strh	r2, [r3, #0]
  kalmanInit();
 80047e0:	f7ff fa4c 	bl	8003c7c <kalmanInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80047e4:	481d      	ldr	r0, [pc, #116]	; (800485c <main+0xd8>)
 80047e6:	f7fe f97c 	bl	8002ae2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80047ea:	481d      	ldr	r0, [pc, #116]	; (8004860 <main+0xdc>)
 80047ec:	f7fe f979 	bl	8002ae2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80047f0:	481c      	ldr	r0, [pc, #112]	; (8004864 <main+0xe0>)
 80047f2:	f7fe f976 	bl	8002ae2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80047f6:	481c      	ldr	r0, [pc, #112]	; (8004868 <main+0xe4>)
 80047f8:	f7fe f973 	bl	8002ae2 <HAL_TIM_Base_Start_IT>
  HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 80047fc:	2001      	movs	r0, #1
 80047fe:	f7fc fcc9 	bl	8001194 <HAL_SetTickFreq>
  test = 0;
 8004802:	4b1a      	ldr	r3, [pc, #104]	; (800486c <main+0xe8>)
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 800480a:	2104      	movs	r1, #4
 800480c:	4818      	ldr	r0, [pc, #96]	; (8004870 <main+0xec>)
 800480e:	f7fe f9b7 	bl	8002b80 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8004812:	2108      	movs	r1, #8
 8004814:	4816      	ldr	r0, [pc, #88]	; (8004870 <main+0xec>)
 8004816:	f7fe f9b3 	bl	8002b80 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 800481a:	210c      	movs	r1, #12
 800481c:	4814      	ldr	r0, [pc, #80]	; (8004870 <main+0xec>)
 800481e:	f7fe f9af 	bl	8002b80 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  displayBatteryLevel(level);
 8004822:	4b14      	ldr	r3, [pc, #80]	; (8004874 <main+0xf0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fc96 	bl	8004158 <displayBatteryLevel>
	  HAL_Delay(500);
 800482c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004830:	f7fc fcd2 	bl	80011d8 <HAL_Delay>
	  level += 10;
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <main+0xf0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330a      	adds	r3, #10
 800483a:	4a0e      	ldr	r2, [pc, #56]	; (8004874 <main+0xf0>)
 800483c:	6013      	str	r3, [r2, #0]
	  if(level >= 100){
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <main+0xf0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b63      	cmp	r3, #99	; 0x63
 8004844:	dded      	ble.n	8004822 <main+0x9e>
		  level = 0;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <main+0xf0>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
	  displayBatteryLevel(level);
 800484c:	e7e9      	b.n	8004822 <main+0x9e>
 800484e:	bf00      	nop
 8004850:	20000098 	.word	0x20000098
 8004854:	20000094 	.word	0x20000094
 8004858:	200000ec 	.word	0x200000ec
 800485c:	20000268 	.word	0x20000268
 8004860:	20000164 	.word	0x20000164
 8004864:	20000228 	.word	0x20000228
 8004868:	200002a8 	.word	0x200002a8
 800486c:	200000e8 	.word	0x200000e8
 8004870:	200001a4 	.word	0x200001a4
 8004874:	200000a8 	.word	0x200000a8

08004878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b090      	sub	sp, #64	; 0x40
 800487c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800487e:	f107 0318 	add.w	r3, r7, #24
 8004882:	2228      	movs	r2, #40	; 0x28
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fdd2 	bl	8005430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	609a      	str	r2, [r3, #8]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800489a:	2301      	movs	r3, #1
 800489c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800489e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV10;
 80048a4:	2309      	movs	r3, #9
 80048a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048a8:	2302      	movs	r3, #2
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80048b2:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048b8:	f107 0318 	add.w	r3, r7, #24
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fd fcf7 	bl	80022b0 <HAL_RCC_OscConfig>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80048c8:	f000 fa44 	bl	8004d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048cc:	230f      	movs	r3, #15
 80048ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048d0:	2302      	movs	r3, #2
 80048d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80048e0:	1d3b      	adds	r3, r7, #4
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd ff63 	bl	80027b0 <HAL_RCC_ClockConfig>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80048f0:	f000 fa30 	bl	8004d54 <Error_Handler>
  }
}
 80048f4:	bf00      	nop
 80048f6:	3740      	adds	r7, #64	; 0x40
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <MX_I2C1_Init+0x50>)
 8004902:	4a13      	ldr	r2, [pc, #76]	; (8004950 <MX_I2C1_Init+0x54>)
 8004904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004906:	4b11      	ldr	r3, [pc, #68]	; (800494c <MX_I2C1_Init+0x50>)
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <MX_I2C1_Init+0x58>)
 800490a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <MX_I2C1_Init+0x50>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004912:	4b0e      	ldr	r3, [pc, #56]	; (800494c <MX_I2C1_Init+0x50>)
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <MX_I2C1_Init+0x50>)
 800491a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800491e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <MX_I2C1_Init+0x50>)
 8004922:	2200      	movs	r2, #0
 8004924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <MX_I2C1_Init+0x50>)
 8004928:	2200      	movs	r2, #0
 800492a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <MX_I2C1_Init+0x50>)
 800492e:	2200      	movs	r2, #0
 8004930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <MX_I2C1_Init+0x50>)
 8004934:	2200      	movs	r2, #0
 8004936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004938:	4804      	ldr	r0, [pc, #16]	; (800494c <MX_I2C1_Init+0x50>)
 800493a:	f7fc feef 	bl	800171c <HAL_I2C_Init>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004944:	f000 fa06 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20000110 	.word	0x20000110
 8004950:	40005400 	.word	0x40005400
 8004954:	000186a0 	.word	0x000186a0

08004958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800496c:	463b      	mov	r3, r7
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <MX_TIM2_Init+0x94>)
 8004976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800497a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <MX_TIM2_Init+0x94>)
 800497e:	22ef      	movs	r2, #239	; 0xef
 8004980:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <MX_TIM2_Init+0x94>)
 8004984:	2200      	movs	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004988:	4b18      	ldr	r3, [pc, #96]	; (80049ec <MX_TIM2_Init+0x94>)
 800498a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800498e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004990:	4b16      	ldr	r3, [pc, #88]	; (80049ec <MX_TIM2_Init+0x94>)
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <MX_TIM2_Init+0x94>)
 8004998:	2200      	movs	r2, #0
 800499a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800499c:	4813      	ldr	r0, [pc, #76]	; (80049ec <MX_TIM2_Init+0x94>)
 800499e:	f7fe f875 	bl	8002a8c <HAL_TIM_Base_Init>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80049a8:	f000 f9d4 	bl	8004d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80049b2:	f107 0308 	add.w	r3, r7, #8
 80049b6:	4619      	mov	r1, r3
 80049b8:	480c      	ldr	r0, [pc, #48]	; (80049ec <MX_TIM2_Init+0x94>)
 80049ba:	f7fe fb41 	bl	8003040 <HAL_TIM_ConfigClockSource>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80049c4:	f000 f9c6 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049c8:	2300      	movs	r3, #0
 80049ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049d0:	463b      	mov	r3, r7
 80049d2:	4619      	mov	r1, r3
 80049d4:	4805      	ldr	r0, [pc, #20]	; (80049ec <MX_TIM2_Init+0x94>)
 80049d6:	f7fe ff25 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80049e0:	f000 f9b8 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80049e4:	bf00      	nop
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000268 	.word	0x20000268

080049f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049f6:	f107 0320 	add.w	r3, r7, #32
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a00:	1d3b      	adds	r3, r7, #4
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	60da      	str	r2, [r3, #12]
 8004a0c:	611a      	str	r2, [r3, #16]
 8004a0e:	615a      	str	r2, [r3, #20]
 8004a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a12:	4b2c      	ldr	r3, [pc, #176]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a14:	4a2c      	ldr	r2, [pc, #176]	; (8004ac8 <MX_TIM3_Init+0xd8>)
 8004a16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 93;
 8004a18:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a1a:	225d      	movs	r2, #93	; 0x5d
 8004a1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a1e:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a26:	22fe      	movs	r2, #254	; 0xfe
 8004a28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a2a:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004a36:	4823      	ldr	r0, [pc, #140]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a38:	f7fe f876 	bl	8002b28 <HAL_TIM_PWM_Init>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8004a42:	f000 f987 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a46:	2300      	movs	r3, #0
 8004a48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a4e:	f107 0320 	add.w	r3, r7, #32
 8004a52:	4619      	mov	r1, r3
 8004a54:	481b      	ldr	r0, [pc, #108]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a56:	f7fe fee5 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8004a60:	f000 f978 	bl	8004d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a64:	2360      	movs	r3, #96	; 0x60
 8004a66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a74:	1d3b      	adds	r3, r7, #4
 8004a76:	2204      	movs	r2, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4812      	ldr	r0, [pc, #72]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a7c:	f7fe fa1a 	bl	8002eb4 <HAL_TIM_PWM_ConfigChannel>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004a86:	f000 f965 	bl	8004d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	4619      	mov	r1, r3
 8004a90:	480c      	ldr	r0, [pc, #48]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004a92:	f7fe fa0f 	bl	8002eb4 <HAL_TIM_PWM_ConfigChannel>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004a9c:	f000 f95a 	bl	8004d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004aa0:	1d3b      	adds	r3, r7, #4
 8004aa2:	220c      	movs	r2, #12
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4807      	ldr	r0, [pc, #28]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004aa8:	f7fe fa04 	bl	8002eb4 <HAL_TIM_PWM_ConfigChannel>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8004ab2:	f000 f94f 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004ab6:	4803      	ldr	r0, [pc, #12]	; (8004ac4 <MX_TIM3_Init+0xd4>)
 8004ab8:	f000 fb3e 	bl	8005138 <HAL_TIM_MspPostInit>

}
 8004abc:	bf00      	nop
 8004abe:	3728      	adds	r7, #40	; 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	200001a4 	.word	0x200001a4
 8004ac8:	40000400 	.word	0x40000400

08004acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ad2:	f107 0308 	add.w	r3, r7, #8
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	609a      	str	r2, [r3, #8]
 8004ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004aea:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <MX_TIM4_Init+0x98>)
 8004aec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8004aee:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004af0:	f242 720f 	movw	r2, #9999	; 0x270f
 8004af4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004af6:	4b1a      	ldr	r3, [pc, #104]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 239;
 8004afc:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004afe:	22ef      	movs	r2, #239	; 0xef
 8004b00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b02:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004b0e:	4814      	ldr	r0, [pc, #80]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004b10:	f7fd ffbc 	bl	8002a8c <HAL_TIM_Base_Init>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004b1a:	f000 f91b 	bl	8004d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	4619      	mov	r1, r3
 8004b2a:	480d      	ldr	r0, [pc, #52]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004b2c:	f7fe fa88 	bl	8003040 <HAL_TIM_ConfigClockSource>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004b36:	f000 f90d 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b42:	463b      	mov	r3, r7
 8004b44:	4619      	mov	r1, r3
 8004b46:	4806      	ldr	r0, [pc, #24]	; (8004b60 <MX_TIM4_Init+0x94>)
 8004b48:	f7fe fe6c 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004b52:	f000 f8ff 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000164 	.word	0x20000164
 8004b64:	40000800 	.word	0x40000800

08004b68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b6e:	463b      	mov	r3, r7
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004b76:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <MX_TIM6_Init+0x64>)
 8004b78:	4a15      	ldr	r2, [pc, #84]	; (8004bd0 <MX_TIM6_Init+0x68>)
 8004b7a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 239;
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <MX_TIM6_Init+0x64>)
 8004b7e:	22ef      	movs	r2, #239	; 0xef
 8004b80:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <MX_TIM6_Init+0x64>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <MX_TIM6_Init+0x64>)
 8004b8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <MX_TIM6_Init+0x64>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004b96:	480d      	ldr	r0, [pc, #52]	; (8004bcc <MX_TIM6_Init+0x64>)
 8004b98:	f7fd ff78 	bl	8002a8c <HAL_TIM_Base_Init>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004ba2:	f000 f8d7 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004bae:	463b      	mov	r3, r7
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4806      	ldr	r0, [pc, #24]	; (8004bcc <MX_TIM6_Init+0x64>)
 8004bb4:	f7fe fe36 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004bbe:	f000 f8c9 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000228 	.word	0x20000228
 8004bd0:	40001000 	.word	0x40001000

08004bd4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bda:	463b      	mov	r3, r7
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <MX_TIM7_Init+0x60>)
 8004be4:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <MX_TIM7_Init+0x64>)
 8004be6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <MX_TIM7_Init+0x60>)
 8004bea:	2263      	movs	r2, #99	; 0x63
 8004bec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <MX_TIM7_Init+0x60>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 239;
 8004bf4:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <MX_TIM7_Init+0x60>)
 8004bf6:	22ef      	movs	r2, #239	; 0xef
 8004bf8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <MX_TIM7_Init+0x60>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c00:	480c      	ldr	r0, [pc, #48]	; (8004c34 <MX_TIM7_Init+0x60>)
 8004c02:	f7fd ff43 	bl	8002a8c <HAL_TIM_Base_Init>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004c0c:	f000 f8a2 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c10:	2300      	movs	r3, #0
 8004c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c18:	463b      	mov	r3, r7
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4805      	ldr	r0, [pc, #20]	; (8004c34 <MX_TIM7_Init+0x60>)
 8004c1e:	f7fe fe01 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004c28:	f000 f894 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200002a8 	.word	0x200002a8
 8004c38:	40001400 	.word	0x40001400

08004c3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c42:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <MX_USART1_UART_Init+0x50>)
 8004c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c62:	220c      	movs	r2, #12
 8004c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c72:	4805      	ldr	r0, [pc, #20]	; (8004c88 <MX_USART1_UART_Init+0x4c>)
 8004c74:	f7fe fe2c 	bl	80038d0 <HAL_UART_Init>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004c7e:	f000 f869 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200001e8 	.word	0x200001e8
 8004c8c:	40013800 	.word	0x40013800

08004c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c96:	f107 0310 	add.w	r3, r7, #16
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
 8004ca0:	609a      	str	r2, [r3, #8]
 8004ca2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ca4:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004caa:	f043 0320 	orr.w	r3, r3, #32
 8004cae:	6193      	str	r3, [r2, #24]
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cbc:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004cc2:	f043 0304 	orr.w	r3, r3, #4
 8004cc6:	6193      	str	r3, [r2, #24]
 8004cc8:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004cda:	f043 0308 	orr.w	r3, r3, #8
 8004cde:	6193      	str	r3, [r2, #24]
 8004ce0:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <MX_GPIO_Init+0xb8>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15, GPIO_PIN_RESET);
 8004cec:	2200      	movs	r2, #0
 8004cee:	f248 010e 	movw	r1, #32782	; 0x800e
 8004cf2:	4816      	ldr	r0, [pc, #88]	; (8004d4c <MX_GPIO_Init+0xbc>)
 8004cf4:	f7fc fcfa 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f24f 1138 	movw	r1, #61752	; 0xf138
 8004cfe:	4814      	ldr	r0, [pc, #80]	; (8004d50 <MX_GPIO_Init+0xc0>)
 8004d00:	f7fc fcf4 	bl	80016ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8004d04:	f248 030e 	movw	r3, #32782	; 0x800e
 8004d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d12:	2302      	movs	r3, #2
 8004d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d16:	f107 0310 	add.w	r3, r7, #16
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	480b      	ldr	r0, [pc, #44]	; (8004d4c <MX_GPIO_Init+0xbc>)
 8004d1e:	f7fc fb8b 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8004d22:	f24f 1338 	movw	r3, #61752	; 0xf138
 8004d26:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d30:	2302      	movs	r3, #2
 8004d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4805      	ldr	r0, [pc, #20]	; (8004d50 <MX_GPIO_Init+0xc0>)
 8004d3c:	f7fc fb7c 	bl	8001438 <HAL_GPIO_Init>

}
 8004d40:	bf00      	nop
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40010800 	.word	0x40010800
 8004d50:	40010c00 	.word	0x40010c00

08004d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8004d58:	e7fe      	b.n	8004d58 <Error_Handler+0x4>
 8004d5a:	0000      	movs	r0, r0
 8004d5c:	0000      	movs	r0, r0
	...

08004d60 <changeSpeed>:
	float v = _steps * 30;
	return v;
}


void changeSpeed(int rpm){
 8004d60:	b590      	push	{r4, r7, lr}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	if(rpm > 120){
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b78      	cmp	r3, #120	; 0x78
 8004d6c:	dd01      	ble.n	8004d72 <changeSpeed+0x12>
		rpm = 120;
 8004d6e:	2378      	movs	r3, #120	; 0x78
 8004d70:	607b      	str	r3, [r7, #4]
	}

	if(rpm != 0){
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d025      	beq.n	8004dc4 <changeSpeed+0x64>
		int ARR = (100000/(rpm *3.33))-1;
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fb fb9b 	bl	80004b4 <__aeabi_i2d>
 8004d7e:	a316      	add	r3, pc, #88	; (adr r3, 8004dd8 <changeSpeed+0x78>)
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f7fb fc00 	bl	8000588 <__aeabi_dmul>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4623      	mov	r3, r4
 8004d90:	a113      	add	r1, pc, #76	; (adr r1, 8004de0 <changeSpeed+0x80>)
 8004d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d96:	f7fb fd21 	bl	80007dc <__aeabi_ddiv>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	4618      	mov	r0, r3
 8004da0:	4621      	mov	r1, r4
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <changeSpeed+0x88>)
 8004da8:	f7fb fa36 	bl	8000218 <__aeabi_dsub>
 8004dac:	4603      	mov	r3, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	4618      	mov	r0, r3
 8004db2:	4621      	mov	r1, r4
 8004db4:	f7fb fe98 	bl	8000ae8 <__aeabi_d2iz>
 8004db8:	4603      	mov	r3, r0
 8004dba:	60fb      	str	r3, [r7, #12]
		TIM2->ARR = ARR;
 8004dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
	_speed = rpm;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	4b08      	ldr	r3, [pc, #32]	; (8004dec <changeSpeed+0x8c>)
 8004dca:	801a      	strh	r2, [r3, #0]

}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd90      	pop	{r4, r7, pc}
 8004dd4:	f3af 8000 	nop.w
 8004dd8:	0a3d70a4 	.word	0x0a3d70a4
 8004ddc:	400aa3d7 	.word	0x400aa3d7
 8004de0:	00000000 	.word	0x00000000
 8004de4:	40f86a00 	.word	0x40f86a00
 8004de8:	3ff00000 	.word	0x3ff00000
 8004dec:	200000d0 	.word	0x200000d0

08004df0 <motorsInit>:


void motorsInit(){
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEFT_MOTOR_I1_PORT, LEFT_MOTOR_I1, GPIO_PIN_RESET);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2120      	movs	r1, #32
 8004df8:	4808      	ldr	r0, [pc, #32]	; (8004e1c <motorsInit+0x2c>)
 8004dfa:	f7fc fc77 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_I1_PORT, RIGHT_MOTOR_I1, GPIO_PIN_RESET);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e04:	4805      	ldr	r0, [pc, #20]	; (8004e1c <motorsInit+0x2c>)
 8004e06:	f7fc fc71 	bl	80016ec <HAL_GPIO_WritePin>
	_steps = 0;
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <motorsInit+0x30>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	801a      	strh	r2, [r3, #0]
	_v = 0;
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <motorsInit+0x34>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	801a      	strh	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40010c00 	.word	0x40010c00
 8004e20:	200000c8 	.word	0x200000c8
 8004e24:	200000f8 	.word	0x200000f8

08004e28 <stepBoth>:
		HAL_GPIO_WritePin(LEFT_MOTOR_STEP_PORT, LEFT_MOTOR_STEP, GPIO_PIN_RESET);
	}

}

void stepBoth(direction dir){
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
	if(dir == FORWARD){
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10c      	bne.n	8004e52 <stepBoth+0x2a>
		HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_PORT, RIGHT_MOTOR_DIR, GPIO_PIN_SET);
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e3e:	481b      	ldr	r0, [pc, #108]	; (8004eac <stepBoth+0x84>)
 8004e40:	f7fc fc54 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_MOTOR_DIR_PORT, LEFT_MOTOR_DIR, GPIO_PIN_RESET);
 8004e44:	2200      	movs	r2, #0
 8004e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e4a:	4819      	ldr	r0, [pc, #100]	; (8004eb0 <stepBoth+0x88>)
 8004e4c:	f7fc fc4e 	bl	80016ec <HAL_GPIO_WritePin>
 8004e50:	e00b      	b.n	8004e6a <stepBoth+0x42>
	}
	else{
		HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_PORT, RIGHT_MOTOR_DIR, GPIO_PIN_RESET);
 8004e52:	2200      	movs	r2, #0
 8004e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e58:	4814      	ldr	r0, [pc, #80]	; (8004eac <stepBoth+0x84>)
 8004e5a:	f7fc fc47 	bl	80016ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_MOTOR_DIR_PORT, LEFT_MOTOR_DIR, GPIO_PIN_SET);
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e64:	4812      	ldr	r0, [pc, #72]	; (8004eb0 <stepBoth+0x88>)
 8004e66:	f7fc fc41 	bl	80016ec <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(RIGHT_MOTOR_STEP_PORT, RIGHT_MOTOR_STEP, GPIO_PIN_SET);
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e70:	480e      	ldr	r0, [pc, #56]	; (8004eac <stepBoth+0x84>)
 8004e72:	f7fc fc3b 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_STEP_PORT, LEFT_MOTOR_STEP, GPIO_PIN_SET);
 8004e76:	2201      	movs	r2, #1
 8004e78:	2108      	movs	r1, #8
 8004e7a:	480c      	ldr	r0, [pc, #48]	; (8004eac <stepBoth+0x84>)
 8004e7c:	f7fc fc36 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_STEP_PORT, LEFT_MOTOR_STEP, GPIO_PIN_RESET);
 8004e80:	2200      	movs	r2, #0
 8004e82:	2108      	movs	r1, #8
 8004e84:	4809      	ldr	r0, [pc, #36]	; (8004eac <stepBoth+0x84>)
 8004e86:	f7fc fc31 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_STEP_PORT, RIGHT_MOTOR_STEP, GPIO_PIN_RESET);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e90:	4806      	ldr	r0, [pc, #24]	; (8004eac <stepBoth+0x84>)
 8004e92:	f7fc fc2b 	bl	80016ec <HAL_GPIO_WritePin>

	_steps++;
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <stepBoth+0x8c>)
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <stepBoth+0x8c>)
 8004ea0:	801a      	strh	r2, [r3, #0]
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40010c00 	.word	0x40010c00
 8004eb0:	40010800 	.word	0x40010800
 8004eb4:	200000c8 	.word	0x200000c8

08004eb8 <moveRobot>:


void moveRobot(uint16_t speed, direction dir){
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460a      	mov	r2, r1
 8004ec2:	80fb      	strh	r3, [r7, #6]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	717b      	strb	r3, [r7, #5]
	_steps++;
 8004ec8:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <moveRobot+0x58>)
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <moveRobot+0x58>)
 8004ed2:	801a      	strh	r2, [r3, #0]
	if(_speed != previousSpeed){
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <moveRobot+0x5c>)
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <moveRobot+0x60>)
 8004ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d005      	beq.n	8004ef2 <moveRobot+0x3a>
	changeSpeed(_speed);
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <moveRobot+0x5c>)
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff ff37 	bl	8004d60 <changeSpeed>
	}
	//stepSingle(RIGHT,dir);
	//stepSingle(LEFT,dir);
	stepBoth(dir);
 8004ef2:	797b      	ldrb	r3, [r7, #5]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ff97 	bl	8004e28 <stepBoth>
	previousSpeed = _speed;
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <moveRobot+0x5c>)
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	b21a      	sxth	r2, r3
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <moveRobot+0x60>)
 8004f04:	801a      	strh	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200000c8 	.word	0x200000c8
 8004f14:	200000d0 	.word	0x200000d0
 8004f18:	200000e4 	.word	0x200000e4

08004f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <HAL_MspInit+0x5c>)
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <HAL_MspInit+0x5c>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6193      	str	r3, [r2, #24]
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_MspInit+0x5c>)
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <HAL_MspInit+0x5c>)
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4a0e      	ldr	r2, [pc, #56]	; (8004f78 <HAL_MspInit+0x5c>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	61d3      	str	r3, [r2, #28]
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_MspInit+0x5c>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_MspInit+0x60>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <HAL_MspInit+0x60>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40010000 	.word	0x40010000

08004f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f88:	f107 0310 	add.w	r3, r7, #16
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <HAL_I2C_MspInit+0x70>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d123      	bne.n	8004fe8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fa0:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <HAL_I2C_MspInit+0x74>)
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <HAL_I2C_MspInit+0x74>)
 8004fa6:	f043 0308 	orr.w	r3, r3, #8
 8004faa:	6193      	str	r3, [r2, #24]
 8004fac:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <HAL_I2C_MspInit+0x74>)
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fb8:	23c0      	movs	r3, #192	; 0xc0
 8004fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fbc:	2312      	movs	r3, #18
 8004fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc4:	f107 0310 	add.w	r3, r7, #16
 8004fc8:	4619      	mov	r1, r3
 8004fca:	480b      	ldr	r0, [pc, #44]	; (8004ff8 <HAL_I2C_MspInit+0x78>)
 8004fcc:	f7fc fa34 	bl	8001438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_I2C_MspInit+0x74>)
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <HAL_I2C_MspInit+0x74>)
 8004fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fda:	61d3      	str	r3, [r2, #28]
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_I2C_MspInit+0x74>)
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004fe8:	bf00      	nop
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40005400 	.word	0x40005400
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40010c00 	.word	0x40010c00

08004ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d114      	bne.n	8005038 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800500e:	4b33      	ldr	r3, [pc, #204]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	4a32      	ldr	r2, [pc, #200]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	61d3      	str	r3, [r2, #28]
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005026:	2200      	movs	r2, #0
 8005028:	2100      	movs	r1, #0
 800502a:	201c      	movs	r0, #28
 800502c:	f7fc f9cd 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005030:	201c      	movs	r0, #28
 8005032:	f7fc f9e6 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005036:	e04c      	b.n	80050d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <HAL_TIM_Base_MspInit+0xe4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d114      	bne.n	800506c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005042:	4b26      	ldr	r3, [pc, #152]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	4a25      	ldr	r2, [pc, #148]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	61d3      	str	r3, [r2, #28]
 800504e:	4b23      	ldr	r3, [pc, #140]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800505a:	2200      	movs	r2, #0
 800505c:	2100      	movs	r1, #0
 800505e:	201e      	movs	r0, #30
 8005060:	f7fc f9b3 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005064:	201e      	movs	r0, #30
 8005066:	f7fc f9cc 	bl	8001402 <HAL_NVIC_EnableIRQ>
}
 800506a:	e032      	b.n	80050d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1c      	ldr	r2, [pc, #112]	; (80050e4 <HAL_TIM_Base_MspInit+0xe8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d114      	bne.n	80050a0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005076:	4b19      	ldr	r3, [pc, #100]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 800507c:	f043 0310 	orr.w	r3, r3, #16
 8005080:	61d3      	str	r3, [r2, #28]
 8005082:	4b16      	ldr	r3, [pc, #88]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800508e:	2200      	movs	r2, #0
 8005090:	2100      	movs	r1, #0
 8005092:	2036      	movs	r0, #54	; 0x36
 8005094:	f7fc f999 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005098:	2036      	movs	r0, #54	; 0x36
 800509a:	f7fc f9b2 	bl	8001402 <HAL_NVIC_EnableIRQ>
}
 800509e:	e018      	b.n	80050d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <HAL_TIM_Base_MspInit+0xec>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d113      	bne.n	80050d2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80050aa:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	4a0b      	ldr	r2, [pc, #44]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 80050b0:	f043 0320 	orr.w	r3, r3, #32
 80050b4:	61d3      	str	r3, [r2, #28]
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <HAL_TIM_Base_MspInit+0xe0>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2100      	movs	r1, #0
 80050c6:	2037      	movs	r0, #55	; 0x37
 80050c8:	f7fc f97f 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80050cc:	2037      	movs	r0, #55	; 0x37
 80050ce:	f7fc f998 	bl	8001402 <HAL_NVIC_EnableIRQ>
}
 80050d2:	bf00      	nop
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40000800 	.word	0x40000800
 80050e4:	40001000 	.word	0x40001000
 80050e8:	40001400 	.word	0x40001400

080050ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <HAL_TIM_PWM_MspInit+0x44>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d113      	bne.n	8005126 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050fe:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <HAL_TIM_PWM_MspInit+0x48>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	4a0c      	ldr	r2, [pc, #48]	; (8005134 <HAL_TIM_PWM_MspInit+0x48>)
 8005104:	f043 0302 	orr.w	r3, r3, #2
 8005108:	61d3      	str	r3, [r2, #28]
 800510a:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <HAL_TIM_PWM_MspInit+0x48>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005116:	2200      	movs	r2, #0
 8005118:	2100      	movs	r1, #0
 800511a:	201d      	movs	r0, #29
 800511c:	f7fc f955 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005120:	201d      	movs	r0, #29
 8005122:	f7fc f96e 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40000400 	.word	0x40000400
 8005134:	40021000 	.word	0x40021000

08005138 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005140:	f107 0310 	add.w	r3, r7, #16
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <HAL_TIM_MspPostInit+0x88>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d12f      	bne.n	80051b8 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <HAL_TIM_MspPostInit+0x8c>)
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <HAL_TIM_MspPostInit+0x8c>)
 800515e:	f043 0304 	orr.w	r3, r3, #4
 8005162:	6193      	str	r3, [r2, #24]
 8005164:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <HAL_TIM_MspPostInit+0x8c>)
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005170:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <HAL_TIM_MspPostInit+0x8c>)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <HAL_TIM_MspPostInit+0x8c>)
 8005176:	f043 0308 	orr.w	r3, r3, #8
 800517a:	6193      	str	r3, [r2, #24]
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <HAL_TIM_MspPostInit+0x8c>)
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518c:	2302      	movs	r3, #2
 800518e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005190:	2302      	movs	r3, #2
 8005192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005194:	f107 0310 	add.w	r3, r7, #16
 8005198:	4619      	mov	r1, r3
 800519a:	480b      	ldr	r0, [pc, #44]	; (80051c8 <HAL_TIM_MspPostInit+0x90>)
 800519c:	f7fc f94c 	bl	8001438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80051a0:	2303      	movs	r3, #3
 80051a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a4:	2302      	movs	r3, #2
 80051a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a8:	2302      	movs	r3, #2
 80051aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ac:	f107 0310 	add.w	r3, r7, #16
 80051b0:	4619      	mov	r1, r3
 80051b2:	4806      	ldr	r0, [pc, #24]	; (80051cc <HAL_TIM_MspPostInit+0x94>)
 80051b4:	f7fc f940 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80051b8:	bf00      	nop
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40010800 	.word	0x40010800
 80051cc:	40010c00 	.word	0x40010c00

080051d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d8:	f107 0310 	add.w	r3, r7, #16
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1c      	ldr	r2, [pc, #112]	; (800525c <HAL_UART_MspInit+0x8c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d131      	bne.n	8005254 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <HAL_UART_MspInit+0x90>)
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <HAL_UART_MspInit+0x90>)
 80051f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051fa:	6193      	str	r3, [r2, #24]
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <HAL_UART_MspInit+0x90>)
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <HAL_UART_MspInit+0x90>)
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	4a14      	ldr	r2, [pc, #80]	; (8005260 <HAL_UART_MspInit+0x90>)
 800520e:	f043 0304 	orr.w	r3, r3, #4
 8005212:	6193      	str	r3, [r2, #24]
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <HAL_UART_MspInit+0x90>)
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005224:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005226:	2302      	movs	r3, #2
 8005228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800522a:	2303      	movs	r3, #3
 800522c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800522e:	f107 0310 	add.w	r3, r7, #16
 8005232:	4619      	mov	r1, r3
 8005234:	480b      	ldr	r0, [pc, #44]	; (8005264 <HAL_UART_MspInit+0x94>)
 8005236:	f7fc f8ff 	bl	8001438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800523a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800523e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005248:	f107 0310 	add.w	r3, r7, #16
 800524c:	4619      	mov	r1, r3
 800524e:	4805      	ldr	r0, [pc, #20]	; (8005264 <HAL_UART_MspInit+0x94>)
 8005250:	f7fc f8f2 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005254:	bf00      	nop
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40013800 	.word	0x40013800
 8005260:	40021000 	.word	0x40021000
 8005264:	40010800 	.word	0x40010800

08005268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005278:	e7fe      	b.n	8005278 <HardFault_Handler+0x4>

0800527a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800527e:	e7fe      	b.n	800527e <MemManage_Handler+0x4>

08005280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005284:	e7fe      	b.n	8005284 <BusFault_Handler+0x4>

08005286 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800528a:	e7fe      	b.n	800528a <UsageFault_Handler+0x4>

0800528c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005290:	bf00      	nop
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052b4:	f7fb ff52 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052b8:	bf00      	nop
 80052ba:	bd80      	pop	{r7, pc}

080052bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052c0:	4802      	ldr	r0, [pc, #8]	; (80052cc <TIM2_IRQHandler+0x10>)
 80052c2:	f7fd fcef 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000268 	.word	0x20000268

080052d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80052d4:	4802      	ldr	r0, [pc, #8]	; (80052e0 <TIM3_IRQHandler+0x10>)
 80052d6:	f7fd fce5 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	200001a4 	.word	0x200001a4

080052e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80052e8:	4802      	ldr	r0, [pc, #8]	; (80052f4 <TIM4_IRQHandler+0x10>)
 80052ea:	f7fd fcdb 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000164 	.word	0x20000164

080052f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80052fc:	4802      	ldr	r0, [pc, #8]	; (8005308 <TIM6_DAC_IRQHandler+0x10>)
 80052fe:	f7fd fcd1 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000228 	.word	0x20000228

0800530c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005310:	4802      	ldr	r0, [pc, #8]	; (800531c <TIM7_IRQHandler+0x10>)
 8005312:	f7fd fcc7 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200002a8 	.word	0x200002a8

08005320 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005324:	4b17      	ldr	r3, [pc, #92]	; (8005384 <SystemInit+0x64>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a16      	ldr	r2, [pc, #88]	; (8005384 <SystemInit+0x64>)
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <SystemInit+0x64>)
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	4913      	ldr	r1, [pc, #76]	; (8005384 <SystemInit+0x64>)
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <SystemInit+0x68>)
 8005338:	4013      	ands	r3, r2
 800533a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <SystemInit+0x64>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a10      	ldr	r2, [pc, #64]	; (8005384 <SystemInit+0x64>)
 8005342:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800534c:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <SystemInit+0x64>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <SystemInit+0x64>)
 8005352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005356:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <SystemInit+0x64>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4a09      	ldr	r2, [pc, #36]	; (8005384 <SystemInit+0x64>)
 800535e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005362:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005364:	4b07      	ldr	r3, [pc, #28]	; (8005384 <SystemInit+0x64>)
 8005366:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800536a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <SystemInit+0x64>)
 800536e:	2200      	movs	r2, #0
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <SystemInit+0x6c>)
 8005374:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005378:	609a      	str	r2, [r3, #8]
#endif 
}
 800537a:	bf00      	nop
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
 8005388:	f8ff0000 	.word	0xf8ff0000
 800538c:	e000ed00 	.word	0xe000ed00

08005390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005390:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005392:	e003      	b.n	800539c <LoopCopyDataInit>

08005394 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005396:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005398:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800539a:	3104      	adds	r1, #4

0800539c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800539c:	480a      	ldr	r0, [pc, #40]	; (80053c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800539e:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80053a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80053a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80053a4:	d3f6      	bcc.n	8005394 <CopyDataInit>
  ldr r2, =_sbss
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80053a8:	e002      	b.n	80053b0 <LoopFillZerobss>

080053aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80053aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80053ac:	f842 3b04 	str.w	r3, [r2], #4

080053b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80053b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80053b4:	d3f9      	bcc.n	80053aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80053b6:	f7ff ffb3 	bl	8005320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053ba:	f000 f815 	bl	80053e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80053be:	f7ff f9e1 	bl	8004784 <main>
  bx lr
 80053c2:	4770      	bx	lr
  ldr r3, =_sidata
 80053c4:	08005bc8 	.word	0x08005bc8
  ldr r0, =_sdata
 80053c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80053cc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80053d0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80053d4:	200002e8 	.word	0x200002e8

080053d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80053d8:	e7fe      	b.n	80053d8 <ADC1_IRQHandler>
	...

080053dc <__errno>:
 80053dc:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <__errno+0x8>)
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	2000000c 	.word	0x2000000c

080053e8 <__libc_init_array>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	2500      	movs	r5, #0
 80053ec:	4e0c      	ldr	r6, [pc, #48]	; (8005420 <__libc_init_array+0x38>)
 80053ee:	4c0d      	ldr	r4, [pc, #52]	; (8005424 <__libc_init_array+0x3c>)
 80053f0:	1ba4      	subs	r4, r4, r6
 80053f2:	10a4      	asrs	r4, r4, #2
 80053f4:	42a5      	cmp	r5, r4
 80053f6:	d109      	bne.n	800540c <__libc_init_array+0x24>
 80053f8:	f000 fb96 	bl	8005b28 <_init>
 80053fc:	2500      	movs	r5, #0
 80053fe:	4e0a      	ldr	r6, [pc, #40]	; (8005428 <__libc_init_array+0x40>)
 8005400:	4c0a      	ldr	r4, [pc, #40]	; (800542c <__libc_init_array+0x44>)
 8005402:	1ba4      	subs	r4, r4, r6
 8005404:	10a4      	asrs	r4, r4, #2
 8005406:	42a5      	cmp	r5, r4
 8005408:	d105      	bne.n	8005416 <__libc_init_array+0x2e>
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005410:	4798      	blx	r3
 8005412:	3501      	adds	r5, #1
 8005414:	e7ee      	b.n	80053f4 <__libc_init_array+0xc>
 8005416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800541a:	4798      	blx	r3
 800541c:	3501      	adds	r5, #1
 800541e:	e7f2      	b.n	8005406 <__libc_init_array+0x1e>
 8005420:	08005bc0 	.word	0x08005bc0
 8005424:	08005bc0 	.word	0x08005bc0
 8005428:	08005bc0 	.word	0x08005bc0
 800542c:	08005bc4 	.word	0x08005bc4

08005430 <memset>:
 8005430:	4603      	mov	r3, r0
 8005432:	4402      	add	r2, r0
 8005434:	4293      	cmp	r3, r2
 8005436:	d100      	bne.n	800543a <memset+0xa>
 8005438:	4770      	bx	lr
 800543a:	f803 1b01 	strb.w	r1, [r3], #1
 800543e:	e7f9      	b.n	8005434 <memset+0x4>

08005440 <atan2>:
 8005440:	f000 b856 	b.w	80054f0 <__ieee754_atan2>

08005444 <sqrt>:
 8005444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005448:	b08b      	sub	sp, #44	; 0x2c
 800544a:	4604      	mov	r4, r0
 800544c:	460d      	mov	r5, r1
 800544e:	f000 f92d 	bl	80056ac <__ieee754_sqrt>
 8005452:	4b24      	ldr	r3, [pc, #144]	; (80054e4 <sqrt+0xa0>)
 8005454:	4680      	mov	r8, r0
 8005456:	f993 a000 	ldrsb.w	sl, [r3]
 800545a:	4689      	mov	r9, r1
 800545c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8005460:	d02b      	beq.n	80054ba <sqrt+0x76>
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	4620      	mov	r0, r4
 8005468:	4629      	mov	r1, r5
 800546a:	f7fb fb27 	bl	8000abc <__aeabi_dcmpun>
 800546e:	4683      	mov	fp, r0
 8005470:	bb18      	cbnz	r0, 80054ba <sqrt+0x76>
 8005472:	2600      	movs	r6, #0
 8005474:	2700      	movs	r7, #0
 8005476:	4632      	mov	r2, r6
 8005478:	463b      	mov	r3, r7
 800547a:	4620      	mov	r0, r4
 800547c:	4629      	mov	r1, r5
 800547e:	f7fb faf5 	bl	8000a6c <__aeabi_dcmplt>
 8005482:	b1d0      	cbz	r0, 80054ba <sqrt+0x76>
 8005484:	2301      	movs	r3, #1
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	4b17      	ldr	r3, [pc, #92]	; (80054e8 <sqrt+0xa4>)
 800548a:	f8cd b020 	str.w	fp, [sp, #32]
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005494:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005498:	f1ba 0f00 	cmp.w	sl, #0
 800549c:	d112      	bne.n	80054c4 <sqrt+0x80>
 800549e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80054a2:	4668      	mov	r0, sp
 80054a4:	f000 fb3e 	bl	8005b24 <matherr>
 80054a8:	b1b8      	cbz	r0, 80054da <sqrt+0x96>
 80054aa:	9b08      	ldr	r3, [sp, #32]
 80054ac:	b11b      	cbz	r3, 80054b6 <sqrt+0x72>
 80054ae:	f7ff ff95 	bl	80053dc <__errno>
 80054b2:	9b08      	ldr	r3, [sp, #32]
 80054b4:	6003      	str	r3, [r0, #0]
 80054b6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	b00b      	add	sp, #44	; 0x2c
 80054c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c4:	4632      	mov	r2, r6
 80054c6:	463b      	mov	r3, r7
 80054c8:	4630      	mov	r0, r6
 80054ca:	4639      	mov	r1, r7
 80054cc:	f7fb f986 	bl	80007dc <__aeabi_ddiv>
 80054d0:	f1ba 0f02 	cmp.w	sl, #2
 80054d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054d8:	d1e3      	bne.n	80054a2 <sqrt+0x5e>
 80054da:	f7ff ff7f 	bl	80053dc <__errno>
 80054de:	2321      	movs	r3, #33	; 0x21
 80054e0:	6003      	str	r3, [r0, #0]
 80054e2:	e7e2      	b.n	80054aa <sqrt+0x66>
 80054e4:	20000070 	.word	0x20000070
 80054e8:	08005b78 	.word	0x08005b78
 80054ec:	00000000 	.word	0x00000000

080054f0 <__ieee754_atan2>:
 80054f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	4256      	negs	r6, r2
 80054f6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80054fa:	4316      	orrs	r6, r2
 80054fc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80056a8 <__ieee754_atan2+0x1b8>
 8005500:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8005504:	454e      	cmp	r6, r9
 8005506:	4604      	mov	r4, r0
 8005508:	460d      	mov	r5, r1
 800550a:	469e      	mov	lr, r3
 800550c:	d808      	bhi.n	8005520 <__ieee754_atan2+0x30>
 800550e:	4246      	negs	r6, r0
 8005510:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005514:	4306      	orrs	r6, r0
 8005516:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800551a:	454e      	cmp	r6, r9
 800551c:	4688      	mov	r8, r1
 800551e:	d906      	bls.n	800552e <__ieee754_atan2+0x3e>
 8005520:	4620      	mov	r0, r4
 8005522:	4629      	mov	r1, r5
 8005524:	f7fa fe7a 	bl	800021c <__adddf3>
 8005528:	4604      	mov	r4, r0
 800552a:	460d      	mov	r5, r1
 800552c:	e030      	b.n	8005590 <__ieee754_atan2+0xa0>
 800552e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8005532:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005536:	4316      	orrs	r6, r2
 8005538:	d103      	bne.n	8005542 <__ieee754_atan2+0x52>
 800553a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553e:	f000 b963 	b.w	8005808 <atan>
 8005542:	179e      	asrs	r6, r3, #30
 8005544:	f006 0602 	and.w	r6, r6, #2
 8005548:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800554c:	ea57 0100 	orrs.w	r1, r7, r0
 8005550:	d107      	bne.n	8005562 <__ieee754_atan2+0x72>
 8005552:	2e02      	cmp	r6, #2
 8005554:	d079      	beq.n	800564a <__ieee754_atan2+0x15a>
 8005556:	2e03      	cmp	r6, #3
 8005558:	d11a      	bne.n	8005590 <__ieee754_atan2+0xa0>
 800555a:	a541      	add	r5, pc, #260	; (adr r5, 8005660 <__ieee754_atan2+0x170>)
 800555c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005560:	e016      	b.n	8005590 <__ieee754_atan2+0xa0>
 8005562:	ea5c 0102 	orrs.w	r1, ip, r2
 8005566:	d106      	bne.n	8005576 <__ieee754_atan2+0x86>
 8005568:	f1b8 0f00 	cmp.w	r8, #0
 800556c:	da71      	bge.n	8005652 <__ieee754_atan2+0x162>
 800556e:	a53e      	add	r5, pc, #248	; (adr r5, 8005668 <__ieee754_atan2+0x178>)
 8005570:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005574:	e00c      	b.n	8005590 <__ieee754_atan2+0xa0>
 8005576:	45cc      	cmp	ip, r9
 8005578:	d123      	bne.n	80055c2 <__ieee754_atan2+0xd2>
 800557a:	4567      	cmp	r7, ip
 800557c:	d114      	bne.n	80055a8 <__ieee754_atan2+0xb8>
 800557e:	2e02      	cmp	r6, #2
 8005580:	d00a      	beq.n	8005598 <__ieee754_atan2+0xa8>
 8005582:	2e03      	cmp	r6, #3
 8005584:	d00c      	beq.n	80055a0 <__ieee754_atan2+0xb0>
 8005586:	2e01      	cmp	r6, #1
 8005588:	d15b      	bne.n	8005642 <__ieee754_atan2+0x152>
 800558a:	a539      	add	r5, pc, #228	; (adr r5, 8005670 <__ieee754_atan2+0x180>)
 800558c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005590:	4620      	mov	r0, r4
 8005592:	4629      	mov	r1, r5
 8005594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005598:	a537      	add	r5, pc, #220	; (adr r5, 8005678 <__ieee754_atan2+0x188>)
 800559a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800559e:	e7f7      	b.n	8005590 <__ieee754_atan2+0xa0>
 80055a0:	a537      	add	r5, pc, #220	; (adr r5, 8005680 <__ieee754_atan2+0x190>)
 80055a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80055a6:	e7f3      	b.n	8005590 <__ieee754_atan2+0xa0>
 80055a8:	2e02      	cmp	r6, #2
 80055aa:	d04e      	beq.n	800564a <__ieee754_atan2+0x15a>
 80055ac:	2e03      	cmp	r6, #3
 80055ae:	d0d4      	beq.n	800555a <__ieee754_atan2+0x6a>
 80055b0:	2e01      	cmp	r6, #1
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	d102      	bne.n	80055be <__ieee754_atan2+0xce>
 80055b8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80055bc:	e7e8      	b.n	8005590 <__ieee754_atan2+0xa0>
 80055be:	2500      	movs	r5, #0
 80055c0:	e7e6      	b.n	8005590 <__ieee754_atan2+0xa0>
 80055c2:	454f      	cmp	r7, r9
 80055c4:	d0d0      	beq.n	8005568 <__ieee754_atan2+0x78>
 80055c6:	eba7 070c 	sub.w	r7, r7, ip
 80055ca:	153f      	asrs	r7, r7, #20
 80055cc:	2f3c      	cmp	r7, #60	; 0x3c
 80055ce:	dc1e      	bgt.n	800560e <__ieee754_atan2+0x11e>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	da01      	bge.n	80055d8 <__ieee754_atan2+0xe8>
 80055d4:	373c      	adds	r7, #60	; 0x3c
 80055d6:	db1e      	blt.n	8005616 <__ieee754_atan2+0x126>
 80055d8:	4620      	mov	r0, r4
 80055da:	4629      	mov	r1, r5
 80055dc:	f7fb f8fe 	bl	80007dc <__aeabi_ddiv>
 80055e0:	f000 fa9c 	bl	8005b1c <fabs>
 80055e4:	f000 f910 	bl	8005808 <atan>
 80055e8:	4604      	mov	r4, r0
 80055ea:	460d      	mov	r5, r1
 80055ec:	2e01      	cmp	r6, #1
 80055ee:	d015      	beq.n	800561c <__ieee754_atan2+0x12c>
 80055f0:	2e02      	cmp	r6, #2
 80055f2:	d017      	beq.n	8005624 <__ieee754_atan2+0x134>
 80055f4:	2e00      	cmp	r6, #0
 80055f6:	d0cb      	beq.n	8005590 <__ieee754_atan2+0xa0>
 80055f8:	a323      	add	r3, pc, #140	; (adr r3, 8005688 <__ieee754_atan2+0x198>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fa fe09 	bl	8000218 <__aeabi_dsub>
 8005606:	a322      	add	r3, pc, #136	; (adr r3, 8005690 <__ieee754_atan2+0x1a0>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	e016      	b.n	800563c <__ieee754_atan2+0x14c>
 800560e:	a522      	add	r5, pc, #136	; (adr r5, 8005698 <__ieee754_atan2+0x1a8>)
 8005610:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005614:	e7ea      	b.n	80055ec <__ieee754_atan2+0xfc>
 8005616:	2400      	movs	r4, #0
 8005618:	2500      	movs	r5, #0
 800561a:	e7e7      	b.n	80055ec <__ieee754_atan2+0xfc>
 800561c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005620:	461d      	mov	r5, r3
 8005622:	e7b5      	b.n	8005590 <__ieee754_atan2+0xa0>
 8005624:	a318      	add	r3, pc, #96	; (adr r3, 8005688 <__ieee754_atan2+0x198>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	4620      	mov	r0, r4
 800562c:	4629      	mov	r1, r5
 800562e:	f7fa fdf3 	bl	8000218 <__aeabi_dsub>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	a116      	add	r1, pc, #88	; (adr r1, 8005690 <__ieee754_atan2+0x1a0>)
 8005638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800563c:	f7fa fdec 	bl	8000218 <__aeabi_dsub>
 8005640:	e772      	b.n	8005528 <__ieee754_atan2+0x38>
 8005642:	a517      	add	r5, pc, #92	; (adr r5, 80056a0 <__ieee754_atan2+0x1b0>)
 8005644:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005648:	e7a2      	b.n	8005590 <__ieee754_atan2+0xa0>
 800564a:	a511      	add	r5, pc, #68	; (adr r5, 8005690 <__ieee754_atan2+0x1a0>)
 800564c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005650:	e79e      	b.n	8005590 <__ieee754_atan2+0xa0>
 8005652:	a511      	add	r5, pc, #68	; (adr r5, 8005698 <__ieee754_atan2+0x1a8>)
 8005654:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005658:	e79a      	b.n	8005590 <__ieee754_atan2+0xa0>
 800565a:	bf00      	nop
 800565c:	f3af 8000 	nop.w
 8005660:	54442d18 	.word	0x54442d18
 8005664:	c00921fb 	.word	0xc00921fb
 8005668:	54442d18 	.word	0x54442d18
 800566c:	bff921fb 	.word	0xbff921fb
 8005670:	54442d18 	.word	0x54442d18
 8005674:	bfe921fb 	.word	0xbfe921fb
 8005678:	7f3321d2 	.word	0x7f3321d2
 800567c:	4002d97c 	.word	0x4002d97c
 8005680:	7f3321d2 	.word	0x7f3321d2
 8005684:	c002d97c 	.word	0xc002d97c
 8005688:	33145c07 	.word	0x33145c07
 800568c:	3ca1a626 	.word	0x3ca1a626
 8005690:	54442d18 	.word	0x54442d18
 8005694:	400921fb 	.word	0x400921fb
 8005698:	54442d18 	.word	0x54442d18
 800569c:	3ff921fb 	.word	0x3ff921fb
 80056a0:	54442d18 	.word	0x54442d18
 80056a4:	3fe921fb 	.word	0x3fe921fb
 80056a8:	7ff00000 	.word	0x7ff00000

080056ac <__ieee754_sqrt>:
 80056ac:	4b54      	ldr	r3, [pc, #336]	; (8005800 <__ieee754_sqrt+0x154>)
 80056ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b2:	438b      	bics	r3, r1
 80056b4:	4606      	mov	r6, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	460a      	mov	r2, r1
 80056ba:	460c      	mov	r4, r1
 80056bc:	d10f      	bne.n	80056de <__ieee754_sqrt+0x32>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	f7fa ff61 	bl	8000588 <__aeabi_dmul>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4630      	mov	r0, r6
 80056cc:	4629      	mov	r1, r5
 80056ce:	f7fa fda5 	bl	800021c <__adddf3>
 80056d2:	4606      	mov	r6, r0
 80056d4:	460d      	mov	r5, r1
 80056d6:	4630      	mov	r0, r6
 80056d8:	4629      	mov	r1, r5
 80056da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056de:	2900      	cmp	r1, #0
 80056e0:	4607      	mov	r7, r0
 80056e2:	4603      	mov	r3, r0
 80056e4:	dc0e      	bgt.n	8005704 <__ieee754_sqrt+0x58>
 80056e6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80056ea:	ea5c 0707 	orrs.w	r7, ip, r7
 80056ee:	d0f2      	beq.n	80056d6 <__ieee754_sqrt+0x2a>
 80056f0:	b141      	cbz	r1, 8005704 <__ieee754_sqrt+0x58>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	f7fa fd8f 	bl	8000218 <__aeabi_dsub>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	f7fb f86d 	bl	80007dc <__aeabi_ddiv>
 8005702:	e7e6      	b.n	80056d2 <__ieee754_sqrt+0x26>
 8005704:	1512      	asrs	r2, r2, #20
 8005706:	d074      	beq.n	80057f2 <__ieee754_sqrt+0x146>
 8005708:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800570c:	07d5      	lsls	r5, r2, #31
 800570e:	f04f 0500 	mov.w	r5, #0
 8005712:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005716:	bf48      	it	mi
 8005718:	0fd9      	lsrmi	r1, r3, #31
 800571a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800571e:	bf44      	itt	mi
 8005720:	005b      	lslmi	r3, r3, #1
 8005722:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005726:	1051      	asrs	r1, r2, #1
 8005728:	0fda      	lsrs	r2, r3, #31
 800572a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800572e:	4628      	mov	r0, r5
 8005730:	2216      	movs	r2, #22
 8005732:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	1987      	adds	r7, r0, r6
 800573a:	42a7      	cmp	r7, r4
 800573c:	bfde      	ittt	le
 800573e:	19b8      	addle	r0, r7, r6
 8005740:	1be4      	suble	r4, r4, r7
 8005742:	19ad      	addle	r5, r5, r6
 8005744:	0fdf      	lsrs	r7, r3, #31
 8005746:	3a01      	subs	r2, #1
 8005748:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800574c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005750:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005754:	d1f0      	bne.n	8005738 <__ieee754_sqrt+0x8c>
 8005756:	f04f 0c20 	mov.w	ip, #32
 800575a:	4696      	mov	lr, r2
 800575c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005760:	4284      	cmp	r4, r0
 8005762:	eb06 070e 	add.w	r7, r6, lr
 8005766:	dc02      	bgt.n	800576e <__ieee754_sqrt+0xc2>
 8005768:	d112      	bne.n	8005790 <__ieee754_sqrt+0xe4>
 800576a:	429f      	cmp	r7, r3
 800576c:	d810      	bhi.n	8005790 <__ieee754_sqrt+0xe4>
 800576e:	2f00      	cmp	r7, #0
 8005770:	eb07 0e06 	add.w	lr, r7, r6
 8005774:	da42      	bge.n	80057fc <__ieee754_sqrt+0x150>
 8005776:	f1be 0f00 	cmp.w	lr, #0
 800577a:	db3f      	blt.n	80057fc <__ieee754_sqrt+0x150>
 800577c:	f100 0801 	add.w	r8, r0, #1
 8005780:	1a24      	subs	r4, r4, r0
 8005782:	4640      	mov	r0, r8
 8005784:	429f      	cmp	r7, r3
 8005786:	bf88      	it	hi
 8005788:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800578c:	1bdb      	subs	r3, r3, r7
 800578e:	4432      	add	r2, r6
 8005790:	0064      	lsls	r4, r4, #1
 8005792:	f1bc 0c01 	subs.w	ip, ip, #1
 8005796:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800579a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800579e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057a2:	d1dd      	bne.n	8005760 <__ieee754_sqrt+0xb4>
 80057a4:	4323      	orrs	r3, r4
 80057a6:	d006      	beq.n	80057b6 <__ieee754_sqrt+0x10a>
 80057a8:	1c54      	adds	r4, r2, #1
 80057aa:	bf0b      	itete	eq
 80057ac:	4662      	moveq	r2, ip
 80057ae:	3201      	addne	r2, #1
 80057b0:	3501      	addeq	r5, #1
 80057b2:	f022 0201 	bicne.w	r2, r2, #1
 80057b6:	106b      	asrs	r3, r5, #1
 80057b8:	0852      	lsrs	r2, r2, #1
 80057ba:	07e8      	lsls	r0, r5, #31
 80057bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80057c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80057c4:	bf48      	it	mi
 80057c6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80057ca:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80057ce:	4616      	mov	r6, r2
 80057d0:	e781      	b.n	80056d6 <__ieee754_sqrt+0x2a>
 80057d2:	0adc      	lsrs	r4, r3, #11
 80057d4:	3915      	subs	r1, #21
 80057d6:	055b      	lsls	r3, r3, #21
 80057d8:	2c00      	cmp	r4, #0
 80057da:	d0fa      	beq.n	80057d2 <__ieee754_sqrt+0x126>
 80057dc:	02e6      	lsls	r6, r4, #11
 80057de:	d50a      	bpl.n	80057f6 <__ieee754_sqrt+0x14a>
 80057e0:	f1c2 0020 	rsb	r0, r2, #32
 80057e4:	fa23 f000 	lsr.w	r0, r3, r0
 80057e8:	1e55      	subs	r5, r2, #1
 80057ea:	4093      	lsls	r3, r2
 80057ec:	4304      	orrs	r4, r0
 80057ee:	1b4a      	subs	r2, r1, r5
 80057f0:	e78a      	b.n	8005708 <__ieee754_sqrt+0x5c>
 80057f2:	4611      	mov	r1, r2
 80057f4:	e7f0      	b.n	80057d8 <__ieee754_sqrt+0x12c>
 80057f6:	0064      	lsls	r4, r4, #1
 80057f8:	3201      	adds	r2, #1
 80057fa:	e7ef      	b.n	80057dc <__ieee754_sqrt+0x130>
 80057fc:	4680      	mov	r8, r0
 80057fe:	e7bf      	b.n	8005780 <__ieee754_sqrt+0xd4>
 8005800:	7ff00000 	.word	0x7ff00000
 8005804:	00000000 	.word	0x00000000

08005808 <atan>:
 8005808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	4bb6      	ldr	r3, [pc, #728]	; (8005ae8 <atan+0x2e0>)
 800580e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005812:	429e      	cmp	r6, r3
 8005814:	4604      	mov	r4, r0
 8005816:	460d      	mov	r5, r1
 8005818:	468b      	mov	fp, r1
 800581a:	dd17      	ble.n	800584c <atan+0x44>
 800581c:	4bb3      	ldr	r3, [pc, #716]	; (8005aec <atan+0x2e4>)
 800581e:	429e      	cmp	r6, r3
 8005820:	dc01      	bgt.n	8005826 <atan+0x1e>
 8005822:	d109      	bne.n	8005838 <atan+0x30>
 8005824:	b140      	cbz	r0, 8005838 <atan+0x30>
 8005826:	4622      	mov	r2, r4
 8005828:	462b      	mov	r3, r5
 800582a:	4620      	mov	r0, r4
 800582c:	4629      	mov	r1, r5
 800582e:	f7fa fcf5 	bl	800021c <__adddf3>
 8005832:	4604      	mov	r4, r0
 8005834:	460d      	mov	r5, r1
 8005836:	e005      	b.n	8005844 <atan+0x3c>
 8005838:	f1bb 0f00 	cmp.w	fp, #0
 800583c:	4cac      	ldr	r4, [pc, #688]	; (8005af0 <atan+0x2e8>)
 800583e:	f340 8121 	ble.w	8005a84 <atan+0x27c>
 8005842:	4dac      	ldr	r5, [pc, #688]	; (8005af4 <atan+0x2ec>)
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584c:	4baa      	ldr	r3, [pc, #680]	; (8005af8 <atan+0x2f0>)
 800584e:	429e      	cmp	r6, r3
 8005850:	dc11      	bgt.n	8005876 <atan+0x6e>
 8005852:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005856:	429e      	cmp	r6, r3
 8005858:	dc0a      	bgt.n	8005870 <atan+0x68>
 800585a:	a38b      	add	r3, pc, #556	; (adr r3, 8005a88 <atan+0x280>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f7fa fcdc 	bl	800021c <__adddf3>
 8005864:	2200      	movs	r2, #0
 8005866:	4ba5      	ldr	r3, [pc, #660]	; (8005afc <atan+0x2f4>)
 8005868:	f7fb f91e 	bl	8000aa8 <__aeabi_dcmpgt>
 800586c:	2800      	cmp	r0, #0
 800586e:	d1e9      	bne.n	8005844 <atan+0x3c>
 8005870:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005874:	e027      	b.n	80058c6 <atan+0xbe>
 8005876:	f000 f951 	bl	8005b1c <fabs>
 800587a:	4ba1      	ldr	r3, [pc, #644]	; (8005b00 <atan+0x2f8>)
 800587c:	4604      	mov	r4, r0
 800587e:	429e      	cmp	r6, r3
 8005880:	460d      	mov	r5, r1
 8005882:	f300 80b8 	bgt.w	80059f6 <atan+0x1ee>
 8005886:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800588a:	429e      	cmp	r6, r3
 800588c:	f300 809c 	bgt.w	80059c8 <atan+0x1c0>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	f7fa fcc2 	bl	800021c <__adddf3>
 8005898:	2200      	movs	r2, #0
 800589a:	4b98      	ldr	r3, [pc, #608]	; (8005afc <atan+0x2f4>)
 800589c:	f7fa fcbc 	bl	8000218 <__aeabi_dsub>
 80058a0:	2200      	movs	r2, #0
 80058a2:	4606      	mov	r6, r0
 80058a4:	460f      	mov	r7, r1
 80058a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058aa:	4620      	mov	r0, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	f7fa fcb5 	bl	800021c <__adddf3>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4630      	mov	r0, r6
 80058b8:	4639      	mov	r1, r7
 80058ba:	f7fa ff8f 	bl	80007dc <__aeabi_ddiv>
 80058be:	f04f 0a00 	mov.w	sl, #0
 80058c2:	4604      	mov	r4, r0
 80058c4:	460d      	mov	r5, r1
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fa fe5b 	bl	8000588 <__aeabi_dmul>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4680      	mov	r8, r0
 80058d8:	4689      	mov	r9, r1
 80058da:	f7fa fe55 	bl	8000588 <__aeabi_dmul>
 80058de:	a36c      	add	r3, pc, #432	; (adr r3, 8005a90 <atan+0x288>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	4606      	mov	r6, r0
 80058e6:	460f      	mov	r7, r1
 80058e8:	f7fa fe4e 	bl	8000588 <__aeabi_dmul>
 80058ec:	a36a      	add	r3, pc, #424	; (adr r3, 8005a98 <atan+0x290>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f7fa fc93 	bl	800021c <__adddf3>
 80058f6:	4632      	mov	r2, r6
 80058f8:	463b      	mov	r3, r7
 80058fa:	f7fa fe45 	bl	8000588 <__aeabi_dmul>
 80058fe:	a368      	add	r3, pc, #416	; (adr r3, 8005aa0 <atan+0x298>)
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f7fa fc8a 	bl	800021c <__adddf3>
 8005908:	4632      	mov	r2, r6
 800590a:	463b      	mov	r3, r7
 800590c:	f7fa fe3c 	bl	8000588 <__aeabi_dmul>
 8005910:	a365      	add	r3, pc, #404	; (adr r3, 8005aa8 <atan+0x2a0>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f7fa fc81 	bl	800021c <__adddf3>
 800591a:	4632      	mov	r2, r6
 800591c:	463b      	mov	r3, r7
 800591e:	f7fa fe33 	bl	8000588 <__aeabi_dmul>
 8005922:	a363      	add	r3, pc, #396	; (adr r3, 8005ab0 <atan+0x2a8>)
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f7fa fc78 	bl	800021c <__adddf3>
 800592c:	4632      	mov	r2, r6
 800592e:	463b      	mov	r3, r7
 8005930:	f7fa fe2a 	bl	8000588 <__aeabi_dmul>
 8005934:	a360      	add	r3, pc, #384	; (adr r3, 8005ab8 <atan+0x2b0>)
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f7fa fc6f 	bl	800021c <__adddf3>
 800593e:	4642      	mov	r2, r8
 8005940:	464b      	mov	r3, r9
 8005942:	f7fa fe21 	bl	8000588 <__aeabi_dmul>
 8005946:	a35e      	add	r3, pc, #376	; (adr r3, 8005ac0 <atan+0x2b8>)
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	4680      	mov	r8, r0
 800594e:	4689      	mov	r9, r1
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fa fe18 	bl	8000588 <__aeabi_dmul>
 8005958:	a35b      	add	r3, pc, #364	; (adr r3, 8005ac8 <atan+0x2c0>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f7fa fc5b 	bl	8000218 <__aeabi_dsub>
 8005962:	4632      	mov	r2, r6
 8005964:	463b      	mov	r3, r7
 8005966:	f7fa fe0f 	bl	8000588 <__aeabi_dmul>
 800596a:	a359      	add	r3, pc, #356	; (adr r3, 8005ad0 <atan+0x2c8>)
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f7fa fc52 	bl	8000218 <__aeabi_dsub>
 8005974:	4632      	mov	r2, r6
 8005976:	463b      	mov	r3, r7
 8005978:	f7fa fe06 	bl	8000588 <__aeabi_dmul>
 800597c:	a356      	add	r3, pc, #344	; (adr r3, 8005ad8 <atan+0x2d0>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f7fa fc49 	bl	8000218 <__aeabi_dsub>
 8005986:	4632      	mov	r2, r6
 8005988:	463b      	mov	r3, r7
 800598a:	f7fa fdfd 	bl	8000588 <__aeabi_dmul>
 800598e:	a354      	add	r3, pc, #336	; (adr r3, 8005ae0 <atan+0x2d8>)
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f7fa fc40 	bl	8000218 <__aeabi_dsub>
 8005998:	4632      	mov	r2, r6
 800599a:	463b      	mov	r3, r7
 800599c:	f7fa fdf4 	bl	8000588 <__aeabi_dmul>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4640      	mov	r0, r8
 80059a6:	4649      	mov	r1, r9
 80059a8:	f7fa fc38 	bl	800021c <__adddf3>
 80059ac:	4622      	mov	r2, r4
 80059ae:	462b      	mov	r3, r5
 80059b0:	f7fa fdea 	bl	8000588 <__aeabi_dmul>
 80059b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	d144      	bne.n	8005a48 <atan+0x240>
 80059be:	4620      	mov	r0, r4
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fa fc29 	bl	8000218 <__aeabi_dsub>
 80059c6:	e734      	b.n	8005832 <atan+0x2a>
 80059c8:	2200      	movs	r2, #0
 80059ca:	4b4c      	ldr	r3, [pc, #304]	; (8005afc <atan+0x2f4>)
 80059cc:	f7fa fc24 	bl	8000218 <__aeabi_dsub>
 80059d0:	2200      	movs	r2, #0
 80059d2:	4606      	mov	r6, r0
 80059d4:	460f      	mov	r7, r1
 80059d6:	4b49      	ldr	r3, [pc, #292]	; (8005afc <atan+0x2f4>)
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fa fc1e 	bl	800021c <__adddf3>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4630      	mov	r0, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fa fef8 	bl	80007dc <__aeabi_ddiv>
 80059ec:	f04f 0a01 	mov.w	sl, #1
 80059f0:	4604      	mov	r4, r0
 80059f2:	460d      	mov	r5, r1
 80059f4:	e767      	b.n	80058c6 <atan+0xbe>
 80059f6:	4b43      	ldr	r3, [pc, #268]	; (8005b04 <atan+0x2fc>)
 80059f8:	429e      	cmp	r6, r3
 80059fa:	dc1a      	bgt.n	8005a32 <atan+0x22a>
 80059fc:	2200      	movs	r2, #0
 80059fe:	4b42      	ldr	r3, [pc, #264]	; (8005b08 <atan+0x300>)
 8005a00:	f7fa fc0a 	bl	8000218 <__aeabi_dsub>
 8005a04:	2200      	movs	r2, #0
 8005a06:	4606      	mov	r6, r0
 8005a08:	460f      	mov	r7, r1
 8005a0a:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <atan+0x300>)
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	4629      	mov	r1, r5
 8005a10:	f7fa fdba 	bl	8000588 <__aeabi_dmul>
 8005a14:	2200      	movs	r2, #0
 8005a16:	4b39      	ldr	r3, [pc, #228]	; (8005afc <atan+0x2f4>)
 8005a18:	f7fa fc00 	bl	800021c <__adddf3>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fa feda 	bl	80007dc <__aeabi_ddiv>
 8005a28:	f04f 0a02 	mov.w	sl, #2
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	460d      	mov	r5, r1
 8005a30:	e749      	b.n	80058c6 <atan+0xbe>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	2000      	movs	r0, #0
 8005a38:	4934      	ldr	r1, [pc, #208]	; (8005b0c <atan+0x304>)
 8005a3a:	f7fa fecf 	bl	80007dc <__aeabi_ddiv>
 8005a3e:	f04f 0a03 	mov.w	sl, #3
 8005a42:	4604      	mov	r4, r0
 8005a44:	460d      	mov	r5, r1
 8005a46:	e73e      	b.n	80058c6 <atan+0xbe>
 8005a48:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <atan+0x308>)
 8005a4a:	4e32      	ldr	r6, [pc, #200]	; (8005b14 <atan+0x30c>)
 8005a4c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005a50:	4456      	add	r6, sl
 8005a52:	449a      	add	sl, r3
 8005a54:	e9da 2300 	ldrd	r2, r3, [sl]
 8005a58:	f7fa fbde 	bl	8000218 <__aeabi_dsub>
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	462b      	mov	r3, r5
 8005a60:	f7fa fbda 	bl	8000218 <__aeabi_dsub>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005a6c:	f7fa fbd4 	bl	8000218 <__aeabi_dsub>
 8005a70:	f1bb 0f00 	cmp.w	fp, #0
 8005a74:	4604      	mov	r4, r0
 8005a76:	460d      	mov	r5, r1
 8005a78:	f6bf aee4 	bge.w	8005844 <atan+0x3c>
 8005a7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a80:	461d      	mov	r5, r3
 8005a82:	e6df      	b.n	8005844 <atan+0x3c>
 8005a84:	4d24      	ldr	r5, [pc, #144]	; (8005b18 <atan+0x310>)
 8005a86:	e6dd      	b.n	8005844 <atan+0x3c>
 8005a88:	8800759c 	.word	0x8800759c
 8005a8c:	7e37e43c 	.word	0x7e37e43c
 8005a90:	e322da11 	.word	0xe322da11
 8005a94:	3f90ad3a 	.word	0x3f90ad3a
 8005a98:	24760deb 	.word	0x24760deb
 8005a9c:	3fa97b4b 	.word	0x3fa97b4b
 8005aa0:	a0d03d51 	.word	0xa0d03d51
 8005aa4:	3fb10d66 	.word	0x3fb10d66
 8005aa8:	c54c206e 	.word	0xc54c206e
 8005aac:	3fb745cd 	.word	0x3fb745cd
 8005ab0:	920083ff 	.word	0x920083ff
 8005ab4:	3fc24924 	.word	0x3fc24924
 8005ab8:	5555550d 	.word	0x5555550d
 8005abc:	3fd55555 	.word	0x3fd55555
 8005ac0:	2c6a6c2f 	.word	0x2c6a6c2f
 8005ac4:	bfa2b444 	.word	0xbfa2b444
 8005ac8:	52defd9a 	.word	0x52defd9a
 8005acc:	3fadde2d 	.word	0x3fadde2d
 8005ad0:	af749a6d 	.word	0xaf749a6d
 8005ad4:	3fb3b0f2 	.word	0x3fb3b0f2
 8005ad8:	fe231671 	.word	0xfe231671
 8005adc:	3fbc71c6 	.word	0x3fbc71c6
 8005ae0:	9998ebc4 	.word	0x9998ebc4
 8005ae4:	3fc99999 	.word	0x3fc99999
 8005ae8:	440fffff 	.word	0x440fffff
 8005aec:	7ff00000 	.word	0x7ff00000
 8005af0:	54442d18 	.word	0x54442d18
 8005af4:	3ff921fb 	.word	0x3ff921fb
 8005af8:	3fdbffff 	.word	0x3fdbffff
 8005afc:	3ff00000 	.word	0x3ff00000
 8005b00:	3ff2ffff 	.word	0x3ff2ffff
 8005b04:	40037fff 	.word	0x40037fff
 8005b08:	3ff80000 	.word	0x3ff80000
 8005b0c:	bff00000 	.word	0xbff00000
 8005b10:	08005ba0 	.word	0x08005ba0
 8005b14:	08005b80 	.word	0x08005b80
 8005b18:	bff921fb 	.word	0xbff921fb

08005b1c <fabs>:
 8005b1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b20:	4619      	mov	r1, r3
 8005b22:	4770      	bx	lr

08005b24 <matherr>:
 8005b24:	2000      	movs	r0, #0
 8005b26:	4770      	bx	lr

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
