
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a90  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006c60  08006c60  00016c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce0  08006ce0  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08006ce0  08006ce0  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ce0  08006ce0  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08006ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200000c8  08006db0  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08006db0  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cb2  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002970  00000000  00000000  00033da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  00036718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00037790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f630  00000000  00000000  000386f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d086  00000000  00000000  00047d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057e73  00000000  00000000  00054da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000acc19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  000acc94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c48 	.word	0x08006c48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	08006c48 	.word	0x08006c48

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_frsub>:
 8000bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	e002      	b.n	8000be4 <__addsf3>
 8000bde:	bf00      	nop

08000be0 <__aeabi_fsub>:
 8000be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000be4 <__addsf3>:
 8000be4:	0042      	lsls	r2, r0, #1
 8000be6:	bf1f      	itttt	ne
 8000be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bec:	ea92 0f03 	teqne	r2, r3
 8000bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf8:	d06a      	beq.n	8000cd0 <__addsf3+0xec>
 8000bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c02:	bfc1      	itttt	gt
 8000c04:	18d2      	addgt	r2, r2, r3
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	4048      	eorgt	r0, r1
 8000c0a:	4041      	eorgt	r1, r0
 8000c0c:	bfb8      	it	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	2b19      	cmp	r3, #25
 8000c12:	bf88      	it	hi
 8000c14:	4770      	bxhi	lr
 8000c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4249      	negne	r1, r1
 8000c36:	ea92 0f03 	teq	r2, r3
 8000c3a:	d03f      	beq.n	8000cbc <__addsf3+0xd8>
 8000c3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c40:	fa41 fc03 	asr.w	ip, r1, r3
 8000c44:	eb10 000c 	adds.w	r0, r0, ip
 8000c48:	f1c3 0320 	rsb	r3, r3, #32
 8000c4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__addsf3+0x78>
 8000c56:	4249      	negs	r1, r1
 8000c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c60:	d313      	bcc.n	8000c8a <__addsf3+0xa6>
 8000c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c66:	d306      	bcc.n	8000c76 <__addsf3+0x92>
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6e:	f102 0201 	add.w	r2, r2, #1
 8000c72:	2afe      	cmp	r2, #254	; 0xfe
 8000c74:	d251      	bcs.n	8000d1a <__addsf3+0x136>
 8000c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	ea40 0003 	orr.w	r0, r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	eb40 0000 	adc.w	r0, r0, r0
 8000c90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	d1ed      	bne.n	8000c76 <__addsf3+0x92>
 8000c9a:	fab0 fc80 	clz	ip, r0
 8000c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ca2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000caa:	bfaa      	itet	ge
 8000cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb0:	4252      	neglt	r2, r2
 8000cb2:	4318      	orrge	r0, r3
 8000cb4:	bfbc      	itt	lt
 8000cb6:	40d0      	lsrlt	r0, r2
 8000cb8:	4318      	orrlt	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	f092 0f00 	teq	r2, #0
 8000cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cc4:	bf06      	itte	eq
 8000cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cca:	3201      	addeq	r2, #1
 8000ccc:	3b01      	subne	r3, #1
 8000cce:	e7b5      	b.n	8000c3c <__addsf3+0x58>
 8000cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd8:	bf18      	it	ne
 8000cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cde:	d021      	beq.n	8000d24 <__addsf3+0x140>
 8000ce0:	ea92 0f03 	teq	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <__addsf3+0x10c>
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	bf08      	it	eq
 8000cec:	4608      	moveq	r0, r1
 8000cee:	4770      	bx	lr
 8000cf0:	ea90 0f01 	teq	r0, r1
 8000cf4:	bf1c      	itt	ne
 8000cf6:	2000      	movne	r0, #0
 8000cf8:	4770      	bxne	lr
 8000cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cfe:	d104      	bne.n	8000d0a <__addsf3+0x126>
 8000d00:	0040      	lsls	r0, r0, #1
 8000d02:	bf28      	it	cs
 8000d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	4770      	bx	lr
 8000d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d0e:	bf3c      	itt	cc
 8000d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bxcc	lr
 8000d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	4770      	bx	lr
 8000d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d28:	bf16      	itet	ne
 8000d2a:	4608      	movne	r0, r1
 8000d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d30:	4601      	movne	r1, r0
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	bf06      	itte	eq
 8000d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d3a:	ea90 0f01 	teqeq	r0, r1
 8000d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_ui2f>:
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e004      	b.n	8000d54 <__aeabi_i2f+0x8>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_i2f>:
 8000d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	bf48      	it	mi
 8000d52:	4240      	negmi	r0, r0
 8000d54:	ea5f 0c00 	movs.w	ip, r0
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d60:	4601      	mov	r1, r0
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	e01c      	b.n	8000da2 <__aeabi_l2f+0x2a>

08000d68 <__aeabi_ul2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e00a      	b.n	8000d8c <__aeabi_l2f+0x14>
 8000d76:	bf00      	nop

08000d78 <__aeabi_l2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__aeabi_l2f+0x14>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	ea5f 0c01 	movs.w	ip, r1
 8000d90:	bf02      	ittt	eq
 8000d92:	4684      	moveq	ip, r0
 8000d94:	4601      	moveq	r1, r0
 8000d96:	2000      	moveq	r0, #0
 8000d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d9c:	bf08      	it	eq
 8000d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000da6:	fabc f28c 	clz	r2, ip
 8000daa:	3a08      	subs	r2, #8
 8000dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db0:	db10      	blt.n	8000dd4 <__aeabi_l2f+0x5c>
 8000db2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db6:	4463      	add	r3, ip
 8000db8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f102 0220 	add.w	r2, r2, #32
 8000dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de4:	fa21 f202 	lsr.w	r2, r1, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_fmul>:
 8000df4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dfc:	bf1e      	ittt	ne
 8000dfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e02:	ea92 0f0c 	teqne	r2, ip
 8000e06:	ea93 0f0c 	teqne	r3, ip
 8000e0a:	d06f      	beq.n	8000eec <__aeabi_fmul+0xf8>
 8000e0c:	441a      	add	r2, r3
 8000e0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	bf18      	it	ne
 8000e16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e1a:	d01e      	beq.n	8000e5a <__aeabi_fmul+0x66>
 8000e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e28:	fba0 3101 	umull	r3, r1, r0, r1
 8000e2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e34:	bf3e      	ittt	cc
 8000e36:	0049      	lslcc	r1, r1, #1
 8000e38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e3c:	005b      	lslcc	r3, r3, #1
 8000e3e:	ea40 0001 	orr.w	r0, r0, r1
 8000e42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e46:	2afd      	cmp	r2, #253	; 0xfd
 8000e48:	d81d      	bhi.n	8000e86 <__aeabi_fmul+0x92>
 8000e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e52:	bf08      	it	eq
 8000e54:	f020 0001 	biceq.w	r0, r0, #1
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e62:	bf08      	it	eq
 8000e64:	0249      	lsleq	r1, r1, #9
 8000e66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e6e:	3a7f      	subs	r2, #127	; 0x7f
 8000e70:	bfc2      	ittt	gt
 8000e72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e7a:	4770      	bxgt	lr
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	3a01      	subs	r2, #1
 8000e86:	dc5d      	bgt.n	8000f44 <__aeabi_fmul+0x150>
 8000e88:	f112 0f19 	cmn.w	r2, #25
 8000e8c:	bfdc      	itt	le
 8000e8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e92:	4770      	bxle	lr
 8000e94:	f1c2 0200 	rsb	r2, r2, #0
 8000e98:	0041      	lsls	r1, r0, #1
 8000e9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ea2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ea6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eaa:	f140 0000 	adc.w	r0, r0, #0
 8000eae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eb2:	bf08      	it	eq
 8000eb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb8:	4770      	bx	lr
 8000eba:	f092 0f00 	teq	r2, #0
 8000ebe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ec2:	bf02      	ittt	eq
 8000ec4:	0040      	lsleq	r0, r0, #1
 8000ec6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eca:	3a01      	subeq	r2, #1
 8000ecc:	d0f9      	beq.n	8000ec2 <__aeabi_fmul+0xce>
 8000ece:	ea40 000c 	orr.w	r0, r0, ip
 8000ed2:	f093 0f00 	teq	r3, #0
 8000ed6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0049      	lsleq	r1, r1, #1
 8000ede:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ee2:	3b01      	subeq	r3, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fmul+0xe6>
 8000ee6:	ea41 010c 	orr.w	r1, r1, ip
 8000eea:	e78f      	b.n	8000e0c <__aeabi_fmul+0x18>
 8000eec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	bf18      	it	ne
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d00a      	beq.n	8000f12 <__aeabi_fmul+0x11e>
 8000efc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f00:	bf18      	it	ne
 8000f02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	d1d8      	bne.n	8000eba <__aeabi_fmul+0xc6>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	4770      	bx	lr
 8000f12:	f090 0f00 	teq	r0, #0
 8000f16:	bf17      	itett	ne
 8000f18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f1c:	4608      	moveq	r0, r1
 8000f1e:	f091 0f00 	teqne	r1, #0
 8000f22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f26:	d014      	beq.n	8000f52 <__aeabi_fmul+0x15e>
 8000f28:	ea92 0f0c 	teq	r2, ip
 8000f2c:	d101      	bne.n	8000f32 <__aeabi_fmul+0x13e>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	d10f      	bne.n	8000f52 <__aeabi_fmul+0x15e>
 8000f32:	ea93 0f0c 	teq	r3, ip
 8000f36:	d103      	bne.n	8000f40 <__aeabi_fmul+0x14c>
 8000f38:	024b      	lsls	r3, r1, #9
 8000f3a:	bf18      	it	ne
 8000f3c:	4608      	movne	r0, r1
 8000f3e:	d108      	bne.n	8000f52 <__aeabi_fmul+0x15e>
 8000f40:	ea80 0001 	eor.w	r0, r0, r1
 8000f44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f50:	4770      	bx	lr
 8000f52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_fdiv>:
 8000f5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f64:	bf1e      	ittt	ne
 8000f66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f6a:	ea92 0f0c 	teqne	r2, ip
 8000f6e:	ea93 0f0c 	teqne	r3, ip
 8000f72:	d069      	beq.n	8001048 <__aeabi_fdiv+0xec>
 8000f74:	eba2 0203 	sub.w	r2, r2, r3
 8000f78:	ea80 0c01 	eor.w	ip, r0, r1
 8000f7c:	0249      	lsls	r1, r1, #9
 8000f7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f82:	d037      	beq.n	8000ff4 <__aeabi_fdiv+0x98>
 8000f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f94:	428b      	cmp	r3, r1
 8000f96:	bf38      	it	cc
 8000f98:	005b      	lslcc	r3, r3, #1
 8000f9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	bf24      	itt	cs
 8000fa6:	1a5b      	subcs	r3, r3, r1
 8000fa8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb0:	bf24      	itt	cs
 8000fb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fbe:	bf24      	itt	cs
 8000fc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fcc:	bf24      	itt	cs
 8000fce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	bf18      	it	ne
 8000fda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fde:	d1e0      	bne.n	8000fa2 <__aeabi_fdiv+0x46>
 8000fe0:	2afd      	cmp	r2, #253	; 0xfd
 8000fe2:	f63f af50 	bhi.w	8000e86 <__aeabi_fmul+0x92>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fec:	bf08      	it	eq
 8000fee:	f020 0001 	biceq.w	r0, r0, #1
 8000ff2:	4770      	bx	lr
 8000ff4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ff8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ffc:	327f      	adds	r2, #127	; 0x7f
 8000ffe:	bfc2      	ittt	gt
 8001000:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001004:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001008:	4770      	bxgt	lr
 800100a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	3a01      	subs	r2, #1
 8001014:	e737      	b.n	8000e86 <__aeabi_fmul+0x92>
 8001016:	f092 0f00 	teq	r2, #0
 800101a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800101e:	bf02      	ittt	eq
 8001020:	0040      	lsleq	r0, r0, #1
 8001022:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001026:	3a01      	subeq	r2, #1
 8001028:	d0f9      	beq.n	800101e <__aeabi_fdiv+0xc2>
 800102a:	ea40 000c 	orr.w	r0, r0, ip
 800102e:	f093 0f00 	teq	r3, #0
 8001032:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001036:	bf02      	ittt	eq
 8001038:	0049      	lsleq	r1, r1, #1
 800103a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800103e:	3b01      	subeq	r3, #1
 8001040:	d0f9      	beq.n	8001036 <__aeabi_fdiv+0xda>
 8001042:	ea41 010c 	orr.w	r1, r1, ip
 8001046:	e795      	b.n	8000f74 <__aeabi_fdiv+0x18>
 8001048:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800104c:	ea92 0f0c 	teq	r2, ip
 8001050:	d108      	bne.n	8001064 <__aeabi_fdiv+0x108>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	f47f af7d 	bne.w	8000f52 <__aeabi_fmul+0x15e>
 8001058:	ea93 0f0c 	teq	r3, ip
 800105c:	f47f af70 	bne.w	8000f40 <__aeabi_fmul+0x14c>
 8001060:	4608      	mov	r0, r1
 8001062:	e776      	b.n	8000f52 <__aeabi_fmul+0x15e>
 8001064:	ea93 0f0c 	teq	r3, ip
 8001068:	d104      	bne.n	8001074 <__aeabi_fdiv+0x118>
 800106a:	024b      	lsls	r3, r1, #9
 800106c:	f43f af4c 	beq.w	8000f08 <__aeabi_fmul+0x114>
 8001070:	4608      	mov	r0, r1
 8001072:	e76e      	b.n	8000f52 <__aeabi_fmul+0x15e>
 8001074:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001078:	bf18      	it	ne
 800107a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800107e:	d1ca      	bne.n	8001016 <__aeabi_fdiv+0xba>
 8001080:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001084:	f47f af5c 	bne.w	8000f40 <__aeabi_fmul+0x14c>
 8001088:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800108c:	f47f af3c 	bne.w	8000f08 <__aeabi_fmul+0x114>
 8001090:	e75f      	b.n	8000f52 <__aeabi_fmul+0x15e>
 8001092:	bf00      	nop

08001094 <__gesf2>:
 8001094:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001098:	e006      	b.n	80010a8 <__cmpsf2+0x4>
 800109a:	bf00      	nop

0800109c <__lesf2>:
 800109c:	f04f 0c01 	mov.w	ip, #1
 80010a0:	e002      	b.n	80010a8 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__cmpsf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	bf18      	it	ne
 80010ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010be:	d011      	beq.n	80010e4 <__cmpsf2+0x40>
 80010c0:	b001      	add	sp, #4
 80010c2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010c6:	bf18      	it	ne
 80010c8:	ea90 0f01 	teqne	r0, r1
 80010cc:	bf58      	it	pl
 80010ce:	ebb2 0003 	subspl.w	r0, r2, r3
 80010d2:	bf88      	it	hi
 80010d4:	17c8      	asrhi	r0, r1, #31
 80010d6:	bf38      	it	cc
 80010d8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010dc:	bf18      	it	ne
 80010de:	f040 0001 	orrne.w	r0, r0, #1
 80010e2:	4770      	bx	lr
 80010e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e8:	d102      	bne.n	80010f0 <__cmpsf2+0x4c>
 80010ea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ee:	d105      	bne.n	80010fc <__cmpsf2+0x58>
 80010f0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010f4:	d1e4      	bne.n	80010c0 <__cmpsf2+0x1c>
 80010f6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010fa:	d0e1      	beq.n	80010c0 <__cmpsf2+0x1c>
 80010fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <__aeabi_cfrcmple>:
 8001104:	4684      	mov	ip, r0
 8001106:	4608      	mov	r0, r1
 8001108:	4661      	mov	r1, ip
 800110a:	e7ff      	b.n	800110c <__aeabi_cfcmpeq>

0800110c <__aeabi_cfcmpeq>:
 800110c:	b50f      	push	{r0, r1, r2, r3, lr}
 800110e:	f7ff ffc9 	bl	80010a4 <__cmpsf2>
 8001112:	2800      	cmp	r0, #0
 8001114:	bf48      	it	mi
 8001116:	f110 0f00 	cmnmi.w	r0, #0
 800111a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800111c <__aeabi_fcmpeq>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff fff4 	bl	800110c <__aeabi_cfcmpeq>
 8001124:	bf0c      	ite	eq
 8001126:	2001      	moveq	r0, #1
 8001128:	2000      	movne	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmplt>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffea 	bl	800110c <__aeabi_cfcmpeq>
 8001138:	bf34      	ite	cc
 800113a:	2001      	movcc	r0, #1
 800113c:	2000      	movcs	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmple>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffe0 	bl	800110c <__aeabi_cfcmpeq>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpge>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffd2 	bl	8001104 <__aeabi_cfrcmple>
 8001160:	bf94      	ite	ls
 8001162:	2001      	movls	r0, #1
 8001164:	2000      	movhi	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmpgt>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffc8 	bl	8001104 <__aeabi_cfrcmple>
 8001174:	bf34      	ite	cc
 8001176:	2001      	movcc	r0, #1
 8001178:	2000      	movcs	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_f2iz>:
 8001180:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001184:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001188:	d30f      	bcc.n	80011aa <__aeabi_f2iz+0x2a>
 800118a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800118e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001192:	d90d      	bls.n	80011b0 <__aeabi_f2iz+0x30>
 8001194:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800119c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011a0:	fa23 f002 	lsr.w	r0, r3, r2
 80011a4:	bf18      	it	ne
 80011a6:	4240      	negne	r0, r0
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2iz+0x3a>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d105      	bne.n	80011c6 <__aeabi_f2iz+0x46>
 80011ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011be:	bf08      	it	eq
 80011c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0000 	mov.w	r0, #0
 80011ca:	4770      	bx	lr

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 fc41 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f806 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f004 fe72 	bl	8005ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fc5b 	bl	8001ac2 <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001224:	f000 fc23 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000005c 	.word	0x2000005c
 8001240:	20000004 	.word	0x20000004
 8001244:	20000000 	.word	0x20000000

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x1c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x20>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <HAL_IncTick+0x20>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000004 	.word	0x20000004
 8001268:	200000f8 	.word	0x200000f8

0800126c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <HAL_GetTick+0x10>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200000f8 	.word	0x200000f8

08001280 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_SetTickFreq+0x3c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	429a      	cmp	r2, r3
 8001296:	d00c      	beq.n	80012b2 <HAL_SetTickFreq+0x32>
  {
    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_SetTickFreq+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffa3 	bl	80011e8 <HAL_InitTick>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <HAL_SetTickFreq+0x32>
    {
      uwTickFreq = Freq;
 80012ac:	4a03      	ldr	r2, [pc, #12]	; (80012bc <HAL_SetTickFreq+0x3c>)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000004 	.word	0x20000004
 80012c0:	20000000 	.word	0x20000000

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffce 	bl	800126c <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_Delay+0x40>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffbe 	bl	800126c <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0be      	b.n	80014a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f004 fdee 	bl	8005f28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fa7d 	bl	800184c <ADC_ConversionStop_Disable>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 8099 	bne.w	8001496 <HAL_ADC_Init+0x18e>
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 8095 	bne.w	8001496 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001374:	f023 0302 	bic.w	r3, r3, #2
 8001378:	f043 0202 	orr.w	r2, r3, #2
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001388:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7b1b      	ldrb	r3, [r3, #12]
 800138e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001390:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4313      	orrs	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a0:	d003      	beq.n	80013aa <HAL_ADC_Init+0xa2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <HAL_ADC_Init+0xa8>
 80013aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ae:	e000      	b.n	80013b2 <HAL_ADC_Init+0xaa>
 80013b0:	2300      	movs	r3, #0
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7d1b      	ldrb	r3, [r3, #20]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d119      	bne.n	80013f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7b1b      	ldrb	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	035a      	lsls	r2, r3, #13
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	e00b      	b.n	80013f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	f043 0220 	orr.w	r2, r3, #32
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_ADC_Init+0x1a8>)
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	430b      	orrs	r3, r1
 800141a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001424:	d003      	beq.n	800142e <HAL_ADC_Init+0x126>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d104      	bne.n	8001438 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	3b01      	subs	r3, #1
 8001434:	051b      	lsls	r3, r3, #20
 8001436:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	430a      	orrs	r2, r1
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_Init+0x1ac>)
 8001454:	4013      	ands	r3, r2
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	429a      	cmp	r2, r3
 800145a:	d10b      	bne.n	8001474 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001472:	e018      	b.n	80014a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f023 0312 	bic.w	r3, r3, #18
 800147c:	f043 0210 	orr.w	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001494:	e007      	b.n	80014a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f043 0210 	orr.w	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	ffe1f7fd 	.word	0xffe1f7fd
 80014b4:	ff1f0efe 	.word	0xff1f0efe

080014b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Start+0x1a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e062      	b.n	8001598 <HAL_ADC_Start+0xe0>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f964 	bl	80017a8 <ADC_Enable>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d151      	bne.n	800158e <HAL_ADC_Start+0xd6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <HAL_ADC_Start+0x70>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001520:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_ADC_Start+0x8a>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	f023 0206 	bic.w	r2, r3, #6
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001540:	e002      	b.n	8001548 <HAL_ADC_Start+0x90>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f06f 0202 	mvn.w	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001564:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001568:	d108      	bne.n	800157c <HAL_ADC_Start+0xc4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	e00c      	b.n	8001596 <HAL_ADC_Start+0xde>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e003      	b.n	8001596 <HAL_ADC_Start+0xde>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x20>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e0dc      	b.n	8001792 <HAL_ADC_ConfigChannel+0x1da>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d81c      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3b05      	subs	r3, #5
 80015fa:	221f      	movs	r2, #31
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	4019      	ands	r1, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b05      	subs	r3, #5
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
 8001620:	e03c      	b.n	800169c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d81c      	bhi.n	8001664 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	3b23      	subs	r3, #35	; 0x23
 800163c:	221f      	movs	r2, #31
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	4019      	ands	r1, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	3b23      	subs	r3, #35	; 0x23
 8001656:	fa00 f203 	lsl.w	r2, r0, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
 8001662:	e01b      	b.n	800169c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b41      	subs	r3, #65	; 0x41
 8001676:	221f      	movs	r2, #31
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	4019      	ands	r1, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b41      	subs	r3, #65	; 0x41
 8001690:	fa00 f203 	lsl.w	r2, r0, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d91c      	bls.n	80016de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68d9      	ldr	r1, [r3, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	3b1e      	subs	r3, #30
 80016b6:	2207      	movs	r2, #7
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	4019      	ands	r1, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6898      	ldr	r0, [r3, #8]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	3b1e      	subs	r3, #30
 80016d0:	fa00 f203 	lsl.w	r2, r0, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	e019      	b.n	8001712 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6919      	ldr	r1, [r3, #16]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	2207      	movs	r2, #7
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4019      	ands	r1, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6898      	ldr	r0, [r3, #8]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	fa00 f203 	lsl.w	r2, r0, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b10      	cmp	r3, #16
 8001718:	d003      	beq.n	8001722 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800171e:	2b11      	cmp	r3, #17
 8001720:	d132      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_ADC_ConfigChannel+0x1e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d125      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d126      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001748:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b10      	cmp	r3, #16
 8001750:	d11a      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	0c9a      	lsrs	r2, r3, #18
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001768:	e002      	b.n	8001770 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3b01      	subs	r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f9      	bne.n	800176a <HAL_ADC_ConfigChannel+0x1b2>
 8001776:	e007      	b.n	8001788 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f043 0220 	orr.w	r2, r3, #32
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40012400 	.word	0x40012400
 80017a0:	2000005c 	.word	0x2000005c
 80017a4:	431bde83 	.word	0x431bde83

080017a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d039      	beq.n	800183a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <ADC_Enable+0x9c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <ADC_Enable+0xa0>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	0c9b      	lsrs	r3, r3, #18
 80017e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017e4:	e002      	b.n	80017ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f9      	bne.n	80017e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017f2:	f7ff fd3b 	bl	800126c <HAL_GetTick>
 80017f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017f8:	e018      	b.n	800182c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017fa:	f7ff fd37 	bl	800126c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d911      	bls.n	800182c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e007      	b.n	800183c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b01      	cmp	r3, #1
 8001838:	d1df      	bne.n	80017fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000005c 	.word	0x2000005c
 8001848:	431bde83 	.word	0x431bde83

0800184c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d127      	bne.n	80018b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001876:	f7ff fcf9 	bl	800126c <HAL_GetTick>
 800187a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800187c:	e014      	b.n	80018a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800187e:	f7ff fcf5 	bl	800126c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d90d      	bls.n	80018a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f043 0210 	orr.w	r2, r3, #16
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e007      	b.n	80018b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d0e3      	beq.n	800187e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4906      	ldr	r1, [pc, #24]	; (8001958 <__NVIC_EnableIRQ+0x34>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a38:	f7ff ff90 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff2d 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff42 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff90 	bl	80019b0 <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5f 	bl	800195c <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff35 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa2 	bl	8001a14 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b08b      	sub	sp, #44	; 0x2c
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	e127      	b.n	8001d40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af0:	2201      	movs	r2, #1
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8116 	bne.w	8001d3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d034      	beq.n	8001b80 <HAL_GPIO_Init+0xa4>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d80d      	bhi.n	8001b36 <HAL_GPIO_Init+0x5a>
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d02b      	beq.n	8001b76 <HAL_GPIO_Init+0x9a>
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d804      	bhi.n	8001b2c <HAL_GPIO_Init+0x50>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d031      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d01c      	beq.n	8001b64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2a:	e048      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d043      	beq.n	8001bb8 <HAL_GPIO_Init+0xdc>
 8001b30:	2b11      	cmp	r3, #17
 8001b32:	d01b      	beq.n	8001b6c <HAL_GPIO_Init+0x90>
          break;
 8001b34:	e043      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b36:	4a89      	ldr	r2, [pc, #548]	; (8001d5c <HAL_GPIO_Init+0x280>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d026      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b3c:	4a87      	ldr	r2, [pc, #540]	; (8001d5c <HAL_GPIO_Init+0x280>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d806      	bhi.n	8001b50 <HAL_GPIO_Init+0x74>
 8001b42:	4a87      	ldr	r2, [pc, #540]	; (8001d60 <HAL_GPIO_Init+0x284>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d020      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b48:	4a86      	ldr	r2, [pc, #536]	; (8001d64 <HAL_GPIO_Init+0x288>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01d      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
          break;
 8001b4e:	e036      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b50:	4a85      	ldr	r2, [pc, #532]	; (8001d68 <HAL_GPIO_Init+0x28c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d019      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b56:	4a85      	ldr	r2, [pc, #532]	; (8001d6c <HAL_GPIO_Init+0x290>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d016      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b5c:	4a84      	ldr	r2, [pc, #528]	; (8001d70 <HAL_GPIO_Init+0x294>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
          break;
 8001b62:	e02c      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e028      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	3304      	adds	r3, #4
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e023      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e01e      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	330c      	adds	r3, #12
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e019      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b92:	2304      	movs	r3, #4
 8001b94:	623b      	str	r3, [r7, #32]
          break;
 8001b96:	e012      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	611a      	str	r2, [r3, #16]
          break;
 8001baa:	e008      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bac:	2308      	movs	r3, #8
 8001bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	615a      	str	r2, [r3, #20]
          break;
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2bff      	cmp	r3, #255	; 0xff
 8001bc2:	d801      	bhi.n	8001bc8 <HAL_GPIO_Init+0xec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	e001      	b.n	8001bcc <HAL_GPIO_Init+0xf0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d802      	bhi.n	8001bda <HAL_GPIO_Init+0xfe>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x104>
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3b08      	subs	r3, #8
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	210f      	movs	r1, #15
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	6a39      	ldr	r1, [r7, #32]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8096 	beq.w	8001d3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0e:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c26:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x29c>)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_GPIO_Init+0x2a0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x19e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4a      	ldr	r2, [pc, #296]	; (8001d80 <HAL_GPIO_Init+0x2a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x19a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_GPIO_Init+0x2a8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x196>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x2ac>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x192>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c8c:	493a      	ldr	r1, [pc, #232]	; (8001d78 <HAL_GPIO_Init+0x29c>)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4938      	ldr	r1, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4933      	ldr	r1, [pc, #204]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cce:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	492e      	ldr	r1, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4929      	ldr	r1, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	4924      	ldr	r1, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	491f      	ldr	r1, [pc, #124]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	491a      	ldr	r1, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60cb      	str	r3, [r1, #12]
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4915      	ldr	r1, [pc, #84]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f47f aed0 	bne.w	8001af0 <HAL_GPIO_Init+0x14>
  }
}
 8001d50:	bf00      	nop
 8001d52:	372c      	adds	r7, #44	; 0x2c
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	10210000 	.word	0x10210000
 8001d60:	10110000 	.word	0x10110000
 8001d64:	10120000 	.word	0x10120000
 8001d68:	10310000 	.word	0x10310000
 8001d6c:	10320000 	.word	0x10320000
 8001d70:	10220000 	.word	0x10220000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40010800 	.word	0x40010800
 8001d80:	40010c00 	.word	0x40010c00
 8001d84:	40011000 	.word	0x40011000
 8001d88:	40011400 	.word	0x40011400
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e10f      	b.n	8001ff2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f004 f8da 	bl	8005fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e04:	f001 fb02 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8001e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4a7b      	ldr	r2, [pc, #492]	; (8001ffc <HAL_I2C_Init+0x23c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d807      	bhi.n	8001e24 <HAL_I2C_Init+0x64>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_I2C_Init+0x240>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	bf94      	ite	ls
 8001e1c:	2301      	movls	r3, #1
 8001e1e:	2300      	movhi	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	e006      	b.n	8001e32 <HAL_I2C_Init+0x72>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a77      	ldr	r2, [pc, #476]	; (8002004 <HAL_I2C_Init+0x244>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0db      	b.n	8001ff2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a72      	ldr	r2, [pc, #456]	; (8002008 <HAL_I2C_Init+0x248>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0c9b      	lsrs	r3, r3, #18
 8001e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a64      	ldr	r2, [pc, #400]	; (8001ffc <HAL_I2C_Init+0x23c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d802      	bhi.n	8001e74 <HAL_I2C_Init+0xb4>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	e009      	b.n	8001e88 <HAL_I2C_Init+0xc8>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_I2C_Init+0x24c>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	3301      	adds	r3, #1
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4956      	ldr	r1, [pc, #344]	; (8001ffc <HAL_I2C_Init+0x23c>)
 8001ea4:	428b      	cmp	r3, r1
 8001ea6:	d80d      	bhi.n	8001ec4 <HAL_I2C_Init+0x104>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e59      	subs	r1, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	bf38      	it	cc
 8001ec0:	2304      	movcc	r3, #4
 8001ec2:	e04f      	b.n	8001f64 <HAL_I2C_Init+0x1a4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HAL_I2C_Init+0x130>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e012      	b.n	8001f16 <HAL_I2C_Init+0x156>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	0099      	lsls	r1, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Init+0x15e>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e022      	b.n	8001f64 <HAL_I2C_Init+0x1a4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10e      	bne.n	8001f44 <HAL_I2C_Init+0x184>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e58      	subs	r0, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	440b      	add	r3, r1
 8001f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	e00f      	b.n	8001f64 <HAL_I2C_Init+0x1a4>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	0099      	lsls	r1, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6809      	ldr	r1, [r1, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6911      	ldr	r1, [r2, #16]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	000186a0 	.word	0x000186a0
 8002000:	001e847f 	.word	0x001e847f
 8002004:	003d08ff 	.word	0x003d08ff
 8002008:	431bde83 	.word	0x431bde83
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	461a      	mov	r2, r3
 800201c:	460b      	mov	r3, r1
 800201e:	817b      	strh	r3, [r7, #10]
 8002020:	4613      	mov	r3, r2
 8002022:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff f922 	bl	800126c <HAL_GetTick>
 8002028:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b20      	cmp	r3, #32
 8002034:	f040 80e0 	bne.w	80021f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2319      	movs	r3, #25
 800203e:	2201      	movs	r2, #1
 8002040:	4970      	ldr	r1, [pc, #448]	; (8002204 <HAL_I2C_Master_Transmit+0x1f4>)
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fc5e 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800204e:	2302      	movs	r3, #2
 8002050:	e0d3      	b.n	80021fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_I2C_Master_Transmit+0x50>
 800205c:	2302      	movs	r3, #2
 800205e:	e0cc      	b.n	80021fa <HAL_I2C_Master_Transmit+0x1ea>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d007      	beq.n	8002086 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002094:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2221      	movs	r2, #33	; 0x21
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2210      	movs	r2, #16
 80020a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	893a      	ldrh	r2, [r7, #8]
 80020b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a50      	ldr	r2, [pc, #320]	; (8002208 <HAL_I2C_Master_Transmit+0x1f8>)
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020c8:	8979      	ldrh	r1, [r7, #10]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fad2 	bl	8002678 <I2C_MasterRequestWrite>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e08d      	b.n	80021fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020f4:	e066      	b.n	80021c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	6a39      	ldr	r1, [r7, #32]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fcd8 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00d      	beq.n	8002122 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b04      	cmp	r3, #4
 800210c:	d107      	bne.n	800211e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06b      	b.n	80021fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b04      	cmp	r3, #4
 800215e:	d11b      	bne.n	8002198 <HAL_I2C_Master_Transmit+0x188>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	d017      	beq.n	8002198 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	6a39      	ldr	r1, [r7, #32]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fcc8 	bl	8002b32 <I2C_WaitOnBTFFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00d      	beq.n	80021c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d107      	bne.n	80021c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e01a      	b.n	80021fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d194      	bne.n	80020f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e000      	b.n	80021fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021f8:	2302      	movs	r3, #2
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	00100002 	.word	0x00100002
 8002208:	ffff0000 	.word	0xffff0000

0800220c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	817b      	strh	r3, [r7, #10]
 800221e:	460b      	mov	r3, r1
 8002220:	813b      	strh	r3, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002226:	f7ff f821 	bl	800126c <HAL_GetTick>
 800222a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b20      	cmp	r3, #32
 8002236:	f040 8218 	bne.w	800266a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2319      	movs	r3, #25
 8002240:	2201      	movs	r2, #1
 8002242:	4981      	ldr	r1, [pc, #516]	; (8002448 <HAL_I2C_Mem_Read+0x23c>)
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fb5d 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002250:	2302      	movs	r3, #2
 8002252:	e20b      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_I2C_Mem_Read+0x56>
 800225e:	2302      	movs	r3, #2
 8002260:	e204      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d007      	beq.n	8002288 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002296:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2222      	movs	r2, #34	; 0x22
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2240      	movs	r2, #64	; 0x40
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a61      	ldr	r2, [pc, #388]	; (800244c <HAL_I2C_Mem_Read+0x240>)
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ca:	88f8      	ldrh	r0, [r7, #6]
 80022cc:	893a      	ldrh	r2, [r7, #8]
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	4603      	mov	r3, r0
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fa42 	bl	8002764 <I2C_RequestMemoryRead>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e1c0      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d113      	bne.n	800231a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e194      	b.n	8002644 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	2b01      	cmp	r3, #1
 8002320:	d11d      	bne.n	800235e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002330:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002332:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002358:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800235a:	b662      	cpsie	i
 800235c:	e172      	b.n	8002644 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	2b02      	cmp	r3, #2
 8002364:	d11d      	bne.n	80023a2 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002374:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002376:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800239e:	b662      	cpsie	i
 80023a0:	e150      	b.n	8002644 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023c8:	e13c      	b.n	8002644 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	f200 80f5 	bhi.w	80025be <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d123      	bne.n	8002424 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fbe7 	bl	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e13d      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002422:	e10f      	b.n	8002644 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	2b02      	cmp	r3, #2
 800242a:	d150      	bne.n	80024ce <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	2200      	movs	r2, #0
 8002434:	4906      	ldr	r1, [pc, #24]	; (8002450 <HAL_I2C_Mem_Read+0x244>)
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fa64 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e112      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
 8002446:	bf00      	nop
 8002448:	00100002 	.word	0x00100002
 800244c:	ffff0000 	.word	0xffff0000
 8002450:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002454:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002464:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002498:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024cc:	e0ba      	b.n	8002644 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	2200      	movs	r2, #0
 80024d6:	4967      	ldr	r1, [pc, #412]	; (8002674 <HAL_I2C_Mem_Read+0x468>)
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fa13 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0c1      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	2200      	movs	r2, #0
 8002534:	494f      	ldr	r1, [pc, #316]	; (8002674 <HAL_I2C_Mem_Read+0x468>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f9e4 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e092      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002588:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025bc:	e042      	b.n	8002644 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 faf6 	bl	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04c      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d118      	bne.n	8002644 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f aebe 	bne.w	80023ca <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	00010004 	.word	0x00010004

08002678 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	460b      	mov	r3, r1
 8002686:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d006      	beq.n	80026a2 <I2C_MasterRequestWrite+0x2a>
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d003      	beq.n	80026a2 <I2C_MasterRequestWrite+0x2a>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026a0:	d108      	bne.n	80026b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e00b      	b.n	80026cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	2b12      	cmp	r3, #18
 80026ba:	d107      	bne.n	80026cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f913 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e035      	b.n	8002754 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f0:	d108      	bne.n	8002704 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002700:	611a      	str	r2, [r3, #16]
 8002702:	e01b      	b.n	800273c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002704:	897b      	ldrh	r3, [r7, #10]
 8002706:	11db      	asrs	r3, r3, #7
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 0306 	and.w	r3, r3, #6
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f063 030f 	orn	r3, r3, #15
 8002714:	b2da      	uxtb	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	490e      	ldr	r1, [pc, #56]	; (800275c <I2C_MasterRequestWrite+0xe4>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f945 	bl	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e010      	b.n	8002754 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <I2C_MasterRequestWrite+0xe8>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f935 	bl	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	00010008 	.word	0x00010008
 8002760:	00010002 	.word	0x00010002

08002764 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	4608      	mov	r0, r1
 800276e:	4611      	mov	r1, r2
 8002770:	461a      	mov	r2, r3
 8002772:	4603      	mov	r3, r0
 8002774:	817b      	strh	r3, [r7, #10]
 8002776:	460b      	mov	r3, r1
 8002778:	813b      	strh	r3, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800278c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800279c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f8aa 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e09e      	b.n	80028f8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	494c      	ldr	r1, [pc, #304]	; (8002900 <I2C_RequestMemoryRead+0x19c>)
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f8ee 	bl	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e08b      	b.n	80028f8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	6a39      	ldr	r1, [r7, #32]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f958 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b04      	cmp	r3, #4
 800280c:	d107      	bne.n	800281e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06a      	b.n	80028f8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	e021      	b.n	8002878 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002834:	893b      	ldrh	r3, [r7, #8]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29b      	uxth	r3, r3
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	6a39      	ldr	r1, [r7, #32]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f932 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b04      	cmp	r3, #4
 8002858:	d107      	bne.n	800286a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002868:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e044      	b.n	80028f8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800286e:	893b      	ldrh	r3, [r7, #8]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	6a39      	ldr	r1, [r7, #32]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f917 	bl	8002ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2b04      	cmp	r3, #4
 800288e:	d107      	bne.n	80028a0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e029      	b.n	80028f8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f81f 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e013      	b.n	80028f8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	6a3a      	ldr	r2, [r7, #32]
 80028e4:	4906      	ldr	r1, [pc, #24]	; (8002900 <I2C_RequestMemoryRead+0x19c>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f863 	bl	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	00010002 	.word	0x00010002

08002904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002914:	e025      	b.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291c:	d021      	beq.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291e:	f7fe fca5 	bl	800126c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d302      	bcc.n	8002934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d116      	bne.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0220 	orr.w	r2, r3, #32
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e023      	b.n	80029aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10d      	bne.n	8002988 <I2C_WaitOnFlagUntilTimeout+0x84>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	e00c      	b.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d0b6      	beq.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029c0:	e051      	b.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d0:	d123      	bne.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0204 	orr.w	r2, r3, #4
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e046      	b.n	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a20:	d021      	beq.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7fe fc23 	bl	800126c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d116      	bne.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f043 0220 	orr.w	r2, r3, #32
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e020      	b.n	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10c      	bne.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	43da      	mvns	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e00b      	b.n	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	43da      	mvns	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d18d      	bne.n	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002abc:	e02d      	b.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f8ce 	bl	8002c60 <I2C_IsAcknowledgeFailed>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e02d      	b.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad4:	d021      	beq.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7fe fbc9 	bl	800126c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d116      	bne.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e007      	b.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d1ca      	bne.n	8002abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b3e:	e02d      	b.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f88d 	bl	8002c60 <I2C_IsAcknowledgeFailed>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e02d      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b56:	d021      	beq.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b58:	f7fe fb88 	bl	800126c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d302      	bcc.n	8002b6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e007      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d1ca      	bne.n	8002b40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bc0:	e042      	b.n	8002c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d119      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0210 	mvn.w	r2, #16
 8002bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e029      	b.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7fe fb32 	bl	800126c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e007      	b.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d1b5      	bne.n	8002bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d11b      	bne.n	8002cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e26c      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8087 	beq.w	8002dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ce8:	4b8f      	ldr	r3, [pc, #572]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
 8002cf4:	4b8c      	ldr	r3, [pc, #560]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d10b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x12c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d168      	bne.n	8002de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e246      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x76>
 8002d24:	4b80      	ldr	r3, [pc, #512]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7f      	ldr	r2, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7a      	ldr	r2, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b78      	ldr	r3, [pc, #480]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a77      	ldr	r2, [pc, #476]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0xbc>
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a71      	ldr	r2, [pc, #452]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d78:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a67      	ldr	r2, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe fa68 	bl	800126c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe fa64 	bl	800126c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1fa      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe4>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fa54 	bl	800126c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fa50 	bl	800126c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1e6      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x10c>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df6:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
 8002e0e:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1ba      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4939      	ldr	r1, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e03a      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe fa09 	bl	800126c <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7fe fa05 	bl	800126c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e19b      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4927      	ldr	r1, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe f9e8 	bl	800126c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe f9e4 	bl	800126c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e17a      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03a      	beq.n	8002f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d019      	beq.n	8002f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f9c8 	bl	800126c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe f9c4 	bl	800126c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e15a      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f000 faac 	bl	800345c <RCC_Delay>
 8002f04:	e01c      	b.n	8002f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7fe f9ae 	bl	800126c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe f9aa 	bl	800126c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d908      	bls.n	8002f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e140      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	42420000 	.word	0x42420000
 8002f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b9e      	ldr	r3, [pc, #632]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e9      	bne.n	8002f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a6 	beq.w	800309a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b94      	ldr	r3, [pc, #592]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a93      	ldr	r2, [pc, #588]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]
 8002f6a:	4b91      	ldr	r3, [pc, #580]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b8e      	ldr	r3, [pc, #568]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a8a      	ldr	r2, [pc, #552]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe f96b 	bl	800126c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fe f967 	bl	800126c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0fd      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x312>
 8002fc0:	4b7b      	ldr	r3, [pc, #492]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a7a      	ldr	r2, [pc, #488]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	e02d      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	e01c      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x356>
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a6c      	ldr	r2, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e00b      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	4b64      	ldr	r3, [pc, #400]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d015      	beq.n	800305e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fe f91b 	bl	800126c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe f917 	bl	800126c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0ab      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b57      	ldr	r3, [pc, #348]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <HAL_RCC_OscConfig+0x37e>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe f905 	bl	800126c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe f901 	bl	800126c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e095      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a47      	ldr	r2, [pc, #284]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8081 	beq.w	80031a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a4:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d061      	beq.n	8003174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d146      	bne.n	8003146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fe f8d5 	bl	800126c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe f8d1 	bl	800126c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e067      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f023 020f 	bic.w	r2, r3, #15
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	492d      	ldr	r1, [pc, #180]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a19      	ldr	r1, [r3, #32]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	430b      	orrs	r3, r1
 8003112:	4927      	ldr	r1, [pc, #156]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe f8a5 	bl	800126c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe f8a1 	bl	800126c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e037      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x46a>
 8003144:	e02f      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe f88e 	bl	800126c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe f88a 	bl	800126c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e020      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x498>
 8003172:	e018      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e013      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42420060 	.word	0x42420060

080031bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0a0      	b.n	8003312 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b4c      	ldr	r3, [pc, #304]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a4b      	ldr	r2, [pc, #300]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 80031ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a45      	ldr	r2, [pc, #276]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 8003206:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800320a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4940      	ldr	r1, [pc, #256]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d040      	beq.n	80032ac <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e067      	b.n	8003312 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e05b      	b.n	8003312 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e053      	b.n	8003312 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4929      	ldr	r1, [pc, #164]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7fd fff6 	bl	800126c <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7fd fff2 	bl	800126c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e03b      	b.n	8003312 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4915      	ldr	r1, [pc, #84]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	490d      	ldr	r1, [pc, #52]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ea:	f000 f81f 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032ee:	4601      	mov	r1, r0
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x160>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x164>)
 80032fc:	5cd3      	ldrb	r3, [r2, r3]
 80032fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_RCC_ClockConfig+0x168>)
 8003304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_RCC_ClockConfig+0x16c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd ff6c 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	08006c80 	.word	0x08006c80
 8003324:	2000005c 	.word	0x2000005c
 8003328:	20000000 	.word	0x20000000

0800332c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	b490      	push	{r4, r7}
 800332e:	b08e      	sub	sp, #56	; 0x38
 8003330:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003334:	f107 0414 	add.w	r4, r7, #20
 8003338:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800333a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800333e:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003340:	1d3c      	adds	r4, r7, #4
 8003342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334c:	2300      	movs	r3, #0
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003350:	2300      	movs	r3, #0
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b04      	cmp	r3, #4
 800336a:	d002      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x46>
 800336c:	2b08      	cmp	r3, #8
 800336e:	d003      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x4c>
 8003370:	e02c      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003372:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003376:	e02c      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	0c9b      	lsrs	r3, r3, #18
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003384:	4413      	add	r3, r2
 8003386:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d012      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033a2:	4413      	add	r3, r2
 80033a4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ae:	fb02 f203 	mul.w	r2, r2, r3
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ba:	e004      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3738      	adds	r7, #56	; 0x38
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc90      	pop	{r4, r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	08006c60 	.word	0x08006c60
 80033e4:	08006c70 	.word	0x08006c70
 80033e8:	40021000 	.word	0x40021000
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	003d0900 	.word	0x003d0900
 80033f4:	007a1200 	.word	0x007a1200

080033f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b02      	ldr	r3, [pc, #8]	; (8003408 <HAL_RCC_GetHCLKFreq+0x10>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	2000005c 	.word	0x2000005c

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003410:	f7ff fff2 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003414:	4601      	mov	r1, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4a03      	ldr	r2, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	08006c90 	.word	0x08006c90

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003438:	f7ff ffde 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 800343c:	4601      	mov	r1, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	0adb      	lsrs	r3, r3, #11
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4a03      	ldr	r2, [pc, #12]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	08006c90 	.word	0x08006c90

0800345c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <RCC_Delay+0x34>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <RCC_Delay+0x38>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0a5b      	lsrs	r3, r3, #9
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003478:	bf00      	nop
  }
  while (Delay --);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	60fa      	str	r2, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f9      	bne.n	8003478 <RCC_Delay+0x1c>
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	2000005c 	.word	0x2000005c
 8003494:	10624dd3 	.word	0x10624dd3

08003498 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d07d      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034b4:	2300      	movs	r3, #0
 80034b6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b8:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a43      	ldr	r2, [pc, #268]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	61d3      	str	r3, [r2, #28]
 80034d0:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d118      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ec:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f8:	f7fd feb8 	bl	800126c <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	e008      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fd feb4 	bl	800126c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e05e      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003512:	4b32      	ldr	r3, [pc, #200]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800351e:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d02e      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d027      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800353c:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003544:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003552:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d014      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fd fe83 	bl	800126c <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fd fe7f 	bl	800126c <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e027      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ee      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	490f      	ldr	r1, [pc, #60]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800359a:	4313      	orrs	r3, r2
 800359c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d105      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4903      	ldr	r1, [pc, #12]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
 80035e0:	42420440 	.word	0x42420440

080035e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e01d      	b.n	8003632 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f002 fd06 	bl	800601c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f000 fb94 	bl	8003d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b06      	cmp	r3, #6
 8003662:	d007      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e01d      	b.n	80036ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f002 fd4c 	bl	8006144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fb46 	bl	8003d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	d841      	bhi.n	800376c <HAL_TIM_PWM_Start_IT+0x94>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <HAL_TIM_PWM_Start_IT+0x18>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003725 	.word	0x08003725
 80036f4:	0800376d 	.word	0x0800376d
 80036f8:	0800376d 	.word	0x0800376d
 80036fc:	0800376d 	.word	0x0800376d
 8003700:	08003737 	.word	0x08003737
 8003704:	0800376d 	.word	0x0800376d
 8003708:	0800376d 	.word	0x0800376d
 800370c:	0800376d 	.word	0x0800376d
 8003710:	08003749 	.word	0x08003749
 8003714:	0800376d 	.word	0x0800376d
 8003718:	0800376d 	.word	0x0800376d
 800371c:	0800376d 	.word	0x0800376d
 8003720:	0800375b 	.word	0x0800375b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0202 	orr.w	r2, r2, #2
 8003732:	60da      	str	r2, [r3, #12]
      break;
 8003734:	e01b      	b.n	800376e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0204 	orr.w	r2, r2, #4
 8003744:	60da      	str	r2, [r3, #12]
      break;
 8003746:	e012      	b.n	800376e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0208 	orr.w	r2, r2, #8
 8003756:	60da      	str	r2, [r3, #12]
      break;
 8003758:	e009      	b.n	800376e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0210 	orr.w	r2, r2, #16
 8003768:	60da      	str	r2, [r3, #12]
      break;
 800376a:	e000      	b.n	800376e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800376c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2201      	movs	r2, #1
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fddc 	bl	8004334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <HAL_TIM_PWM_Start_IT+0x114>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_TIM_PWM_Start_IT+0xcc>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <HAL_TIM_PWM_Start_IT+0x118>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_TIM_PWM_Start_IT+0xcc>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_TIM_PWM_Start_IT+0x11c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Start_IT+0xcc>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <HAL_TIM_PWM_Start_IT+0x120>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Start_IT+0xd0>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Start_IT+0xd2>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_TIM_PWM_Start_IT+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d007      	beq.n	80037e0 <HAL_TIM_PWM_Start_IT+0x108>
  {
    __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40014400 	.word	0x40014400
 80037f8:	40014800 	.word	0x40014800

080037fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0202 	mvn.w	r2, #2
 8003828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa6a 	bl	8003d18 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa5d 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fa6c 	bl	8003d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b04      	cmp	r3, #4
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0204 	mvn.w	r2, #4
 800387c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa40 	bl	8003d18 <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa33 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fa42 	bl	8003d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0208 	mvn.w	r2, #8
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa16 	bl	8003d18 <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fa09 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fa18 	bl	8003d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b10      	cmp	r3, #16
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b10      	cmp	r3, #16
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0210 	mvn.w	r2, #16
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2208      	movs	r2, #8
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f9ec 	bl	8003d18 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f9df 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f9ee 	bl	8003d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10e      	bne.n	8003980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0201 	mvn.w	r2, #1
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f001 fd98 	bl	80054b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	d10e      	bne.n	80039ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d107      	bne.n	80039ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fd35 	bl	8004416 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d10e      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d107      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9b2 	bl	8003d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0220 	mvn.w	r2, #32
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fd00 	bl	8004404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e0b4      	b.n	8003b90 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	f200 809f 	bhi.w	8003b7c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003b7d 	.word	0x08003b7d
 8003a4c:	08003b7d 	.word	0x08003b7d
 8003a50:	08003b7d 	.word	0x08003b7d
 8003a54:	08003ab9 	.word	0x08003ab9
 8003a58:	08003b7d 	.word	0x08003b7d
 8003a5c:	08003b7d 	.word	0x08003b7d
 8003a60:	08003b7d 	.word	0x08003b7d
 8003a64:	08003afb 	.word	0x08003afb
 8003a68:	08003b7d 	.word	0x08003b7d
 8003a6c:	08003b7d 	.word	0x08003b7d
 8003a70:	08003b7d 	.word	0x08003b7d
 8003a74:	08003b3b 	.word	0x08003b3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f9e6 	bl	8003e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0208 	orr.w	r2, r2, #8
 8003a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	619a      	str	r2, [r3, #24]
      break;
 8003ab6:	e062      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fa4a 	bl	8003f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	619a      	str	r2, [r3, #24]
      break;
 8003af8:	e041      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 faa5 	bl	8004050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0208 	orr.w	r2, r2, #8
 8003b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0204 	bic.w	r2, r2, #4
 8003b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
      break;
 8003b38:	e021      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fb01 	bl	8004148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69d9      	ldr	r1, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	021a      	lsls	r2, r3, #8
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	61da      	str	r2, [r3, #28]
      break;
 8003b7a:	e000      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_ConfigClockSource+0x18>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e0a6      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x166>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d067      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x120>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d80b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x6c>
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d073      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x140>
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d802      	bhi.n	8003bfa <HAL_TIM_ConfigClockSource+0x62>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d06f      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003bf8:	e078      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d06c      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x140>
 8003bfe:	2b30      	cmp	r3, #48	; 0x30
 8003c00:	d06a      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c02:	e073      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c04:	2b70      	cmp	r3, #112	; 0x70
 8003c06:	d00d      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0x8c>
 8003c08:	2b70      	cmp	r3, #112	; 0x70
 8003c0a:	d804      	bhi.n	8003c16 <HAL_TIM_ConfigClockSource+0x7e>
 8003c0c:	2b50      	cmp	r3, #80	; 0x50
 8003c0e:	d033      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0xe0>
 8003c10:	2b60      	cmp	r3, #96	; 0x60
 8003c12:	d041      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c14:	e06a      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1a:	d066      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x152>
 8003c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c20:	d017      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c22:	e063      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f000 fb5f 	bl	80042f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	609a      	str	r2, [r3, #8]
      break;
 8003c50:	e04c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6899      	ldr	r1, [r3, #8]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f000 fb48 	bl	80042f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c74:	609a      	str	r2, [r3, #8]
      break;
 8003c76:	e039      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f000 fabf 	bl	8004208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2150      	movs	r1, #80	; 0x50
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fb16 	bl	80042c2 <TIM_ITRx_SetConfig>
      break;
 8003c96:	e029      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f000 fadd 	bl	8004264 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2160      	movs	r1, #96	; 0x60
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fb06 	bl	80042c2 <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e019      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f000 fa9f 	bl	8004208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2140      	movs	r1, #64	; 0x40
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 faf6 	bl	80042c2 <TIM_ITRx_SetConfig>
      break;
 8003cd6:	e009      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 faed 	bl	80042c2 <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
	...

08003d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a35      	ldr	r2, [pc, #212]	; (8003e38 <TIM_Base_SetConfig+0xe8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_Base_SetConfig+0x30>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d007      	beq.n	8003d80 <TIM_Base_SetConfig+0x30>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <TIM_Base_SetConfig+0xec>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0x30>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a31      	ldr	r2, [pc, #196]	; (8003e40 <TIM_Base_SetConfig+0xf0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d108      	bne.n	8003d92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <TIM_Base_SetConfig+0xe8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d017      	beq.n	8003dca <TIM_Base_SetConfig+0x7a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d013      	beq.n	8003dca <TIM_Base_SetConfig+0x7a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <TIM_Base_SetConfig+0xec>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00f      	beq.n	8003dca <TIM_Base_SetConfig+0x7a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a24      	ldr	r2, [pc, #144]	; (8003e40 <TIM_Base_SetConfig+0xf0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_Base_SetConfig+0x7a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <TIM_Base_SetConfig+0xf4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_Base_SetConfig+0x7a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <TIM_Base_SetConfig+0xf8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0x7a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <TIM_Base_SetConfig+0xfc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <TIM_Base_SetConfig+0xe8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <TIM_Base_SetConfig+0xd0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <TIM_Base_SetConfig+0xf4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <TIM_Base_SetConfig+0xd0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <TIM_Base_SetConfig+0xf8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_Base_SetConfig+0xd0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <TIM_Base_SetConfig+0xfc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d103      	bne.n	8003e28 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	615a      	str	r2, [r3, #20]
}
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40014000 	.word	0x40014000
 8003e48:	40014400 	.word	0x40014400
 8003e4c:	40014800 	.word	0x40014800

08003e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 0201 	bic.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f023 0302 	bic.w	r3, r3, #2
 8003e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <TIM_OC1_SetConfig+0xf8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_OC1_SetConfig+0x74>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a27      	ldr	r2, [pc, #156]	; (8003f4c <TIM_OC1_SetConfig+0xfc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_OC1_SetConfig+0x74>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <TIM_OC1_SetConfig+0x100>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC1_SetConfig+0x74>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a25      	ldr	r2, [pc, #148]	; (8003f54 <TIM_OC1_SetConfig+0x104>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10c      	bne.n	8003ede <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0308 	bic.w	r3, r3, #8
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <TIM_OC1_SetConfig+0xf8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_OC1_SetConfig+0xae>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <TIM_OC1_SetConfig+0xfc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <TIM_OC1_SetConfig+0xae>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <TIM_OC1_SetConfig+0x100>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_OC1_SetConfig+0xae>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <TIM_OC1_SetConfig+0x104>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d111      	bne.n	8003f22 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	621a      	str	r2, [r3, #32]
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0210 	bic.w	r2, r3, #16
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f023 0320 	bic.w	r3, r3, #32
 8003fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a23      	ldr	r2, [pc, #140]	; (8004040 <TIM_OC2_SetConfig+0xe8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10d      	bne.n	8003fd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	; (8004040 <TIM_OC2_SetConfig+0xe8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_OC2_SetConfig+0x9c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a19      	ldr	r2, [pc, #100]	; (8004044 <TIM_OC2_SetConfig+0xec>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_OC2_SetConfig+0x9c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	; (8004048 <TIM_OC2_SetConfig+0xf0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_OC2_SetConfig+0x9c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <TIM_OC2_SetConfig+0xf4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d113      	bne.n	800401c <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40014000 	.word	0x40014000
 8004048:	40014400 	.word	0x40014400
 800404c:	40014800 	.word	0x40014800

08004050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <TIM_OC3_SetConfig+0xe8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d10d      	bne.n	80040ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <TIM_OC3_SetConfig+0xe8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00b      	beq.n	80040ea <TIM_OC3_SetConfig+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a19      	ldr	r2, [pc, #100]	; (800413c <TIM_OC3_SetConfig+0xec>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <TIM_OC3_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <TIM_OC3_SetConfig+0xf0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_OC3_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <TIM_OC3_SetConfig+0xf4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d113      	bne.n	8004112 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	621a      	str	r2, [r3, #32]
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800

08004148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <TIM_OC4_SetConfig+0xb0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <TIM_OC4_SetConfig+0x78>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <TIM_OC4_SetConfig+0xb4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <TIM_OC4_SetConfig+0x78>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a13      	ldr	r2, [pc, #76]	; (8004200 <TIM_OC4_SetConfig+0xb8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_OC4_SetConfig+0x78>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <TIM_OC4_SetConfig+0xbc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d109      	bne.n	80041d4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40014000 	.word	0x40014000
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800

08004208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 030a 	bic.w	r3, r3, #10
 8004244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f023 0210 	bic.w	r2, r3, #16
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800428e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	031b      	lsls	r3, r3, #12
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	f043 0307 	orr.w	r3, r3, #7
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b087      	sub	sp, #28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004310:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	021a      	lsls	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	431a      	orrs	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	609a      	str	r2, [r3, #8]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2201      	movs	r2, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	43db      	mvns	r3, r3
 8004356:	401a      	ands	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e032      	b.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043cc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03f      	b.n	80044ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f001 feea 	bl	8006228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f829 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004504:	f023 030c 	bic.w	r3, r3, #12
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	68f9      	ldr	r1, [r7, #12]
 800450e:	430b      	orrs	r3, r1
 8004510:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004530:	f040 80a5 	bne.w	800467e <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4aa4      	ldr	r2, [pc, #656]	; (80047cc <UART_SetConfig+0x308>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d14f      	bne.n	80045de <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800453e:	f7fe ff79 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004542:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009a      	lsls	r2, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	4a9d      	ldr	r2, [pc, #628]	; (80047d0 <UART_SetConfig+0x30c>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	0119      	lsls	r1, r3, #4
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009a      	lsls	r2, r3, #2
 800456e:	441a      	add	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fbb2 f2f3 	udiv	r2, r2, r3
 800457a:	4b95      	ldr	r3, [pc, #596]	; (80047d0 <UART_SetConfig+0x30c>)
 800457c:	fba3 0302 	umull	r0, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	2064      	movs	r0, #100	; 0x64
 8004584:	fb00 f303 	mul.w	r3, r0, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	3332      	adds	r3, #50	; 0x32
 800458e:	4a90      	ldr	r2, [pc, #576]	; (80047d0 <UART_SetConfig+0x30c>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800459c:	4419      	add	r1, r3
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009a      	lsls	r2, r3, #2
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b4:	4b86      	ldr	r3, [pc, #536]	; (80047d0 <UART_SetConfig+0x30c>)
 80045b6:	fba3 0302 	umull	r0, r3, r3, r2
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	2064      	movs	r0, #100	; 0x64
 80045be:	fb00 f303 	mul.w	r3, r0, r3
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	3332      	adds	r3, #50	; 0x32
 80045c8:	4a81      	ldr	r2, [pc, #516]	; (80047d0 <UART_SetConfig+0x30c>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	f003 0207 	and.w	r2, r3, #7
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	440a      	add	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80045dc:	e0f1      	b.n	80047c2 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045de:	f7fe ff15 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 80045e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	009a      	lsls	r2, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	4a75      	ldr	r2, [pc, #468]	; (80047d0 <UART_SetConfig+0x30c>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	0119      	lsls	r1, r3, #4
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009a      	lsls	r2, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fbb2 f2f3 	udiv	r2, r2, r3
 800461a:	4b6d      	ldr	r3, [pc, #436]	; (80047d0 <UART_SetConfig+0x30c>)
 800461c:	fba3 0302 	umull	r0, r3, r3, r2
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	2064      	movs	r0, #100	; 0x64
 8004624:	fb00 f303 	mul.w	r3, r0, r3
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	3332      	adds	r3, #50	; 0x32
 800462e:	4a68      	ldr	r2, [pc, #416]	; (80047d0 <UART_SetConfig+0x30c>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800463c:	4419      	add	r1, r3
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009a      	lsls	r2, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	fbb2 f2f3 	udiv	r2, r2, r3
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <UART_SetConfig+0x30c>)
 8004656:	fba3 0302 	umull	r0, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	2064      	movs	r0, #100	; 0x64
 800465e:	fb00 f303 	mul.w	r3, r0, r3
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	3332      	adds	r3, #50	; 0x32
 8004668:	4a59      	ldr	r2, [pc, #356]	; (80047d0 <UART_SetConfig+0x30c>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	f003 0207 	and.w	r2, r3, #7
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	440a      	add	r2, r1
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	e0a1      	b.n	80047c2 <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a52      	ldr	r2, [pc, #328]	; (80047cc <UART_SetConfig+0x308>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d14e      	bne.n	8004726 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004688:	f7fe fed4 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 800468c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009a      	lsls	r2, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <UART_SetConfig+0x30c>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	0119      	lsls	r1, r3, #4
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009a      	lsls	r2, r3, #2
 80046b8:	441a      	add	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c4:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <UART_SetConfig+0x30c>)
 80046c6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2064      	movs	r0, #100	; 0x64
 80046ce:	fb00 f303 	mul.w	r3, r0, r3
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	3332      	adds	r3, #50	; 0x32
 80046d8:	4a3d      	ldr	r2, [pc, #244]	; (80047d0 <UART_SetConfig+0x30c>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e4:	4419      	add	r1, r3
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	009a      	lsls	r2, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <UART_SetConfig+0x30c>)
 80046fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2064      	movs	r0, #100	; 0x64
 8004706:	fb00 f303 	mul.w	r3, r0, r3
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	3332      	adds	r3, #50	; 0x32
 8004710:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <UART_SetConfig+0x30c>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	440a      	add	r2, r1
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	e04d      	b.n	80047c2 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004726:	f7fe fe71 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 800472a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009a      	lsls	r2, r3, #2
 8004736:	441a      	add	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <UART_SetConfig+0x30c>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	0119      	lsls	r1, r3, #4
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009a      	lsls	r2, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <UART_SetConfig+0x30c>)
 8004764:	fba3 0302 	umull	r0, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2064      	movs	r0, #100	; 0x64
 800476c:	fb00 f303 	mul.w	r3, r0, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <UART_SetConfig+0x30c>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004782:	4419      	add	r1, r3
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fbb2 f2f3 	udiv	r2, r2, r3
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <UART_SetConfig+0x30c>)
 800479c:	fba3 0302 	umull	r0, r3, r3, r2
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	2064      	movs	r0, #100	; 0x64
 80047a4:	fb00 f303 	mul.w	r3, r0, r3
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	3332      	adds	r3, #50	; 0x32
 80047ae:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <UART_SetConfig+0x30c>)
 80047b0:	fba2 2303 	umull	r2, r3, r2, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	f003 020f 	and.w	r2, r3, #15
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	440a      	add	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40013800 	.word	0x40013800
 80047d0:	51eb851f 	.word	0x51eb851f

080047d4 <kalmanInit>:
 *  Created on: 13.11.2018
 *      Author: user
 */
#include "Kalman.h"

void kalmanInit(){
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
/*Variables used to adjust filter*/


	Q_angle = 0.0005f;
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <kalmanInit+0x4c>)
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <kalmanInit+0x50>)
 80047dc:	601a      	str	r2, [r3, #0]
	Q_bias = 0.0005f;
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <kalmanInit+0x54>)
 80047e0:	4a10      	ldr	r2, [pc, #64]	; (8004824 <kalmanInit+0x50>)
 80047e2:	601a      	str	r2, [r3, #0]
	R_measure = 0.0003f;
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <kalmanInit+0x58>)
 80047e6:	4a12      	ldr	r2, [pc, #72]	; (8004830 <kalmanInit+0x5c>)
 80047e8:	601a      	str	r2, [r3, #0]

	_angle = 0.0f; // Reset the angle
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <kalmanInit+0x60>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	801a      	strh	r2, [r3, #0]
	_bias = 0.0f; // Reset bias
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <kalmanInit+0x64>)
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

	P[0][0] = 0.0f;
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <kalmanInit+0x68>)
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
	P[0][1] = 0.0f;
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <kalmanInit+0x68>)
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	605a      	str	r2, [r3, #4]
	P[1][0] = 0.0f;
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <kalmanInit+0x68>)
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	609a      	str	r2, [r3, #8]
	P[1][1] = 0.0f;
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <kalmanInit+0x68>)
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	60da      	str	r2, [r3, #12]
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr
 8004820:	20000110 	.word	0x20000110
 8004824:	3a03126f 	.word	0x3a03126f
 8004828:	20000100 	.word	0x20000100
 800482c:	20000130 	.word	0x20000130
 8004830:	399d4952 	.word	0x399d4952
 8004834:	2000013c 	.word	0x2000013c
 8004838:	2000014c 	.word	0x2000014c
 800483c:	20000150 	.word	0x20000150

08004840 <getKalmanAngle>:


int16_t getKalmanAngle(float newAngle, float newRate, float dt) {
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b08b      	sub	sp, #44	; 0x2c
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]

    _rate = newRate - _bias;
 800484c:	4b8f      	ldr	r3, [pc, #572]	; (8004a8c <getKalmanAngle+0x24c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	68b8      	ldr	r0, [r7, #8]
 8004854:	f7fc f9c4 	bl	8000be0 <__aeabi_fsub>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	4b8c      	ldr	r3, [pc, #560]	; (8004a90 <getKalmanAngle+0x250>)
 800485e:	601a      	str	r2, [r3, #0]
    _angle += dt * _rate;
 8004860:	4b8c      	ldr	r3, [pc, #560]	; (8004a94 <getKalmanAngle+0x254>)
 8004862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fc fa70 	bl	8000d4c <__aeabi_i2f>
 800486c:	4604      	mov	r4, r0
 800486e:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <getKalmanAngle+0x250>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	f7fc fabd 	bl	8000df4 <__aeabi_fmul>
 800487a:	4603      	mov	r3, r0
 800487c:	4619      	mov	r1, r3
 800487e:	4620      	mov	r0, r4
 8004880:	f7fc f9b0 	bl	8000be4 <__addsf3>
 8004884:	4603      	mov	r3, r0
 8004886:	4618      	mov	r0, r3
 8004888:	f7fc fc7a 	bl	8001180 <__aeabi_f2iz>
 800488c:	4603      	mov	r3, r0
 800488e:	b21a      	sxth	r2, r3
 8004890:	4b80      	ldr	r3, [pc, #512]	; (8004a94 <getKalmanAngle+0x254>)
 8004892:	801a      	strh	r2, [r3, #0]

    // Update estimation error covariance - Project the error covariance ahead
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
 8004894:	4b80      	ldr	r3, [pc, #512]	; (8004a98 <getKalmanAngle+0x258>)
 8004896:	681c      	ldr	r4, [r3, #0]
 8004898:	4b7f      	ldr	r3, [pc, #508]	; (8004a98 <getKalmanAngle+0x258>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fc faa8 	bl	8000df4 <__aeabi_fmul>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	4b7b      	ldr	r3, [pc, #492]	; (8004a98 <getKalmanAngle+0x258>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f7fc f996 	bl	8000be0 <__aeabi_fsub>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b77      	ldr	r3, [pc, #476]	; (8004a98 <getKalmanAngle+0x258>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fc f98e 	bl	8000be0 <__aeabi_fsub>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	4b74      	ldr	r3, [pc, #464]	; (8004a9c <getKalmanAngle+0x25c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f7fc f988 	bl	8000be4 <__addsf3>
 80048d4:	4603      	mov	r3, r0
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fc fa8b 	bl	8000df4 <__aeabi_fmul>
 80048de:	4603      	mov	r3, r0
 80048e0:	4619      	mov	r1, r3
 80048e2:	4620      	mov	r0, r4
 80048e4:	f7fc f97e 	bl	8000be4 <__addsf3>
 80048e8:	4603      	mov	r3, r0
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <getKalmanAngle+0x258>)
 80048ee:	601a      	str	r2, [r3, #0]
    P[0][1] -= dt * P[1][1];
 80048f0:	4b69      	ldr	r3, [pc, #420]	; (8004a98 <getKalmanAngle+0x258>)
 80048f2:	685c      	ldr	r4, [r3, #4]
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <getKalmanAngle+0x258>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fc fa7a 	bl	8000df4 <__aeabi_fmul>
 8004900:	4603      	mov	r3, r0
 8004902:	4619      	mov	r1, r3
 8004904:	4620      	mov	r0, r4
 8004906:	f7fc f96b 	bl	8000be0 <__aeabi_fsub>
 800490a:	4603      	mov	r3, r0
 800490c:	461a      	mov	r2, r3
 800490e:	4b62      	ldr	r3, [pc, #392]	; (8004a98 <getKalmanAngle+0x258>)
 8004910:	605a      	str	r2, [r3, #4]
    P[1][0] -= dt * P[1][1];
 8004912:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <getKalmanAngle+0x258>)
 8004914:	689c      	ldr	r4, [r3, #8]
 8004916:	4b60      	ldr	r3, [pc, #384]	; (8004a98 <getKalmanAngle+0x258>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fc fa69 	bl	8000df4 <__aeabi_fmul>
 8004922:	4603      	mov	r3, r0
 8004924:	4619      	mov	r1, r3
 8004926:	4620      	mov	r0, r4
 8004928:	f7fc f95a 	bl	8000be0 <__aeabi_fsub>
 800492c:	4603      	mov	r3, r0
 800492e:	461a      	mov	r2, r3
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <getKalmanAngle+0x258>)
 8004932:	609a      	str	r2, [r3, #8]
    P[1][1] += Q_bias * dt;
 8004934:	4b58      	ldr	r3, [pc, #352]	; (8004a98 <getKalmanAngle+0x258>)
 8004936:	68dc      	ldr	r4, [r3, #12]
 8004938:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <getKalmanAngle+0x260>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc fa58 	bl	8000df4 <__aeabi_fmul>
 8004944:	4603      	mov	r3, r0
 8004946:	4619      	mov	r1, r3
 8004948:	4620      	mov	r0, r4
 800494a:	f7fc f94b 	bl	8000be4 <__addsf3>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	4b51      	ldr	r3, [pc, #324]	; (8004a98 <getKalmanAngle+0x258>)
 8004954:	60da      	str	r2, [r3, #12]

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    float S = P[0][0] + R_measure; // Estimate error
 8004956:	4b50      	ldr	r3, [pc, #320]	; (8004a98 <getKalmanAngle+0x258>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b52      	ldr	r3, [pc, #328]	; (8004aa4 <getKalmanAngle+0x264>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f7fc f93f 	bl	8000be4 <__addsf3>
 8004966:	4603      	mov	r3, r0
 8004968:	627b      	str	r3, [r7, #36]	; 0x24

    //Calculate Kalman gain
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
 800496a:	4b4b      	ldr	r3, [pc, #300]	; (8004a98 <getKalmanAngle+0x258>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004970:	4618      	mov	r0, r3
 8004972:	f7fc faf3 	bl	8000f5c <__aeabi_fdiv>
 8004976:	4603      	mov	r3, r0
 8004978:	613b      	str	r3, [r7, #16]
    K[1] = P[1][0] / S;
 800497a:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <getKalmanAngle+0x258>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004980:	4618      	mov	r0, r3
 8004982:	f7fc faeb 	bl	8000f5c <__aeabi_fdiv>
 8004986:	4603      	mov	r3, r0
 8004988:	617b      	str	r3, [r7, #20]

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    float y = newAngle - _angle; // Angle difference
 800498a:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <getKalmanAngle+0x254>)
 800498c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004990:	4618      	mov	r0, r3
 8004992:	f7fc f9db 	bl	8000d4c <__aeabi_i2f>
 8004996:	4603      	mov	r3, r0
 8004998:	4619      	mov	r1, r3
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7fc f920 	bl	8000be0 <__aeabi_fsub>
 80049a0:	4603      	mov	r3, r0
 80049a2:	623b      	str	r3, [r7, #32]

    //Update angle and bias
    _angle += (int16_t)(K[0] * y);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	6a39      	ldr	r1, [r7, #32]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fc fa23 	bl	8000df4 <__aeabi_fmul>
 80049ae:	4603      	mov	r3, r0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fc fbe5 	bl	8001180 <__aeabi_f2iz>
 80049b6:	4603      	mov	r3, r0
 80049b8:	b21b      	sxth	r3, r3
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <getKalmanAngle+0x254>)
 80049be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	b21a      	sxth	r2, r3
 80049ca:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <getKalmanAngle+0x254>)
 80049cc:	801a      	strh	r2, [r3, #0]
    _bias += K[1] * y;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	6a39      	ldr	r1, [r7, #32]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fc fa0e 	bl	8000df4 <__aeabi_fmul>
 80049d8:	4603      	mov	r3, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <getKalmanAngle+0x24c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f7fc f8fe 	bl	8000be4 <__addsf3>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <getKalmanAngle+0x24c>)
 80049ee:	601a      	str	r2, [r3, #0]

    // Calculate estimation error covariance - Update the error covariance
    float P00_temp = P[0][0];
 80049f0:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <getKalmanAngle+0x258>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61fb      	str	r3, [r7, #28]
    float P01_temp = P[0][1];
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <getKalmanAngle+0x258>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	61bb      	str	r3, [r7, #24]

    P[0][0] -= K[0] * P00_temp;
 80049fc:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <getKalmanAngle+0x258>)
 80049fe:	681c      	ldr	r4, [r3, #0]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	69f9      	ldr	r1, [r7, #28]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fc f9f5 	bl	8000df4 <__aeabi_fmul>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7fc f8e6 	bl	8000be0 <__aeabi_fsub>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461a      	mov	r2, r3
 8004a18:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <getKalmanAngle+0x258>)
 8004a1a:	601a      	str	r2, [r3, #0]
    P[0][1] -= K[0] * P01_temp;
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <getKalmanAngle+0x258>)
 8004a1e:	685c      	ldr	r4, [r3, #4]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	69b9      	ldr	r1, [r7, #24]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fc f9e5 	bl	8000df4 <__aeabi_fmul>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7fc f8d6 	bl	8000be0 <__aeabi_fsub>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <getKalmanAngle+0x258>)
 8004a3a:	605a      	str	r2, [r3, #4]
    P[1][0] -= K[1] * P00_temp;
 8004a3c:	4b16      	ldr	r3, [pc, #88]	; (8004a98 <getKalmanAngle+0x258>)
 8004a3e:	689c      	ldr	r4, [r3, #8]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	69f9      	ldr	r1, [r7, #28]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fc f9d5 	bl	8000df4 <__aeabi_fmul>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f7fc f8c6 	bl	8000be0 <__aeabi_fsub>
 8004a54:	4603      	mov	r3, r0
 8004a56:	461a      	mov	r2, r3
 8004a58:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <getKalmanAngle+0x258>)
 8004a5a:	609a      	str	r2, [r3, #8]
    P[1][1] -= K[1] * P01_temp;
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <getKalmanAngle+0x258>)
 8004a5e:	68dc      	ldr	r4, [r3, #12]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	69b9      	ldr	r1, [r7, #24]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fc f9c5 	bl	8000df4 <__aeabi_fmul>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7fc f8b6 	bl	8000be0 <__aeabi_fsub>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <getKalmanAngle+0x258>)
 8004a7a:	60da      	str	r2, [r3, #12]

    return _angle;
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <getKalmanAngle+0x254>)
 8004a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	372c      	adds	r7, #44	; 0x2c
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd90      	pop	{r4, r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	2000014c 	.word	0x2000014c
 8004a90:	20000124 	.word	0x20000124
 8004a94:	2000013c 	.word	0x2000013c
 8004a98:	20000150 	.word	0x20000150
 8004a9c:	20000110 	.word	0x20000110
 8004aa0:	20000100 	.word	0x20000100
 8004aa4:	20000130 	.word	0x20000130

08004aa8 <PID_Init>:
#include "PID.h"
#include "stm32f1xx_hal.h"
#include "main.h"
#include "math.h"

void PID_Init(){
 8004aa8:	b490      	push	{r4, r7}
 8004aaa:	af00      	add	r7, sp, #0
	speedIntegral = 0;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <PID_Init+0x30>)
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
	angleIntegral = 0;
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <PID_Init+0x34>)
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
	previousError = 0;
 8004abc:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <PID_Init+0x38>)
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	f04f 0400 	mov.w	r4, #0
 8004ac6:	e9c2 3400 	strd	r3, r4, [r2]
	previousSpeed = 0;
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <PID_Init+0x3c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	801a      	strh	r2, [r3, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc90      	pop	{r4, r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	20000144 	.word	0x20000144
 8004adc:	20000140 	.word	0x20000140
 8004ae0:	20000108 	.word	0x20000108
 8004ae4:	20000134 	.word	0x20000134

08004ae8 <anglePID>:


void anglePID(float refAngle, int8_t realAngle){
 8004ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004aec:	b08d      	sub	sp, #52	; 0x34
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	70fb      	strb	r3, [r7, #3]

	double error;
	float Kp = 5; //5.85
 8004af6:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <anglePID+0x1b0>)
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Ki = 0;
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
	float Kd = 0;
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
	double v = 0;
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	f04f 0400 	mov.w	r4, #0
 8004b0e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	float dt = ((1 + TIM2->PSC)*(1+TIM2->ARR))/24000000;
 8004b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b20:	3201      	adds	r2, #1
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	4a5d      	ldr	r2, [pc, #372]	; (8004c9c <anglePID+0x1b4>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	0d5b      	lsrs	r3, r3, #21
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fc f908 	bl	8000d44 <__aeabi_ui2f>
 8004b34:	4603      	mov	r3, r0
 8004b36:	617b      	str	r3, [r7, #20]
	/*
	if(realAngle >= (refAngle - 3) && realAngle <= (refAngle + 3)){
		realAngle = refAngle;
	}
*/
	error = refAngle - realAngle;
 8004b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fc f905 	bl	8000d4c <__aeabi_i2f>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc f84a 	bl	8000be0 <__aeabi_fsub>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fb fcc2 	bl	80004d8 <__aeabi_f2d>
 8004b54:	4603      	mov	r3, r0
 8004b56:	460c      	mov	r4, r1
 8004b58:	e9c7 3402 	strd	r3, r4, [r7, #8]
	angleIntegral = angleIntegral  + error * dt;
 8004b5c:	4b50      	ldr	r3, [pc, #320]	; (8004ca0 <anglePID+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fb fcb9 	bl	80004d8 <__aeabi_f2d>
 8004b66:	4604      	mov	r4, r0
 8004b68:	460d      	mov	r5, r1
 8004b6a:	6978      	ldr	r0, [r7, #20]
 8004b6c:	f7fb fcb4 	bl	80004d8 <__aeabi_f2d>
 8004b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b74:	f7fb fd08 	bl	8000588 <__aeabi_dmul>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	4629      	mov	r1, r5
 8004b80:	f7fb fb4c 	bl	800021c <__adddf3>
 8004b84:	4603      	mov	r3, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	f7fb ffd4 	bl	8000b38 <__aeabi_d2f>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b43      	ldr	r3, [pc, #268]	; (8004ca0 <anglePID+0x1b8>)
 8004b94:	601a      	str	r2, [r3, #0]
	v = Kp*(error + (Kd* (error - previousError) / dt) + Ki * angleIntegral);// * 1.33;
 8004b96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b98:	f7fb fc9e 	bl	80004d8 <__aeabi_f2d>
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	460e      	mov	r6, r1
 8004ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ba2:	f7fb fc99 	bl	80004d8 <__aeabi_f2d>
 8004ba6:	4680      	mov	r8, r0
 8004ba8:	4689      	mov	r9, r1
 8004baa:	4b3e      	ldr	r3, [pc, #248]	; (8004ca4 <anglePID+0x1bc>)
 8004bac:	cb18      	ldmia	r3, {r3, r4}
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bb6:	f7fb fb2f 	bl	8000218 <__aeabi_dsub>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4623      	mov	r3, r4
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	f7fb fcdf 	bl	8000588 <__aeabi_dmul>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	460c      	mov	r4, r1
 8004bce:	4698      	mov	r8, r3
 8004bd0:	46a1      	mov	r9, r4
 8004bd2:	6978      	ldr	r0, [r7, #20]
 8004bd4:	f7fb fc80 	bl	80004d8 <__aeabi_f2d>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	4640      	mov	r0, r8
 8004be2:	4649      	mov	r1, r9
 8004be4:	f7fb fdfa 	bl	80007dc <__aeabi_ddiv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	4618      	mov	r0, r3
 8004bee:	4621      	mov	r1, r4
 8004bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf4:	f7fb fb12 	bl	800021c <__adddf3>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4698      	mov	r8, r3
 8004bfe:	46a1      	mov	r9, r4
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <anglePID+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fc f8f4 	bl	8000df4 <__aeabi_fmul>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fb fc62 	bl	80004d8 <__aeabi_f2d>
 8004c14:	4603      	mov	r3, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4623      	mov	r3, r4
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb fafc 	bl	800021c <__adddf3>
 8004c24:	4603      	mov	r3, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	4631      	mov	r1, r6
 8004c30:	f7fb fcaa 	bl	8000588 <__aeabi_dmul>
 8004c34:	4603      	mov	r3, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	e9c7 3406 	strd	r3, r4, [r7, #24]

	if(v < 0){
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c48:	f7fb ff10 	bl	8000a6c <__aeabi_dcmplt>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00d      	beq.n	8004c6e <anglePID+0x186>
		_dir = BACKWARD;
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <anglePID+0x1c0>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
		 _speed = -(int)(v);
 8004c58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c5c:	f7fb ff44 	bl	8000ae8 <__aeabi_d2iz>
 8004c60:	4603      	mov	r3, r0
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	425b      	negs	r3, r3
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <anglePID+0x1c4>)
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	e00a      	b.n	8004c84 <anglePID+0x19c>
	}
	else{
		_dir = FORWARD;
 8004c6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <anglePID+0x1c0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
		_speed = (int)(v);
 8004c74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c78:	f7fb ff36 	bl	8000ae8 <__aeabi_d2iz>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <anglePID+0x1c4>)
 8004c82:	801a      	strh	r2, [r3, #0]

	/*if(_speed != previousSpeed){
		changeSpeed(_speed);
	}*/

	previousError = error;
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <anglePID+0x1bc>)
 8004c86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c8a:	e9c2 3400 	strd	r3, r4, [r2]
}
 8004c8e:	bf00      	nop
 8004c90:	3734      	adds	r7, #52	; 0x34
 8004c92:	46bd      	mov	sp, r7
 8004c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c98:	40a00000 	.word	0x40a00000
 8004c9c:	165e9f81 	.word	0x165e9f81
 8004ca0:	20000140 	.word	0x20000140
 8004ca4:	20000108 	.word	0x20000108
 8004ca8:	20000128 	.word	0x20000128
 8004cac:	20000120 	.word	0x20000120

08004cb0 <getBatteryVoltage>:
};


/* public: */

void getBatteryVoltage(Voltage *vol){
 8004cb0:	b5b0      	push	{r4, r5, r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	float measured_value[3];

	measured_value[0]= HAL_ADC_GetValue(&hadc1);
 8004cb8:	485d      	ldr	r0, [pc, #372]	; (8004e30 <getBatteryVoltage+0x180>)
 8004cba:	f7fc fc71 	bl	80015a0 <HAL_ADC_GetValue>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fc f83f 	bl	8000d44 <__aeabi_ui2f>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	60fb      	str	r3, [r7, #12]
	measured_value[2]= HAL_ADC_GetValue(&hadc1);
 8004cca:	4859      	ldr	r0, [pc, #356]	; (8004e30 <getBatteryVoltage+0x180>)
 8004ccc:	f7fc fc68 	bl	80015a0 <HAL_ADC_GetValue>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fc f836 	bl	8000d44 <__aeabi_ui2f>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	617b      	str	r3, [r7, #20]
	measured_value[3]= HAL_ADC_GetValue(&hadc1);
 8004cdc:	4854      	ldr	r0, [pc, #336]	; (8004e30 <getBatteryVoltage+0x180>)
 8004cde:	f7fc fc5f 	bl	80015a0 <HAL_ADC_GetValue>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fc f82d 	bl	8000d44 <__aeabi_ui2f>
 8004cea:	4603      	mov	r3, r0
 8004cec:	61bb      	str	r3, [r7, #24]

	vol->FirstPacketVoltage = 	measured_value[0] * ADC_TO_VOLTS * 2;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fbf1 	bl	80004d8 <__aeabi_f2d>
 8004cf6:	a34a      	add	r3, pc, #296	; (adr r3, 8004e20 <getBatteryVoltage+0x170>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fc44 	bl	8000588 <__aeabi_dmul>
 8004d00:	4603      	mov	r3, r0
 8004d02:	460c      	mov	r4, r1
 8004d04:	4618      	mov	r0, r3
 8004d06:	4621      	mov	r1, r4
 8004d08:	a347      	add	r3, pc, #284	; (adr r3, 8004e28 <getBatteryVoltage+0x178>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fd65 	bl	80007dc <__aeabi_ddiv>
 8004d12:	4603      	mov	r3, r0
 8004d14:	460c      	mov	r4, r1
 8004d16:	4618      	mov	r0, r3
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	f7fb fa7d 	bl	800021c <__adddf3>
 8004d22:	4603      	mov	r3, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	4618      	mov	r0, r3
 8004d28:	4621      	mov	r1, r4
 8004d2a:	f7fb ff05 	bl	8000b38 <__aeabi_d2f>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	601a      	str	r2, [r3, #0]
	vol->SecondPacketVoltage = 	measured_value[1] * ADC_TO_VOLTS * 3 - vol->FirstPacketVoltage;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fb fbce 	bl	80004d8 <__aeabi_f2d>
 8004d3c:	a338      	add	r3, pc, #224	; (adr r3, 8004e20 <getBatteryVoltage+0x170>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	f7fb fc21 	bl	8000588 <__aeabi_dmul>
 8004d46:	4603      	mov	r3, r0
 8004d48:	460c      	mov	r4, r1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	a336      	add	r3, pc, #216	; (adr r3, 8004e28 <getBatteryVoltage+0x178>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fd42 	bl	80007dc <__aeabi_ddiv>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	4621      	mov	r1, r4
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	4b33      	ldr	r3, [pc, #204]	; (8004e34 <getBatteryVoltage+0x184>)
 8004d66:	f7fb fc0f 	bl	8000588 <__aeabi_dmul>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	4625      	mov	r5, r4
 8004d70:	461c      	mov	r4, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fbae 	bl	80004d8 <__aeabi_f2d>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4620      	mov	r0, r4
 8004d82:	4629      	mov	r1, r5
 8004d84:	f7fb fa48 	bl	8000218 <__aeabi_dsub>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	4621      	mov	r1, r4
 8004d90:	f7fb fed2 	bl	8000b38 <__aeabi_d2f>
 8004d94:	4602      	mov	r2, r0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	605a      	str	r2, [r3, #4]
	vol->ThirdPacketVoltage	= 	measured_value[2] * ADC_TO_VOLTS * 4 - vol->SecondPacketVoltage;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fb fb9b 	bl	80004d8 <__aeabi_f2d>
 8004da2:	a31f      	add	r3, pc, #124	; (adr r3, 8004e20 <getBatteryVoltage+0x170>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fbee 	bl	8000588 <__aeabi_dmul>
 8004dac:	4603      	mov	r3, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	4618      	mov	r0, r3
 8004db2:	4621      	mov	r1, r4
 8004db4:	a31c      	add	r3, pc, #112	; (adr r3, 8004e28 <getBatteryVoltage+0x178>)
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f7fb fd0f 	bl	80007dc <__aeabi_ddiv>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <getBatteryVoltage+0x188>)
 8004dcc:	f7fb fbdc 	bl	8000588 <__aeabi_dmul>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	4625      	mov	r5, r4
 8004dd6:	461c      	mov	r4, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fb fb7b 	bl	80004d8 <__aeabi_f2d>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4620      	mov	r0, r4
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7fb fa15 	bl	8000218 <__aeabi_dsub>
 8004dee:	4603      	mov	r3, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	4618      	mov	r0, r3
 8004df4:	4621      	mov	r1, r4
 8004df6:	f7fb fe9f 	bl	8000b38 <__aeabi_d2f>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
	vol->BatteryVoltage	= 		measured_value[2] * 4;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fb fff4 	bl	8000df4 <__aeabi_fmul>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]

}
 8004e14:	bf00      	nop
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e1c:	f3af 8000 	nop.w
 8004e20:	9999999a 	.word	0x9999999a
 8004e24:	400d9999 	.word	0x400d9999
 8004e28:	00000000 	.word	0x00000000
 8004e2c:	40affe00 	.word	0x40affe00
 8004e30:	20000278 	.word	0x20000278
 8004e34:	40080000 	.word	0x40080000
 8004e38:	40100000 	.word	0x40100000

08004e3c <calulateBatteryLevel>:

int calulateBatteryLevel(float voltage){
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
	int battery_level = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 21; i++){
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e022      	b.n	8004e94 <calulateBatteryLevel+0x58>
		if(voltage <= voltage_levels[i] && voltage > voltage_levels[i + 1] ){
 8004e4e:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <calulateBatteryLevel+0x6c>)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fc f973 	bl	8001144 <__aeabi_fcmple>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d014      	beq.n	8004e8e <calulateBatteryLevel+0x52>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	4a0f      	ldr	r2, [pc, #60]	; (8004ea8 <calulateBatteryLevel+0x6c>)
 8004e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fc f97b 	bl	800116c <__aeabi_fcmpgt>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <calulateBatteryLevel+0x52>
			battery_level = (20 - i) * 5;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f1c3 0214 	rsb	r2, r3, #20
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]
			return battery_level;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	e007      	b.n	8004e9e <calulateBatteryLevel+0x62>
	for(int i = 0; i < 21; i++){
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3301      	adds	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b14      	cmp	r3, #20
 8004e98:	ddd9      	ble.n	8004e4e <calulateBatteryLevel+0x12>
		}
	}
	return -1;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000008 	.word	0x20000008

08004eac <displayBatteryLevel>:

void displayBatteryLevel(int percentage){
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	int red = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
	int green = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	613b      	str	r3, [r7, #16]

	float red_dimming_factor = 0.5;
 8004ebc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8004ec0:	60fb      	str	r3, [r7, #12]
	float green_dimming_factor = red_dimming_factor * 0.5;
 8004ec2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7fb ff94 	bl	8000df4 <__aeabi_fmul>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	60bb      	str	r3, [r7, #8]

	if(percentage < 0){
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	da02      	bge.n	8004edc <displayBatteryLevel+0x30>
		percentage = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	e004      	b.n	8004ee6 <displayBatteryLevel+0x3a>
	} else if(percentage > 100){
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	dd01      	ble.n	8004ee6 <displayBatteryLevel+0x3a>
		percentage = 100;
 8004ee2:	2364      	movs	r3, #100	; 0x64
 8004ee4:	607b      	str	r3, [r7, #4]
	}

	if(percentage < 50){
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b31      	cmp	r3, #49	; 0x31
 8004eea:	dc23      	bgt.n	8004f34 <displayBatteryLevel+0x88>

		red = 255 * red_dimming_factor;
 8004eec:	492c      	ldr	r1, [pc, #176]	; (8004fa0 <displayBatteryLevel+0xf4>)
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f7fb ff80 	bl	8000df4 <__aeabi_fmul>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fc f942 	bl	8001180 <__aeabi_f2iz>
 8004efc:	4603      	mov	r3, r0
 8004efe:	617b      	str	r3, [r7, #20]
		green = ((255 * 2 * percentage) / 100) * green_dimming_factor;
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <displayBatteryLevel+0xf8>)
 8004f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f10:	1152      	asrs	r2, r2, #5
 8004f12:	17db      	asrs	r3, r3, #31
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fb ff18 	bl	8000d4c <__aeabi_i2f>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fb ff67 	bl	8000df4 <__aeabi_fmul>
 8004f26:	4603      	mov	r3, r0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fc f929 	bl	8001180 <__aeabi_f2iz>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e025      	b.n	8004f80 <displayBatteryLevel+0xd4>

	} else{
		red = (255 -((255 * ( (percentage - 50) * 2))  / 100)) * red_dimming_factor;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <displayBatteryLevel+0xf8>)
 8004f44:	fb82 1203 	smull	r1, r2, r2, r3
 8004f48:	1152      	asrs	r2, r2, #5
 8004f4a:	17db      	asrs	r3, r3, #31
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	33ff      	adds	r3, #255	; 0xff
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fb fefb 	bl	8000d4c <__aeabi_i2f>
 8004f56:	4603      	mov	r3, r0
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fb ff4a 	bl	8000df4 <__aeabi_fmul>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc f90c 	bl	8001180 <__aeabi_f2iz>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	617b      	str	r3, [r7, #20]
		green = 255 * green_dimming_factor;
 8004f6c:	490c      	ldr	r1, [pc, #48]	; (8004fa0 <displayBatteryLevel+0xf4>)
 8004f6e:	68b8      	ldr	r0, [r7, #8]
 8004f70:	f7fb ff40 	bl	8000df4 <__aeabi_fmul>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fc f902 	bl	8001180 <__aeabi_f2iz>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	613b      	str	r3, [r7, #16]
	}
	htim3.Instance->CCR2 = green;
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <displayBatteryLevel+0xfc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 0;
 8004f88:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <displayBatteryLevel+0xfc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = red;
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <displayBatteryLevel+0xfc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40

}
 8004f98:	bf00      	nop
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	437f0000 	.word	0x437f0000
 8004fa4:	51eb851f 	.word	0x51eb851f
 8004fa8:	20000234 	.word	0x20000234
 8004fac:	00000000 	.word	0x00000000

08004fb0 <checkForOverdischarge>:

int checkForOverdischarge(Voltage *vol){
 8004fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
	if(fmax(fmax(vol->FirstPacketVoltage, vol->SecondPacketVoltage), vol->ThirdPacketVoltage) -
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb fa8a 	bl	80004d8 <__aeabi_f2d>
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fb fa83 	bl	80004d8 <__aeabi_f2d>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f001 fa67 	bl	80064ac <fmax>
 8004fde:	4604      	mov	r4, r0
 8004fe0:	460d      	mov	r5, r1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fb fa76 	bl	80004d8 <__aeabi_f2d>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	f001 fa5a 	bl	80064ac <fmax>
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	460d      	mov	r5, r1
			fmin(fmin(vol->FirstPacketVoltage, vol->SecondPacketVoltage), vol->ThirdPacketVoltage) >= 0.2 ){
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f7fb fa69 	bl	80004d8 <__aeabi_f2d>
 8005006:	4680      	mov	r8, r0
 8005008:	4689      	mov	r9, r1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fb fa62 	bl	80004d8 <__aeabi_f2d>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	f001 fa5f 	bl	80064de <fmin>
 8005020:	4680      	mov	r8, r0
 8005022:	4689      	mov	r9, r1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fb fa55 	bl	80004d8 <__aeabi_f2d>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4640      	mov	r0, r8
 8005034:	4649      	mov	r1, r9
 8005036:	f001 fa52 	bl	80064de <fmin>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
	if(fmax(fmax(vol->FirstPacketVoltage, vol->SecondPacketVoltage), vol->ThirdPacketVoltage) -
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb f8e9 	bl	8000218 <__aeabi_dsub>
 8005046:	4603      	mov	r3, r0
 8005048:	460c      	mov	r4, r1
 800504a:	4618      	mov	r0, r3
 800504c:	4621      	mov	r1, r4
 800504e:	a30e      	add	r3, pc, #56	; (adr r3, 8005088 <checkForOverdischarge+0xd8>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb fd1e 	bl	8000a94 <__aeabi_dcmpge>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <checkForOverdischarge+0xb2>
		return 1;
 800505e:	2301      	movs	r3, #1
 8005060:	e00b      	b.n	800507a <checkForOverdischarge+0xca>
	} else if (vol->BatteryVoltage < 10.0){
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	490a      	ldr	r1, [pc, #40]	; (8005090 <checkForOverdischarge+0xe0>)
 8005068:	4618      	mov	r0, r3
 800506a:	f7fc f861 	bl	8001130 <__aeabi_fcmplt>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <checkForOverdischarge+0xc8>
		return 2;
 8005074:	2302      	movs	r3, #2
 8005076:	e000      	b.n	800507a <checkForOverdischarge+0xca>
	} else{
		return 0;
 8005078:	2300      	movs	r3, #0
	}
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005084:	f3af 8000 	nop.w
 8005088:	9999999a 	.word	0x9999999a
 800508c:	3fc99999 	.word	0x3fc99999
 8005090:	41200000 	.word	0x41200000

08005094 <measureBatteryLevel>:

int measureBatteryLevel(Voltage *vol){
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
	int result;
	getBatteryVoltage(vol);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fe07 	bl	8004cb0 <getBatteryVoltage>
	displayBatteryLevel(calulateBatteryLevel(vol->BatteryVoltage));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fec8 	bl	8004e3c <calulateBatteryLevel>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fefc 	bl	8004eac <displayBatteryLevel>

	if(result = checkForOverdischarge(vol)){
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff7b 	bl	8004fb0 <checkForOverdischarge>
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <measureBatteryLevel+0x46>
			htim3.Instance->CCR2 = 0;
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <measureBatteryLevel+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR3 = 0;
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <measureBatteryLevel+0x50>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance->CCR4 = 200;
 80050d2:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <measureBatteryLevel+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	22c8      	movs	r2, #200	; 0xc8
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40
	}
	return result;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000234 	.word	0x20000234

080050e8 <gy521_Init>:
 */
#include "gy521.h"
 I2C_HandleTypeDef hi2c1;


void gy521_Init(){
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af02      	add	r7, sp, #8
	  uint8_t d[2];
	  d[0] = 0x6B;
 80050ee:	236b      	movs	r3, #107	; 0x6b
 80050f0:	713b      	strb	r3, [r7, #4]
	  d[1] = 0x00;
 80050f2:	2300      	movs	r3, #0
 80050f4:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1, ADDR, (uint8_t*)d,2,100) != HAL_OK){}
 80050f6:	bf00      	nop
 80050f8:	1d3a      	adds	r2, r7, #4
 80050fa:	2364      	movs	r3, #100	; 0x64
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2302      	movs	r3, #2
 8005100:	21d0      	movs	r1, #208	; 0xd0
 8005102:	4812      	ldr	r0, [pc, #72]	; (800514c <gy521_Init+0x64>)
 8005104:	f7fc ff84 	bl	8002010 <HAL_I2C_Master_Transmit>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f4      	bne.n	80050f8 <gy521_Init+0x10>
	  HAL_Delay(200);
 800510e:	20c8      	movs	r0, #200	; 0xc8
 8005110:	f7fc f8d8 	bl	80012c4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8005114:	2200      	movs	r2, #0
 8005116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800511a:	480d      	ldr	r0, [pc, #52]	; (8005150 <gy521_Init+0x68>)
 800511c:	f7fc fe38 	bl	8001d90 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8005120:	20c8      	movs	r0, #200	; 0xc8
 8005122:	f7fc f8cf 	bl	80012c4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8005126:	2201      	movs	r2, #1
 8005128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800512c:	4808      	ldr	r0, [pc, #32]	; (8005150 <gy521_Init+0x68>)
 800512e:	f7fc fe2f 	bl	8001d90 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8005132:	20c8      	movs	r0, #200	; 0xc8
 8005134:	f7fc f8c6 	bl	80012c4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8005138:	2200      	movs	r2, #0
 800513a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800513e:	4804      	ldr	r0, [pc, #16]	; (8005150 <gy521_Init+0x68>)
 8005140:	f7fc fe26 	bl	8001d90 <HAL_GPIO_WritePin>

}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000160 	.word	0x20000160
 8005150:	40010c00 	.word	0x40010c00

08005154 <getAcc_X>:
	HAL_I2C_Mem_Read(&hi2c1, ADDR, GYRO_ZOUT_L , 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);

	value = ((temp[0] << 8) | temp[1]);
	return value;
}
int16_t getAcc_X(){
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];


	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_XOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 800515a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800515e:	9302      	str	r3, [sp, #8]
 8005160:	2301      	movs	r3, #1
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	2301      	movs	r3, #1
 800516a:	223b      	movs	r2, #59	; 0x3b
 800516c:	21d0      	movs	r1, #208	; 0xd0
 800516e:	480f      	ldr	r0, [pc, #60]	; (80051ac <getAcc_X+0x58>)
 8005170:	f7fd f84c 	bl	800220c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_XOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 8005174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005178:	9302      	str	r3, [sp, #8]
 800517a:	2301      	movs	r3, #1
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	3301      	adds	r3, #1
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2301      	movs	r3, #1
 8005186:	223c      	movs	r2, #60	; 0x3c
 8005188:	21d0      	movs	r1, #208	; 0xd0
 800518a:	4808      	ldr	r0, [pc, #32]	; (80051ac <getAcc_X+0x58>)
 800518c:	f7fd f83e 	bl	800220c <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 8005190:	793b      	ldrb	r3, [r7, #4]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	b21a      	sxth	r2, r3
 8005196:	797b      	ldrb	r3, [r7, #5]
 8005198:	b21b      	sxth	r3, r3
 800519a:	4313      	orrs	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
	return value;
 800519e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000160 	.word	0x20000160

080051b0 <getAcc_Y>:
int16_t getAcc_Y(){
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_YOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	2301      	movs	r3, #1
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	2301      	movs	r3, #1
 80051c6:	223d      	movs	r2, #61	; 0x3d
 80051c8:	21d0      	movs	r1, #208	; 0xd0
 80051ca:	480f      	ldr	r0, [pc, #60]	; (8005208 <getAcc_Y+0x58>)
 80051cc:	f7fd f81e 	bl	800220c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_YOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 80051d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d4:	9302      	str	r3, [sp, #8]
 80051d6:	2301      	movs	r3, #1
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	3301      	adds	r3, #1
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	2301      	movs	r3, #1
 80051e2:	223e      	movs	r2, #62	; 0x3e
 80051e4:	21d0      	movs	r1, #208	; 0xd0
 80051e6:	4808      	ldr	r0, [pc, #32]	; (8005208 <getAcc_Y+0x58>)
 80051e8:	f7fd f810 	bl	800220c <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 80051ec:	793b      	ldrb	r3, [r7, #4]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	b21a      	sxth	r2, r3
 80051f2:	797b      	ldrb	r3, [r7, #5]
 80051f4:	b21b      	sxth	r3, r3
 80051f6:	4313      	orrs	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
	return value;
 80051fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000160 	.word	0x20000160

0800520c <getAcc_Z>:
int16_t getAcc_Z(){
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af04      	add	r7, sp, #16
	int16_t value;
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_ZOUT_H, 1, &temp[0], sizeof(temp[0]), HAL_MAX_DELAY);
 8005212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005216:	9302      	str	r3, [sp, #8]
 8005218:	2301      	movs	r3, #1
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2301      	movs	r3, #1
 8005222:	223f      	movs	r2, #63	; 0x3f
 8005224:	21d0      	movs	r1, #208	; 0xd0
 8005226:	480f      	ldr	r0, [pc, #60]	; (8005264 <getAcc_Z+0x58>)
 8005228:	f7fc fff0 	bl	800220c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, ADDR, ACCEL_ZOUT_L, 1, &temp[1], sizeof(temp[1]), HAL_MAX_DELAY);
 800522c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005230:	9302      	str	r3, [sp, #8]
 8005232:	2301      	movs	r3, #1
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	3301      	adds	r3, #1
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2301      	movs	r3, #1
 800523e:	2240      	movs	r2, #64	; 0x40
 8005240:	21d0      	movs	r1, #208	; 0xd0
 8005242:	4808      	ldr	r0, [pc, #32]	; (8005264 <getAcc_Z+0x58>)
 8005244:	f7fc ffe2 	bl	800220c <HAL_I2C_Mem_Read>

	value = ((temp[0] << 8) | temp[1]);
 8005248:	793b      	ldrb	r3, [r7, #4]
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	b21a      	sxth	r2, r3
 800524e:	797b      	ldrb	r3, [r7, #5]
 8005250:	b21b      	sxth	r3, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
	return value;
 8005256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000160 	.word	0x20000160

08005268 <getAccelPitch>:


float getAccelPitch(){
 8005268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0

	float Ax = (float)(getAcc_X() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 8005270:	f7ff ff70 	bl	8005154 <getAcc_X>
 8005274:	4603      	mov	r3, r0
 8005276:	4618      	mov	r0, r3
 8005278:	f7fb f91c 	bl	80004b4 <__aeabi_i2d>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	f7fa ffcc 	bl	800021c <__adddf3>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	f7fb fc54 	bl	8000b38 <__aeabi_d2f>
 8005290:	4603      	mov	r3, r0
 8005292:	4945      	ldr	r1, [pc, #276]	; (80053a8 <getAccelPitch+0x140>)
 8005294:	4618      	mov	r0, r3
 8005296:	f7fb fe61 	bl	8000f5c <__aeabi_fdiv>
 800529a:	4603      	mov	r3, r0
 800529c:	60fb      	str	r3, [r7, #12]
	float Ay = (float)(getAcc_Y() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 800529e:	f7ff ff87 	bl	80051b0 <getAcc_Y>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb f905 	bl	80004b4 <__aeabi_i2d>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	f7fa ffb5 	bl	800021c <__adddf3>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7fb fc3d 	bl	8000b38 <__aeabi_d2f>
 80052be:	4603      	mov	r3, r0
 80052c0:	4939      	ldr	r1, [pc, #228]	; (80053a8 <getAccelPitch+0x140>)
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fb fe4a 	bl	8000f5c <__aeabi_fdiv>
 80052c8:	4603      	mov	r3, r0
 80052ca:	60bb      	str	r3, [r7, #8]
	float Az = (float)(getAcc_Z() * ACCEL_RESOLUTION) / (float)INT16_MAX;
 80052cc:	f7ff ff9e 	bl	800520c <getAcc_Z>
 80052d0:	4603      	mov	r3, r0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb f8ee 	bl	80004b4 <__aeabi_i2d>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	f7fa ff9e 	bl	800021c <__adddf3>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	f7fb fc26 	bl	8000b38 <__aeabi_d2f>
 80052ec:	4603      	mov	r3, r0
 80052ee:	492e      	ldr	r1, [pc, #184]	; (80053a8 <getAccelPitch+0x140>)
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fb fe33 	bl	8000f5c <__aeabi_fdiv>
 80052f6:	4603      	mov	r3, r0
 80052f8:	607b      	str	r3, [r7, #4]

	float accelAngle = (double)((-atan2(sqrt(Ay*Ay + Ax*Ax),Az)*180/3.14) + 90);
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	68b8      	ldr	r0, [r7, #8]
 80052fe:	f7fb fd79 	bl	8000df4 <__aeabi_fmul>
 8005302:	4603      	mov	r3, r0
 8005304:	461e      	mov	r6, r3
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7fb fd73 	bl	8000df4 <__aeabi_fmul>
 800530e:	4603      	mov	r3, r0
 8005310:	4619      	mov	r1, r3
 8005312:	4630      	mov	r0, r6
 8005314:	f7fb fc66 	bl	8000be4 <__addsf3>
 8005318:	4603      	mov	r3, r0
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f8dc 	bl	80004d8 <__aeabi_f2d>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4610      	mov	r0, r2
 8005326:	4619      	mov	r1, r3
 8005328:	f001 f91c 	bl	8006564 <sqrt>
 800532c:	4680      	mov	r8, r0
 800532e:	4689      	mov	r9, r1
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fb f8d1 	bl	80004d8 <__aeabi_f2d>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f001 f90f 	bl	8006560 <atan2>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4614      	mov	r4, r2
 8005348:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	4b16      	ldr	r3, [pc, #88]	; (80053ac <getAccelPitch+0x144>)
 8005352:	4620      	mov	r0, r4
 8005354:	4629      	mov	r1, r5
 8005356:	f7fb f917 	bl	8000588 <__aeabi_dmul>
 800535a:	4603      	mov	r3, r0
 800535c:	460c      	mov	r4, r1
 800535e:	4618      	mov	r0, r3
 8005360:	4621      	mov	r1, r4
 8005362:	a30f      	add	r3, pc, #60	; (adr r3, 80053a0 <getAccelPitch+0x138>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fb fa38 	bl	80007dc <__aeabi_ddiv>
 800536c:	4603      	mov	r3, r0
 800536e:	460c      	mov	r4, r1
 8005370:	4618      	mov	r0, r3
 8005372:	4621      	mov	r1, r4
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <getAccelPitch+0x148>)
 800537a:	f7fa ff4f 	bl	800021c <__adddf3>
 800537e:	4603      	mov	r3, r0
 8005380:	460c      	mov	r4, r1
 8005382:	4618      	mov	r0, r3
 8005384:	4621      	mov	r1, r4
 8005386:	f7fb fbd7 	bl	8000b38 <__aeabi_d2f>
 800538a:	4603      	mov	r3, r0
 800538c:	603b      	str	r3, [r7, #0]

	return accelAngle;
 800538e:	683b      	ldr	r3, [r7, #0]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800539a:	bf00      	nop
 800539c:	f3af 8000 	nop.w
 80053a0:	51eb851f 	.word	0x51eb851f
 80053a4:	40091eb8 	.word	0x40091eb8
 80053a8:	46fffe00 	.word	0x46fffe00
 80053ac:	40668000 	.word	0x40668000
 80053b0:	40568000 	.word	0x40568000
 80053b4:	00000000 	.word	0x00000000

080053b8 <getGyroPitch>:

float getGyroPitch(float gyroAngle , int16_t rawGyro){
 80053b8:	b5b0      	push	{r4, r5, r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	807b      	strh	r3, [r7, #2]
	float Gy = getGyroYRate(rawGyro);
 80053c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f825 	bl	8005418 <getGyroYRate>
 80053ce:	60f8      	str	r0, [r7, #12]
	gyroAngle = gyroAngle + Gy * 0.001;
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fb f881 	bl	80004d8 <__aeabi_f2d>
 80053d6:	4604      	mov	r4, r0
 80053d8:	460d      	mov	r5, r1
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7fb f87c 	bl	80004d8 <__aeabi_f2d>
 80053e0:	a30b      	add	r3, pc, #44	; (adr r3, 8005410 <getGyroPitch+0x58>)
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f7fb f8cf 	bl	8000588 <__aeabi_dmul>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4620      	mov	r0, r4
 80053f0:	4629      	mov	r1, r5
 80053f2:	f7fa ff13 	bl	800021c <__adddf3>
 80053f6:	4603      	mov	r3, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	4618      	mov	r0, r3
 80053fc:	4621      	mov	r1, r4
 80053fe:	f7fb fb9b 	bl	8000b38 <__aeabi_d2f>
 8005402:	4603      	mov	r3, r0
 8005404:	607b      	str	r3, [r7, #4]

	return gyroAngle;
 8005406:	687b      	ldr	r3, [r7, #4]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bdb0      	pop	{r4, r5, r7, pc}
 8005410:	d2f1a9fc 	.word	0xd2f1a9fc
 8005414:	3f50624d 	.word	0x3f50624d

08005418 <getGyroYRate>:

float getGyroYRate(int16_t rawGyro){
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	80fb      	strh	r3, [r7, #6]
	float zero = 80.75;
 8005422:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <getGyroYRate+0x3c>)
 8005424:	60fb      	str	r3, [r7, #12]
	float gYRate = (float)(rawGyro-zero) / 131.0;
 8005426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800542a:	4618      	mov	r0, r3
 800542c:	f7fb fc8e 	bl	8000d4c <__aeabi_i2f>
 8005430:	4603      	mov	r3, r0
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fb fbd3 	bl	8000be0 <__aeabi_fsub>
 800543a:	4603      	mov	r3, r0
 800543c:	4906      	ldr	r1, [pc, #24]	; (8005458 <getGyroYRate+0x40>)
 800543e:	4618      	mov	r0, r3
 8005440:	f7fb fd8c 	bl	8000f5c <__aeabi_fdiv>
 8005444:	4603      	mov	r3, r0
 8005446:	60bb      	str	r3, [r7, #8]

	return gYRate;
 8005448:	68bb      	ldr	r3, [r7, #8]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	42a18000 	.word	0x42a18000
 8005458:	43030000 	.word	0x43030000

0800545c <complementaryFilter>:

int8_t complementaryFilter(float gyro, float accel){
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	float u = 0.1;
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <complementaryFilter+0x50>)
 8005468:	60fb      	str	r3, [r7, #12]
	float theta = u * gyro + (1-u) * accel;
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7fb fcc1 	bl	8000df4 <__aeabi_fmul>
 8005472:	4603      	mov	r3, r0
 8005474:	461c      	mov	r4, r3
 8005476:	68f9      	ldr	r1, [r7, #12]
 8005478:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800547c:	f7fb fbb0 	bl	8000be0 <__aeabi_fsub>
 8005480:	4603      	mov	r3, r0
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f7fb fcb5 	bl	8000df4 <__aeabi_fmul>
 800548a:	4603      	mov	r3, r0
 800548c:	4619      	mov	r1, r3
 800548e:	4620      	mov	r0, r4
 8005490:	f7fb fba8 	bl	8000be4 <__addsf3>
 8005494:	4603      	mov	r3, r0
 8005496:	60bb      	str	r3, [r7, #8]

	return (int)(theta);
 8005498:	68b8      	ldr	r0, [r7, #8]
 800549a:	f7fb fe71 	bl	8001180 <__aeabi_f2iz>
 800549e:	4603      	mov	r3, r0
 80054a0:	b25b      	sxtb	r3, r3
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd90      	pop	{r4, r7, pc}
 80054aa:	bf00      	nop
 80054ac:	3dcccccd 	.word	0x3dcccccd

080054b0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM3_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c0:	d106      	bne.n	80054d0 <HAL_TIM_PeriodElapsedCallback+0x20>
		moveRobot(150,_dir);
 80054c2:	4b41      	ldr	r3, [pc, #260]	; (80055c8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	4619      	mov	r1, r3
 80054ca:	2096      	movs	r0, #150	; 0x96
 80054cc:	f000 fcc8 	bl	8005e60 <moveRobot>
	}
	if(htim->Instance == TIM4){
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a3d      	ldr	r2, [pc, #244]	; (80055cc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d107      	bne.n	80054ea <HAL_TIM_PeriodElapsedCallback+0x3a>
		anglePID(0,theta);
 80054da:	4b3d      	ldr	r3, [pc, #244]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80054dc:	f993 3000 	ldrsb.w	r3, [r3]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f7ff faff 	bl	8004ae8 <anglePID>
	if(htim->Instance == TIM6){
		//frequency = 100Hz
		//_v = getSpeed();
		//_steps = 0;
	}
	if(htim->Instance == TIM7){
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a39      	ldr	r2, [pc, #228]	; (80055d4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d15d      	bne.n	80055b0 <HAL_TIM_PeriodElapsedCallback+0x100>
		//frequency = 1kHz
		gyroAngle = getGyroPitch(gyroAngle, rawGyro);
 80054f4:	4b38      	ldr	r3, [pc, #224]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80054f6:	681c      	ldr	r4, [r3, #0]
 80054f8:	4b38      	ldr	r3, [pc, #224]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fb fe3f 	bl	8001180 <__aeabi_f2iz>
 8005502:	4603      	mov	r3, r0
 8005504:	b21b      	sxth	r3, r3
 8005506:	4619      	mov	r1, r3
 8005508:	4620      	mov	r0, r4
 800550a:	f7ff ff55 	bl	80053b8 <getGyroPitch>
 800550e:	4602      	mov	r2, r0
 8005510:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005512:	601a      	str	r2, [r3, #0]
		accAngle = rawAccel;
 8005514:	4b32      	ldr	r3, [pc, #200]	; (80055e0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a32      	ldr	r2, [pc, #200]	; (80055e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800551a:	6013      	str	r3, [r2, #0]
		cnt++;
 800551c:	4b32      	ldr	r3, [pc, #200]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005526:	701a      	strb	r2, [r3, #0]
		if(cnt <= 40){
 8005528:	4b2f      	ldr	r3, [pc, #188]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b28      	cmp	r3, #40	; 0x28
 800552e:	d813      	bhi.n	8005558 <HAL_TIM_PeriodElapsedCallback+0xa8>

			currentAngle = currentAngle + complementaryFilter(gyroAngle, accAngle);
 8005530:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f7ff ff8e 	bl	800545c <complementaryFilter>
 8005540:	4603      	mov	r3, r0
 8005542:	b29a      	uxth	r2, r3
 8005544:	4b29      	ldr	r3, [pc, #164]	; (80055ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800554a:	b29b      	uxth	r3, r3
 800554c:	4413      	add	r3, r2
 800554e:	b29b      	uxth	r3, r3
 8005550:	b21a      	sxth	r2, r3
 8005552:	4b26      	ldr	r3, [pc, #152]	; (80055ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e02b      	b.n	80055b0 <HAL_TIM_PeriodElapsedCallback+0x100>

		}
		else{
			test = currentAngle /40;
 8005558:	4b24      	ldr	r3, [pc, #144]	; (80055ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800555a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800555e:	4a24      	ldr	r2, [pc, #144]	; (80055f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005560:	fb82 1203 	smull	r1, r2, r2, r3
 8005564:	1112      	asrs	r2, r2, #4
 8005566:	17db      	asrs	r3, r3, #31
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	b21b      	sxth	r3, r3
 800556c:	4618      	mov	r0, r3
 800556e:	f7fb fbed 	bl	8000d4c <__aeabi_i2f>
 8005572:	4602      	mov	r2, r0
 8005574:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005576:	601a      	str	r2, [r3, #0]
			theta = getKalmanAngle(test,getGyroYRate(rawGyro), 0.04);
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800557a:	681c      	ldr	r4, [r3, #0]
 800557c:	4b17      	ldr	r3, [pc, #92]	; (80055dc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f7fb fdfd 	bl	8001180 <__aeabi_f2iz>
 8005586:	4603      	mov	r3, r0
 8005588:	b21b      	sxth	r3, r3
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff ff44 	bl	8005418 <getGyroYRate>
 8005590:	4603      	mov	r3, r0
 8005592:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005594:	4619      	mov	r1, r3
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff f952 	bl	8004840 <getKalmanAngle>
 800559c:	4603      	mov	r3, r0
 800559e:	b25a      	sxtb	r2, r3
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80055a2:	701a      	strb	r2, [r3, #0]
			currentAngle = 0;
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	801a      	strh	r2, [r3, #0]
			cnt = 0;
 80055aa:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim->Instance == TIM15){
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a11      	ldr	r2, [pc, #68]	; (80055fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d102      	bne.n	80055c0 <HAL_TIM_PeriodElapsedCallback+0x110>
		measureBatteryLevel(&battery);
 80055ba:	4811      	ldr	r0, [pc, #68]	; (8005600 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80055bc:	f7ff fd6a 	bl	8005094 <measureBatteryLevel>
	}
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd90      	pop	{r4, r7, pc}
 80055c8:	20000128 	.word	0x20000128
 80055cc:	40000800 	.word	0x40000800
 80055d0:	20000274 	.word	0x20000274
 80055d4:	40001400 	.word	0x40001400
 80055d8:	200000e8 	.word	0x200000e8
 80055dc:	200000ec 	.word	0x200000ec
 80055e0:	200000f0 	.word	0x200000f0
 80055e4:	200000e4 	.word	0x200000e4
 80055e8:	200000f4 	.word	0x200000f4
 80055ec:	200000f6 	.word	0x200000f6
 80055f0:	66666667 	.word	0x66666667
 80055f4:	20000138 	.word	0x20000138
 80055f8:	3d23d70a 	.word	0x3d23d70a
 80055fc:	40014000 	.word	0x40014000
 8005600:	20000368 	.word	0x20000368

08005604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005608:	f7fb fde0 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800560c:	f000 f866 	bl	80056dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005610:	f000 fb14 	bl	8005c3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8005614:	f000 f8f6 	bl	8005804 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8005618:	f000 fae6 	bl	8005be8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800561c:	f000 f920 	bl	8005860 <MX_TIM2_Init>
  MX_TIM4_Init();
 8005620:	f000 f9d8 	bl	80059d4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8005624:	f000 fa24 	bl	8005a70 <MX_TIM6_Init>
  MX_TIM7_Init();
 8005628:	f000 fa58 	bl	8005adc <MX_TIM7_Init>
  MX_TIM3_Init();
 800562c:	f000 f964 	bl	80058f8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8005630:	f000 f8aa 	bl	8005788 <MX_ADC1_Init>
  MX_TIM15_Init();
 8005634:	f000 fa86 	bl	8005b44 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  PID_Init();
 8005638:	f7ff fa36 	bl	8004aa8 <PID_Init>
  motorsInit();
 800563c:	f000 fbac 	bl	8005d98 <motorsInit>
  gy521_Init();
 8005640:	f7ff fd52 	bl	80050e8 <gy521_Init>
  gyroAngle = getAccelPitch();
 8005644:	f7ff fe10 	bl	8005268 <getAccelPitch>
 8005648:	4602      	mov	r2, r0
 800564a:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <main+0xb0>)
 800564c:	601a      	str	r2, [r3, #0]
  accAngle = gyroAngle;
 800564e:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <main+0xb0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <main+0xb4>)
 8005654:	6013      	str	r3, [r2, #0]
  _angle = gyroAngle;
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <main+0xb0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fb fd90 	bl	8001180 <__aeabi_f2iz>
 8005660:	4603      	mov	r3, r0
 8005662:	b21a      	sxth	r2, r3
 8005664:	4b15      	ldr	r3, [pc, #84]	; (80056bc <main+0xb8>)
 8005666:	801a      	strh	r2, [r3, #0]
  kalmanInit();
 8005668:	f7ff f8b4 	bl	80047d4 <kalmanInit>
  HAL_TIM_Base_Start_IT(&htim2);
 800566c:	4814      	ldr	r0, [pc, #80]	; (80056c0 <main+0xbc>)
 800566e:	f7fd ffe4 	bl	800363a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8005672:	4814      	ldr	r0, [pc, #80]	; (80056c4 <main+0xc0>)
 8005674:	f7fd ffe1 	bl	800363a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8005678:	4813      	ldr	r0, [pc, #76]	; (80056c8 <main+0xc4>)
 800567a:	f7fd ffde 	bl	800363a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800567e:	4813      	ldr	r0, [pc, #76]	; (80056cc <main+0xc8>)
 8005680:	f7fd ffdb 	bl	800363a <HAL_TIM_Base_Start_IT>
  HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 8005684:	2001      	movs	r0, #1
 8005686:	f7fb fdfb 	bl	8001280 <HAL_SetTickFreq>
  test = 0;
 800568a:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <main+0xcc>)
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8005692:	2104      	movs	r1, #4
 8005694:	480f      	ldr	r0, [pc, #60]	; (80056d4 <main+0xd0>)
 8005696:	f7fe f81f 	bl	80036d8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 800569a:	2108      	movs	r1, #8
 800569c:	480d      	ldr	r0, [pc, #52]	; (80056d4 <main+0xd0>)
 800569e:	f7fe f81b 	bl	80036d8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 80056a2:	210c      	movs	r1, #12
 80056a4:	480b      	ldr	r0, [pc, #44]	; (80056d4 <main+0xd0>)
 80056a6:	f7fe f817 	bl	80036d8 <HAL_TIM_PWM_Start_IT>

  HAL_ADC_Start(&hadc1);
 80056aa:	480b      	ldr	r0, [pc, #44]	; (80056d8 <main+0xd4>)
 80056ac:	f7fb ff04 	bl	80014b8 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 80056b0:	e7fe      	b.n	80056b0 <main+0xac>
 80056b2:	bf00      	nop
 80056b4:	200000e8 	.word	0x200000e8
 80056b8:	200000e4 	.word	0x200000e4
 80056bc:	2000013c 	.word	0x2000013c
 80056c0:	20000328 	.word	0x20000328
 80056c4:	200001b4 	.word	0x200001b4
 80056c8:	200002e8 	.word	0x200002e8
 80056cc:	20000378 	.word	0x20000378
 80056d0:	20000138 	.word	0x20000138
 80056d4:	20000234 	.word	0x20000234
 80056d8:	20000278 	.word	0x20000278

080056dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b092      	sub	sp, #72	; 0x48
 80056e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056e2:	f107 0320 	add.w	r3, r7, #32
 80056e6:	2228      	movs	r2, #40	; 0x28
 80056e8:	2100      	movs	r1, #0
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fed6 	bl	800649c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056f0:	f107 030c 	add.w	r3, r7, #12
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005700:	463b      	mov	r3, r7
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	605a      	str	r2, [r3, #4]
 8005708:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800570a:	2301      	movs	r3, #1
 800570c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800570e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV10;
 8005714:	2309      	movs	r3, #9
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005718:	2302      	movs	r3, #2
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800571c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8005722:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8005726:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005728:	f107 0320 	add.w	r3, r7, #32
 800572c:	4618      	mov	r0, r3
 800572e:	f7fd fac5 	bl	8002cbc <HAL_RCC_OscConfig>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8005738:	f000 fae2 	bl	8005d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800573c:	230f      	movs	r3, #15
 800573e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005740:	2302      	movs	r3, #2
 8005742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800574c:	2300      	movs	r3, #0
 800574e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005750:	f107 030c 	add.w	r3, r7, #12
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f7fd fd30 	bl	80031bc <HAL_RCC_ClockConfig>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8005762:	f000 facd 	bl	8005d00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005766:	2302      	movs	r3, #2
 8005768:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800576e:	463b      	mov	r3, r7
 8005770:	4618      	mov	r0, r3
 8005772:	f7fd fe91 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800577c:	f000 fac0 	bl	8005d00 <Error_Handler>
  }
}
 8005780:	bf00      	nop
 8005782:	3748      	adds	r7, #72	; 0x48
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800578e:	1d3b      	adds	r3, r7, #4
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005798:	4b18      	ldr	r3, [pc, #96]	; (80057fc <MX_ADC1_Init+0x74>)
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <MX_ADC1_Init+0x78>)
 800579c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800579e:	4b17      	ldr	r3, [pc, #92]	; (80057fc <MX_ADC1_Init+0x74>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80057a4:	4b15      	ldr	r3, [pc, #84]	; (80057fc <MX_ADC1_Init+0x74>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <MX_ADC1_Init+0x74>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80057b0:	4b12      	ldr	r3, [pc, #72]	; (80057fc <MX_ADC1_Init+0x74>)
 80057b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80057b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <MX_ADC1_Init+0x74>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <MX_ADC1_Init+0x74>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80057c4:	480d      	ldr	r0, [pc, #52]	; (80057fc <MX_ADC1_Init+0x74>)
 80057c6:	f7fb fd9f 	bl	8001308 <HAL_ADC_Init>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80057d0:	f000 fa96 	bl	8005d00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80057d4:	2301      	movs	r3, #1
 80057d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80057d8:	2301      	movs	r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4805      	ldr	r0, [pc, #20]	; (80057fc <MX_ADC1_Init+0x74>)
 80057e6:	f7fb fee7 	bl	80015b8 <HAL_ADC_ConfigChannel>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80057f0:	f000 fa86 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000278 	.word	0x20000278
 8005800:	40012400 	.word	0x40012400

08005804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005808:	4b12      	ldr	r3, [pc, #72]	; (8005854 <MX_I2C1_Init+0x50>)
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <MX_I2C1_Init+0x54>)
 800580c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <MX_I2C1_Init+0x50>)
 8005810:	4a12      	ldr	r2, [pc, #72]	; (800585c <MX_I2C1_Init+0x58>)
 8005812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <MX_I2C1_Init+0x50>)
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800581a:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <MX_I2C1_Init+0x50>)
 800581c:	2200      	movs	r2, #0
 800581e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <MX_I2C1_Init+0x50>)
 8005822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <MX_I2C1_Init+0x50>)
 800582a:	2200      	movs	r2, #0
 800582c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <MX_I2C1_Init+0x50>)
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <MX_I2C1_Init+0x50>)
 8005836:	2200      	movs	r2, #0
 8005838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <MX_I2C1_Init+0x50>)
 800583c:	2200      	movs	r2, #0
 800583e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005840:	4804      	ldr	r0, [pc, #16]	; (8005854 <MX_I2C1_Init+0x50>)
 8005842:	f7fc fabd 	bl	8001dc0 <HAL_I2C_Init>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800584c:	f000 fa58 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005850:	bf00      	nop
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000160 	.word	0x20000160
 8005858:	40005400 	.word	0x40005400
 800585c:	000186a0 	.word	0x000186a0

08005860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005866:	f107 0308 	add.w	r3, r7, #8
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	605a      	str	r2, [r3, #4]
 8005870:	609a      	str	r2, [r3, #8]
 8005872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005874:	463b      	mov	r3, r7
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800587c:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <MX_TIM2_Init+0x94>)
 800587e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <MX_TIM2_Init+0x94>)
 8005886:	22ef      	movs	r2, #239	; 0xef
 8005888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800588a:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <MX_TIM2_Init+0x94>)
 800588c:	2200      	movs	r2, #0
 800588e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005890:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <MX_TIM2_Init+0x94>)
 8005892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005898:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <MX_TIM2_Init+0x94>)
 800589a:	2200      	movs	r2, #0
 800589c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800589e:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <MX_TIM2_Init+0x94>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80058a4:	4813      	ldr	r0, [pc, #76]	; (80058f4 <MX_TIM2_Init+0x94>)
 80058a6:	f7fd fe9d 	bl	80035e4 <HAL_TIM_Base_Init>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80058b0:	f000 fa26 	bl	8005d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	4619      	mov	r1, r3
 80058c0:	480c      	ldr	r0, [pc, #48]	; (80058f4 <MX_TIM2_Init+0x94>)
 80058c2:	f7fe f969 	bl	8003b98 <HAL_TIM_ConfigClockSource>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80058cc:	f000 fa18 	bl	8005d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80058d8:	463b      	mov	r3, r7
 80058da:	4619      	mov	r1, r3
 80058dc:	4805      	ldr	r0, [pc, #20]	; (80058f4 <MX_TIM2_Init+0x94>)
 80058de:	f7fe fd4d 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80058e8:	f000 fa0a 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80058ec:	bf00      	nop
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000328 	.word	0x20000328

080058f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058fe:	f107 0320 	add.w	r3, r7, #32
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005908:	1d3b      	adds	r3, r7, #4
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	60da      	str	r2, [r3, #12]
 8005914:	611a      	str	r2, [r3, #16]
 8005916:	615a      	str	r2, [r3, #20]
 8005918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800591a:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <MX_TIM3_Init+0xd4>)
 800591c:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <MX_TIM3_Init+0xd8>)
 800591e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 93;
 8005920:	4b2a      	ldr	r3, [pc, #168]	; (80059cc <MX_TIM3_Init+0xd4>)
 8005922:	225d      	movs	r2, #93	; 0x5d
 8005924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005926:	4b29      	ldr	r3, [pc, #164]	; (80059cc <MX_TIM3_Init+0xd4>)
 8005928:	2200      	movs	r2, #0
 800592a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 254;
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <MX_TIM3_Init+0xd4>)
 800592e:	22fe      	movs	r2, #254	; 0xfe
 8005930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <MX_TIM3_Init+0xd4>)
 8005934:	2200      	movs	r2, #0
 8005936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005938:	4b24      	ldr	r3, [pc, #144]	; (80059cc <MX_TIM3_Init+0xd4>)
 800593a:	2200      	movs	r2, #0
 800593c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800593e:	4823      	ldr	r0, [pc, #140]	; (80059cc <MX_TIM3_Init+0xd4>)
 8005940:	f7fd fe9e 	bl	8003680 <HAL_TIM_PWM_Init>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800594a:	f000 f9d9 	bl	8005d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005956:	f107 0320 	add.w	r3, r7, #32
 800595a:	4619      	mov	r1, r3
 800595c:	481b      	ldr	r0, [pc, #108]	; (80059cc <MX_TIM3_Init+0xd4>)
 800595e:	f7fe fd0d 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8005968:	f000 f9ca 	bl	8005d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800596c:	2360      	movs	r3, #96	; 0x60
 800596e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	2204      	movs	r2, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4812      	ldr	r0, [pc, #72]	; (80059cc <MX_TIM3_Init+0xd4>)
 8005984:	f7fe f842 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800598e:	f000 f9b7 	bl	8005d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005992:	1d3b      	adds	r3, r7, #4
 8005994:	2208      	movs	r2, #8
 8005996:	4619      	mov	r1, r3
 8005998:	480c      	ldr	r0, [pc, #48]	; (80059cc <MX_TIM3_Init+0xd4>)
 800599a:	f7fe f837 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80059a4:	f000 f9ac 	bl	8005d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	220c      	movs	r2, #12
 80059ac:	4619      	mov	r1, r3
 80059ae:	4807      	ldr	r0, [pc, #28]	; (80059cc <MX_TIM3_Init+0xd4>)
 80059b0:	f7fe f82c 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80059ba:	f000 f9a1 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80059be:	4803      	ldr	r0, [pc, #12]	; (80059cc <MX_TIM3_Init+0xd4>)
 80059c0:	f000 fbe6 	bl	8006190 <HAL_TIM_MspPostInit>

}
 80059c4:	bf00      	nop
 80059c6:	3728      	adds	r7, #40	; 0x28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20000234 	.word	0x20000234
 80059d0:	40000400 	.word	0x40000400

080059d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059da:	f107 0308 	add.w	r3, r7, #8
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059e8:	463b      	mov	r3, r7
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <MX_TIM4_Init+0x94>)
 80059f2:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <MX_TIM4_Init+0x98>)
 80059f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <MX_TIM4_Init+0x94>)
 80059f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80059fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059fe:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <MX_TIM4_Init+0x94>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 239;
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <MX_TIM4_Init+0x94>)
 8005a06:	22ef      	movs	r2, #239	; 0xef
 8005a08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a0a:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <MX_TIM4_Init+0x94>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a10:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <MX_TIM4_Init+0x94>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005a16:	4814      	ldr	r0, [pc, #80]	; (8005a68 <MX_TIM4_Init+0x94>)
 8005a18:	f7fd fde4 	bl	80035e4 <HAL_TIM_Base_Init>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005a22:	f000 f96d 	bl	8005d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005a2c:	f107 0308 	add.w	r3, r7, #8
 8005a30:	4619      	mov	r1, r3
 8005a32:	480d      	ldr	r0, [pc, #52]	; (8005a68 <MX_TIM4_Init+0x94>)
 8005a34:	f7fe f8b0 	bl	8003b98 <HAL_TIM_ConfigClockSource>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005a3e:	f000 f95f 	bl	8005d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a42:	2300      	movs	r3, #0
 8005a44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4806      	ldr	r0, [pc, #24]	; (8005a68 <MX_TIM4_Init+0x94>)
 8005a50:	f7fe fc94 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005a5a:	f000 f951 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005a5e:	bf00      	nop
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200001b4 	.word	0x200001b4
 8005a6c:	40000800 	.word	0x40000800

08005a70 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a76:	463b      	mov	r3, r7
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <MX_TIM6_Init+0x68>)
 8005a82:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 239;
 8005a84:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a86:	22ef      	movs	r2, #239	; 0xef
 8005a88:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005a90:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a96:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a98:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005a9e:	480d      	ldr	r0, [pc, #52]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005aa0:	f7fd fda0 	bl	80035e4 <HAL_TIM_Base_Init>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005aaa:	f000 f929 	bl	8005d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4806      	ldr	r0, [pc, #24]	; (8005ad4 <MX_TIM6_Init+0x64>)
 8005abc:	f7fe fc5e 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005ac6:	f000 f91b 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200002e8 	.word	0x200002e8
 8005ad8:	40001000 	.word	0x40001000

08005adc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005aea:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <MX_TIM7_Init+0x60>)
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <MX_TIM7_Init+0x64>)
 8005aee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8005af0:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <MX_TIM7_Init+0x60>)
 8005af2:	2263      	movs	r2, #99	; 0x63
 8005af4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <MX_TIM7_Init+0x60>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 239;
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <MX_TIM7_Init+0x60>)
 8005afe:	22ef      	movs	r2, #239	; 0xef
 8005b00:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b02:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <MX_TIM7_Init+0x60>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005b08:	480c      	ldr	r0, [pc, #48]	; (8005b3c <MX_TIM7_Init+0x60>)
 8005b0a:	f7fd fd6b 	bl	80035e4 <HAL_TIM_Base_Init>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005b14:	f000 f8f4 	bl	8005d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005b20:	463b      	mov	r3, r7
 8005b22:	4619      	mov	r1, r3
 8005b24:	4805      	ldr	r0, [pc, #20]	; (8005b3c <MX_TIM7_Init+0x60>)
 8005b26:	f7fe fc29 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005b30:	f000 f8e6 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000378 	.word	0x20000378
 8005b40:	40001400 	.word	0x40001400

08005b44 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b4a:	f107 0308 	add.w	r3, r7, #8
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b58:	463b      	mov	r3, r7
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005b60:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005b62:	4a20      	ldr	r2, [pc, #128]	; (8005be4 <MX_TIM15_Init+0xa0>)
 8005b64:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 9999;
 8005b66:	4b1e      	ldr	r3, [pc, #120]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005b68:	f242 720f 	movw	r2, #9999	; 0x270f
 8005b6c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b6e:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 23999;
 8005b74:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005b76:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8005b7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005b82:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005b8e:	4814      	ldr	r0, [pc, #80]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005b90:	f7fd fd28 	bl	80035e4 <HAL_TIM_Base_Init>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8005b9a:	f000 f8b1 	bl	8005d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005ba4:	f107 0308 	add.w	r3, r7, #8
 8005ba8:	4619      	mov	r1, r3
 8005baa:	480d      	ldr	r0, [pc, #52]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005bac:	f7fd fff4 	bl	8003b98 <HAL_TIM_ConfigClockSource>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8005bb6:	f000 f8a3 	bl	8005d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4806      	ldr	r0, [pc, #24]	; (8005be0 <MX_TIM15_Init+0x9c>)
 8005bc8:	f7fe fbd8 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8005bd2:	f000 f895 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005bd6:	bf00      	nop
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200001f4 	.word	0x200001f4
 8005be4:	40014000 	.word	0x40014000

08005be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005bec:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005bee:	4a12      	ldr	r2, [pc, #72]	; (8005c38 <MX_USART1_UART_Init+0x50>)
 8005bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005bf2:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005bfa:	4b0e      	ldr	r3, [pc, #56]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005c0e:	220c      	movs	r2, #12
 8005c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c12:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c18:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c1e:	4805      	ldr	r0, [pc, #20]	; (8005c34 <MX_USART1_UART_Init+0x4c>)
 8005c20:	f7fe fc02 	bl	8004428 <HAL_UART_Init>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005c2a:	f000 f869 	bl	8005d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200002a8 	.word	0x200002a8
 8005c38:	40013800 	.word	0x40013800

08005c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c42:	f107 0310 	add.w	r3, r7, #16
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
 8005c4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	4a27      	ldr	r2, [pc, #156]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c56:	f043 0320 	orr.w	r3, r3, #32
 8005c5a:	6193      	str	r3, [r2, #24]
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c68:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c6e:	f043 0304 	orr.w	r3, r3, #4
 8005c72:	6193      	str	r3, [r2, #24]
 8005c74:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c80:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c86:	f043 0308 	orr.w	r3, r3, #8
 8005c8a:	6193      	str	r3, [r2, #24]
 8005c8c:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <MX_GPIO_Init+0xb8>)
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f24f 1138 	movw	r1, #61752	; 0xf138
 8005c9e:	4816      	ldr	r0, [pc, #88]	; (8005cf8 <MX_GPIO_Init+0xbc>)
 8005ca0:	f7fc f876 	bl	8001d90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005caa:	4814      	ldr	r0, [pc, #80]	; (8005cfc <MX_GPIO_Init+0xc0>)
 8005cac:	f7fc f870 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8005cb0:	f24f 1338 	movw	r3, #61752	; 0xf138
 8005cb4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc2:	f107 0310 	add.w	r3, r7, #16
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	480b      	ldr	r0, [pc, #44]	; (8005cf8 <MX_GPIO_Init+0xbc>)
 8005cca:	f7fb ff07 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cdc:	2302      	movs	r3, #2
 8005cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ce0:	f107 0310 	add.w	r3, r7, #16
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4805      	ldr	r0, [pc, #20]	; (8005cfc <MX_GPIO_Init+0xc0>)
 8005ce8:	f7fb fef8 	bl	8001adc <HAL_GPIO_Init>

}
 8005cec:	bf00      	nop
 8005cee:	3720      	adds	r7, #32
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40010c00 	.word	0x40010c00
 8005cfc:	40010800 	.word	0x40010800

08005d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8005d04:	e7fe      	b.n	8005d04 <Error_Handler+0x4>
	...

08005d08 <changeSpeed>:
	float v = _steps * 30;
	return v;
}


void changeSpeed(int rpm){
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	if(rpm > 120){
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b78      	cmp	r3, #120	; 0x78
 8005d14:	dd01      	ble.n	8005d1a <changeSpeed+0x12>
		rpm = 120;
 8005d16:	2378      	movs	r3, #120	; 0x78
 8005d18:	607b      	str	r3, [r7, #4]
	}

	if(rpm != 0){
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d025      	beq.n	8005d6c <changeSpeed+0x64>
		int ARR = (100000/(rpm *3.33))-1;
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7fa fbc7 	bl	80004b4 <__aeabi_i2d>
 8005d26:	a316      	add	r3, pc, #88	; (adr r3, 8005d80 <changeSpeed+0x78>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f7fa fc2c 	bl	8000588 <__aeabi_dmul>
 8005d30:	4603      	mov	r3, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	461a      	mov	r2, r3
 8005d36:	4623      	mov	r3, r4
 8005d38:	a113      	add	r1, pc, #76	; (adr r1, 8005d88 <changeSpeed+0x80>)
 8005d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d3e:	f7fa fd4d 	bl	80007dc <__aeabi_ddiv>
 8005d42:	4603      	mov	r3, r0
 8005d44:	460c      	mov	r4, r1
 8005d46:	4618      	mov	r0, r3
 8005d48:	4621      	mov	r1, r4
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <changeSpeed+0x88>)
 8005d50:	f7fa fa62 	bl	8000218 <__aeabi_dsub>
 8005d54:	4603      	mov	r3, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	4618      	mov	r0, r3
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	f7fa fec4 	bl	8000ae8 <__aeabi_d2iz>
 8005d60:	4603      	mov	r3, r0
 8005d62:	60fb      	str	r3, [r7, #12]
		TIM2->ARR = ARR;
 8005d64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
	_speed = rpm;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <changeSpeed+0x8c>)
 8005d72:	801a      	strh	r2, [r3, #0]

}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd90      	pop	{r4, r7, pc}
 8005d7c:	f3af 8000 	nop.w
 8005d80:	0a3d70a4 	.word	0x0a3d70a4
 8005d84:	400aa3d7 	.word	0x400aa3d7
 8005d88:	00000000 	.word	0x00000000
 8005d8c:	40f86a00 	.word	0x40f86a00
 8005d90:	3ff00000 	.word	0x3ff00000
 8005d94:	20000120 	.word	0x20000120

08005d98 <motorsInit>:


void motorsInit(){
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEFT_MOTOR_I1_PORT, LEFT_MOTOR_I1, GPIO_PIN_RESET);
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2120      	movs	r1, #32
 8005da0:	4808      	ldr	r0, [pc, #32]	; (8005dc4 <motorsInit+0x2c>)
 8005da2:	f7fb fff5 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_I1_PORT, RIGHT_MOTOR_I1, GPIO_PIN_RESET);
 8005da6:	2200      	movs	r2, #0
 8005da8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dac:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <motorsInit+0x2c>)
 8005dae:	f7fb ffef 	bl	8001d90 <HAL_GPIO_WritePin>
	_steps = 0;
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <motorsInit+0x30>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	801a      	strh	r2, [r3, #0]
	_v = 0;
 8005db8:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <motorsInit+0x34>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	801a      	strh	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40010c00 	.word	0x40010c00
 8005dc8:	20000118 	.word	0x20000118
 8005dcc:	20000148 	.word	0x20000148

08005dd0 <stepBoth>:
		HAL_GPIO_WritePin(LEFT_MOTOR_STEP_PORT, LEFT_MOTOR_STEP, GPIO_PIN_RESET);
	}

}

void stepBoth(direction dir){
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71fb      	strb	r3, [r7, #7]
	if(dir == FORWARD){
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10c      	bne.n	8005dfa <stepBoth+0x2a>
		HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_PORT, RIGHT_MOTOR_DIR, GPIO_PIN_SET);
 8005de0:	2201      	movs	r2, #1
 8005de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005de6:	481b      	ldr	r0, [pc, #108]	; (8005e54 <stepBoth+0x84>)
 8005de8:	f7fb ffd2 	bl	8001d90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_MOTOR_DIR_PORT, LEFT_MOTOR_DIR, GPIO_PIN_RESET);
 8005dec:	2200      	movs	r2, #0
 8005dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005df2:	4819      	ldr	r0, [pc, #100]	; (8005e58 <stepBoth+0x88>)
 8005df4:	f7fb ffcc 	bl	8001d90 <HAL_GPIO_WritePin>
 8005df8:	e00b      	b.n	8005e12 <stepBoth+0x42>
	}
	else{
		HAL_GPIO_WritePin(RIGHT_MOTOR_DIR_PORT, RIGHT_MOTOR_DIR, GPIO_PIN_RESET);
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e00:	4814      	ldr	r0, [pc, #80]	; (8005e54 <stepBoth+0x84>)
 8005e02:	f7fb ffc5 	bl	8001d90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_MOTOR_DIR_PORT, LEFT_MOTOR_DIR, GPIO_PIN_SET);
 8005e06:	2201      	movs	r2, #1
 8005e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e0c:	4812      	ldr	r0, [pc, #72]	; (8005e58 <stepBoth+0x88>)
 8005e0e:	f7fb ffbf 	bl	8001d90 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(RIGHT_MOTOR_STEP_PORT, RIGHT_MOTOR_STEP, GPIO_PIN_SET);
 8005e12:	2201      	movs	r2, #1
 8005e14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e18:	480e      	ldr	r0, [pc, #56]	; (8005e54 <stepBoth+0x84>)
 8005e1a:	f7fb ffb9 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_STEP_PORT, LEFT_MOTOR_STEP, GPIO_PIN_SET);
 8005e1e:	2201      	movs	r2, #1
 8005e20:	2108      	movs	r1, #8
 8005e22:	480c      	ldr	r0, [pc, #48]	; (8005e54 <stepBoth+0x84>)
 8005e24:	f7fb ffb4 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_MOTOR_STEP_PORT, LEFT_MOTOR_STEP, GPIO_PIN_RESET);
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2108      	movs	r1, #8
 8005e2c:	4809      	ldr	r0, [pc, #36]	; (8005e54 <stepBoth+0x84>)
 8005e2e:	f7fb ffaf 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_MOTOR_STEP_PORT, RIGHT_MOTOR_STEP, GPIO_PIN_RESET);
 8005e32:	2200      	movs	r2, #0
 8005e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e38:	4806      	ldr	r0, [pc, #24]	; (8005e54 <stepBoth+0x84>)
 8005e3a:	f7fb ffa9 	bl	8001d90 <HAL_GPIO_WritePin>

	_steps++;
 8005e3e:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <stepBoth+0x8c>)
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <stepBoth+0x8c>)
 8005e48:	801a      	strh	r2, [r3, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40010c00 	.word	0x40010c00
 8005e58:	40010800 	.word	0x40010800
 8005e5c:	20000118 	.word	0x20000118

08005e60 <moveRobot>:


void moveRobot(uint16_t speed, direction dir){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	460a      	mov	r2, r1
 8005e6a:	80fb      	strh	r3, [r7, #6]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	717b      	strb	r3, [r7, #5]
	_steps++;
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <moveRobot+0x58>)
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <moveRobot+0x58>)
 8005e7a:	801a      	strh	r2, [r3, #0]
	if(_speed != previousSpeed){
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <moveRobot+0x5c>)
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <moveRobot+0x60>)
 8005e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d005      	beq.n	8005e9a <moveRobot+0x3a>
	changeSpeed(_speed);
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <moveRobot+0x5c>)
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff ff37 	bl	8005d08 <changeSpeed>
	}
	//stepSingle(RIGHT,dir);
	//stepSingle(LEFT,dir);
	stepBoth(dir);
 8005e9a:	797b      	ldrb	r3, [r7, #5]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff ff97 	bl	8005dd0 <stepBoth>
	previousSpeed = _speed;
 8005ea2:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <moveRobot+0x5c>)
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	b21a      	sxth	r2, r3
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <moveRobot+0x60>)
 8005eac:	801a      	strh	r2, [r3, #0]
}
 8005eae:	bf00      	nop
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000118 	.word	0x20000118
 8005ebc:	20000120 	.word	0x20000120
 8005ec0:	20000134 	.word	0x20000134

08005ec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <HAL_MspInit+0x5c>)
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <HAL_MspInit+0x5c>)
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	6193      	str	r3, [r2, #24]
 8005ed6:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <HAL_MspInit+0x5c>)
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <HAL_MspInit+0x5c>)
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <HAL_MspInit+0x5c>)
 8005ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eec:	61d3      	str	r3, [r2, #28]
 8005eee:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <HAL_MspInit+0x5c>)
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	607b      	str	r3, [r7, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <HAL_MspInit+0x60>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	4a04      	ldr	r2, [pc, #16]	; (8005f24 <HAL_MspInit+0x60>)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr
 8005f20:	40021000 	.word	0x40021000
 8005f24:	40010000 	.word	0x40010000

08005f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f30:	f107 0310 	add.w	r3, r7, #16
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
 8005f3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <HAL_ADC_MspInit+0x6c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d121      	bne.n	8005f8c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <HAL_ADC_MspInit+0x70>)
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	4a12      	ldr	r2, [pc, #72]	; (8005f98 <HAL_ADC_MspInit+0x70>)
 8005f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f52:	6193      	str	r3, [r2, #24]
 8005f54:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <HAL_ADC_MspInit+0x70>)
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <HAL_ADC_MspInit+0x70>)
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	4a0c      	ldr	r2, [pc, #48]	; (8005f98 <HAL_ADC_MspInit+0x70>)
 8005f66:	f043 0304 	orr.w	r3, r3, #4
 8005f6a:	6193      	str	r3, [r2, #24]
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <HAL_ADC_MspInit+0x70>)
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = ADC_S1_Pin|ADC_S2_Pin|ADC_S3_Pin;
 8005f78:	230e      	movs	r3, #14
 8005f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f80:	f107 0310 	add.w	r3, r7, #16
 8005f84:	4619      	mov	r1, r3
 8005f86:	4805      	ldr	r0, [pc, #20]	; (8005f9c <HAL_ADC_MspInit+0x74>)
 8005f88:	f7fb fda8 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005f8c:	bf00      	nop
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40012400 	.word	0x40012400
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40010800 	.word	0x40010800

08005fa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	f107 0310 	add.w	r3, r7, #16
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <HAL_I2C_MspInit+0x70>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d123      	bne.n	8006008 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc0:	4b14      	ldr	r3, [pc, #80]	; (8006014 <HAL_I2C_MspInit+0x74>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	4a13      	ldr	r2, [pc, #76]	; (8006014 <HAL_I2C_MspInit+0x74>)
 8005fc6:	f043 0308 	orr.w	r3, r3, #8
 8005fca:	6193      	str	r3, [r2, #24]
 8005fcc:	4b11      	ldr	r3, [pc, #68]	; (8006014 <HAL_I2C_MspInit+0x74>)
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fd8:	23c0      	movs	r3, #192	; 0xc0
 8005fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fdc:	2312      	movs	r3, #18
 8005fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fe4:	f107 0310 	add.w	r3, r7, #16
 8005fe8:	4619      	mov	r1, r3
 8005fea:	480b      	ldr	r0, [pc, #44]	; (8006018 <HAL_I2C_MspInit+0x78>)
 8005fec:	f7fb fd76 	bl	8001adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ff0:	4b08      	ldr	r3, [pc, #32]	; (8006014 <HAL_I2C_MspInit+0x74>)
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	4a07      	ldr	r2, [pc, #28]	; (8006014 <HAL_I2C_MspInit+0x74>)
 8005ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ffa:	61d3      	str	r3, [r2, #28]
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <HAL_I2C_MspInit+0x74>)
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006008:	bf00      	nop
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40005400 	.word	0x40005400
 8006014:	40021000 	.word	0x40021000
 8006018:	40010c00 	.word	0x40010c00

0800601c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602c:	d114      	bne.n	8006058 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800602e:	4b40      	ldr	r3, [pc, #256]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	4a3f      	ldr	r2, [pc, #252]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	61d3      	str	r3, [r2, #28]
 800603a:	4b3d      	ldr	r3, [pc, #244]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	61fb      	str	r3, [r7, #28]
 8006044:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006046:	2200      	movs	r2, #0
 8006048:	2100      	movs	r1, #0
 800604a:	201c      	movs	r0, #28
 800604c:	f7fb fd0f 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006050:	201c      	movs	r0, #28
 8006052:	f7fb fd28 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8006056:	e066      	b.n	8006126 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM4)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a35      	ldr	r2, [pc, #212]	; (8006134 <HAL_TIM_Base_MspInit+0x118>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d114      	bne.n	800608c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006062:	4b33      	ldr	r3, [pc, #204]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	4a32      	ldr	r2, [pc, #200]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 8006068:	f043 0304 	orr.w	r3, r3, #4
 800606c:	61d3      	str	r3, [r2, #28]
 800606e:	4b30      	ldr	r3, [pc, #192]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	201e      	movs	r0, #30
 8006080:	f7fb fcf5 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006084:	201e      	movs	r0, #30
 8006086:	f7fb fd0e 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
}
 800608a:	e04c      	b.n	8006126 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a29      	ldr	r2, [pc, #164]	; (8006138 <HAL_TIM_Base_MspInit+0x11c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d114      	bne.n	80060c0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006096:	4b26      	ldr	r3, [pc, #152]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	4a25      	ldr	r2, [pc, #148]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 800609c:	f043 0310 	orr.w	r3, r3, #16
 80060a0:	61d3      	str	r3, [r2, #28]
 80060a2:	4b23      	ldr	r3, [pc, #140]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80060ae:	2200      	movs	r2, #0
 80060b0:	2100      	movs	r1, #0
 80060b2:	2036      	movs	r0, #54	; 0x36
 80060b4:	f7fb fcdb 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80060b8:	2036      	movs	r0, #54	; 0x36
 80060ba:	f7fb fcf4 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
}
 80060be:	e032      	b.n	8006126 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM7)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1d      	ldr	r2, [pc, #116]	; (800613c <HAL_TIM_Base_MspInit+0x120>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d114      	bne.n	80060f4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80060ca:	4b19      	ldr	r3, [pc, #100]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	4a18      	ldr	r2, [pc, #96]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 80060d0:	f043 0320 	orr.w	r3, r3, #32
 80060d4:	61d3      	str	r3, [r2, #28]
 80060d6:	4b16      	ldr	r3, [pc, #88]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80060e2:	2200      	movs	r2, #0
 80060e4:	2100      	movs	r1, #0
 80060e6:	2037      	movs	r0, #55	; 0x37
 80060e8:	f7fb fcc1 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80060ec:	2037      	movs	r0, #55	; 0x37
 80060ee:	f7fb fcda 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
}
 80060f2:	e018      	b.n	8006126 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM15)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_TIM_Base_MspInit+0x124>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d113      	bne.n	8006126 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	4a0b      	ldr	r2, [pc, #44]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 8006104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006108:	6193      	str	r3, [r2, #24]
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <HAL_TIM_Base_MspInit+0x114>)
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8006116:	2200      	movs	r2, #0
 8006118:	2100      	movs	r1, #0
 800611a:	2018      	movs	r0, #24
 800611c:	f7fb fca7 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8006120:	2018      	movs	r0, #24
 8006122:	f7fb fcc0 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
}
 8006126:	bf00      	nop
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40021000 	.word	0x40021000
 8006134:	40000800 	.word	0x40000800
 8006138:	40001000 	.word	0x40001000
 800613c:	40001400 	.word	0x40001400
 8006140:	40014000 	.word	0x40014000

08006144 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0d      	ldr	r2, [pc, #52]	; (8006188 <HAL_TIM_PWM_MspInit+0x44>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d113      	bne.n	800617e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <HAL_TIM_PWM_MspInit+0x48>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4a0c      	ldr	r2, [pc, #48]	; (800618c <HAL_TIM_PWM_MspInit+0x48>)
 800615c:	f043 0302 	orr.w	r3, r3, #2
 8006160:	61d3      	str	r3, [r2, #28]
 8006162:	4b0a      	ldr	r3, [pc, #40]	; (800618c <HAL_TIM_PWM_MspInit+0x48>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	201d      	movs	r0, #29
 8006174:	f7fb fc7b 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006178:	201d      	movs	r0, #29
 800617a:	f7fb fc94 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40000400 	.word	0x40000400
 800618c:	40021000 	.word	0x40021000

08006190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <HAL_TIM_MspPostInit+0x88>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d12f      	bne.n	8006210 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061b0:	4b1a      	ldr	r3, [pc, #104]	; (800621c <HAL_TIM_MspPostInit+0x8c>)
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	4a19      	ldr	r2, [pc, #100]	; (800621c <HAL_TIM_MspPostInit+0x8c>)
 80061b6:	f043 0304 	orr.w	r3, r3, #4
 80061ba:	6193      	str	r3, [r2, #24]
 80061bc:	4b17      	ldr	r3, [pc, #92]	; (800621c <HAL_TIM_MspPostInit+0x8c>)
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <HAL_TIM_MspPostInit+0x8c>)
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	4a13      	ldr	r2, [pc, #76]	; (800621c <HAL_TIM_MspPostInit+0x8c>)
 80061ce:	f043 0308 	orr.w	r3, r3, #8
 80061d2:	6193      	str	r3, [r2, #24]
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <HAL_TIM_MspPostInit+0x8c>)
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e4:	2302      	movs	r3, #2
 80061e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e8:	2302      	movs	r3, #2
 80061ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ec:	f107 0310 	add.w	r3, r7, #16
 80061f0:	4619      	mov	r1, r3
 80061f2:	480b      	ldr	r0, [pc, #44]	; (8006220 <HAL_TIM_MspPostInit+0x90>)
 80061f4:	f7fb fc72 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80061f8:	2303      	movs	r3, #3
 80061fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fc:	2302      	movs	r3, #2
 80061fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006200:	2302      	movs	r3, #2
 8006202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006204:	f107 0310 	add.w	r3, r7, #16
 8006208:	4619      	mov	r1, r3
 800620a:	4806      	ldr	r0, [pc, #24]	; (8006224 <HAL_TIM_MspPostInit+0x94>)
 800620c:	f7fb fc66 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006210:	bf00      	nop
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40000400 	.word	0x40000400
 800621c:	40021000 	.word	0x40021000
 8006220:	40010800 	.word	0x40010800
 8006224:	40010c00 	.word	0x40010c00

08006228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006230:	f107 0310 	add.w	r3, r7, #16
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	609a      	str	r2, [r3, #8]
 800623c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <HAL_UART_MspInit+0x8c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d131      	bne.n	80062ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006248:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <HAL_UART_MspInit+0x90>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	4a1a      	ldr	r2, [pc, #104]	; (80062b8 <HAL_UART_MspInit+0x90>)
 800624e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006252:	6193      	str	r3, [r2, #24]
 8006254:	4b18      	ldr	r3, [pc, #96]	; (80062b8 <HAL_UART_MspInit+0x90>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006260:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <HAL_UART_MspInit+0x90>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <HAL_UART_MspInit+0x90>)
 8006266:	f043 0304 	orr.w	r3, r3, #4
 800626a:	6193      	str	r3, [r2, #24]
 800626c:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <HAL_UART_MspInit+0x90>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800627c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800627e:	2302      	movs	r3, #2
 8006280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006282:	2303      	movs	r3, #3
 8006284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006286:	f107 0310 	add.w	r3, r7, #16
 800628a:	4619      	mov	r1, r3
 800628c:	480b      	ldr	r0, [pc, #44]	; (80062bc <HAL_UART_MspInit+0x94>)
 800628e:	f7fb fc25 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629c:	2300      	movs	r3, #0
 800629e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062a0:	f107 0310 	add.w	r3, r7, #16
 80062a4:	4619      	mov	r1, r3
 80062a6:	4805      	ldr	r0, [pc, #20]	; (80062bc <HAL_UART_MspInit+0x94>)
 80062a8:	f7fb fc18 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80062ac:	bf00      	nop
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40013800 	.word	0x40013800
 80062b8:	40021000 	.word	0x40021000
 80062bc:	40010800 	.word	0x40010800

080062c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80062c4:	bf00      	nop
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr

080062cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062d0:	e7fe      	b.n	80062d0 <HardFault_Handler+0x4>

080062d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062d2:	b480      	push	{r7}
 80062d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062d6:	e7fe      	b.n	80062d6 <MemManage_Handler+0x4>

080062d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062dc:	e7fe      	b.n	80062dc <BusFault_Handler+0x4>

080062de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062de:	b480      	push	{r7}
 80062e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062e2:	e7fe      	b.n	80062e2 <UsageFault_Handler+0x4>

080062e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062e8:	bf00      	nop
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062f4:	bf00      	nop
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006300:	bf00      	nop
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800630c:	f7fa ff9c 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006310:	bf00      	nop
 8006312:	bd80      	pop	{r7, pc}

08006314 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006318:	4802      	ldr	r0, [pc, #8]	; (8006324 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800631a:	f7fd fa6f 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800631e:	bf00      	nop
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	200001f4 	.word	0x200001f4

08006328 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800632c:	4802      	ldr	r0, [pc, #8]	; (8006338 <TIM2_IRQHandler+0x10>)
 800632e:	f7fd fa65 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006332:	bf00      	nop
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000328 	.word	0x20000328

0800633c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006340:	4802      	ldr	r0, [pc, #8]	; (800634c <TIM3_IRQHandler+0x10>)
 8006342:	f7fd fa5b 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006346:	bf00      	nop
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000234 	.word	0x20000234

08006350 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006354:	4802      	ldr	r0, [pc, #8]	; (8006360 <TIM4_IRQHandler+0x10>)
 8006356:	f7fd fa51 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800635a:	bf00      	nop
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	200001b4 	.word	0x200001b4

08006364 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006368:	4802      	ldr	r0, [pc, #8]	; (8006374 <TIM6_DAC_IRQHandler+0x10>)
 800636a:	f7fd fa47 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800636e:	bf00      	nop
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200002e8 	.word	0x200002e8

08006378 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800637c:	4802      	ldr	r0, [pc, #8]	; (8006388 <TIM7_IRQHandler+0x10>)
 800637e:	f7fd fa3d 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006382:	bf00      	nop
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000378 	.word	0x20000378

0800638c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006390:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <SystemInit+0x64>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <SystemInit+0x64>)
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800639c:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <SystemInit+0x64>)
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	4913      	ldr	r1, [pc, #76]	; (80063f0 <SystemInit+0x64>)
 80063a2:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <SystemInit+0x68>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80063a8:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <SystemInit+0x64>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a10      	ldr	r2, [pc, #64]	; (80063f0 <SystemInit+0x64>)
 80063ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80063b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80063b8:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <SystemInit+0x64>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a0c      	ldr	r2, [pc, #48]	; (80063f0 <SystemInit+0x64>)
 80063be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <SystemInit+0x64>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <SystemInit+0x64>)
 80063ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80063ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <SystemInit+0x64>)
 80063d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80063d6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <SystemInit+0x64>)
 80063da:	2200      	movs	r2, #0
 80063dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <SystemInit+0x6c>)
 80063e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063e4:	609a      	str	r2, [r3, #8]
#endif 
}
 80063e6:	bf00      	nop
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000
 80063f4:	f8ff0000 	.word	0xf8ff0000
 80063f8:	e000ed00 	.word	0xe000ed00

080063fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80063fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80063fe:	e003      	b.n	8006408 <LoopCopyDataInit>

08006400 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006402:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006404:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006406:	3104      	adds	r1, #4

08006408 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006408:	480a      	ldr	r0, [pc, #40]	; (8006434 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800640c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800640e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006410:	d3f6      	bcc.n	8006400 <CopyDataInit>
  ldr r2, =_sbss
 8006412:	4a0a      	ldr	r2, [pc, #40]	; (800643c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006414:	e002      	b.n	800641c <LoopFillZerobss>

08006416 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006416:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006418:	f842 3b04 	str.w	r3, [r2], #4

0800641c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800641c:	4b08      	ldr	r3, [pc, #32]	; (8006440 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800641e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006420:	d3f9      	bcc.n	8006416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006422:	f7ff ffb3 	bl	800638c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006426:	f000 f815 	bl	8006454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800642a:	f7ff f8eb 	bl	8005604 <main>
  bx lr
 800642e:	4770      	bx	lr
  ldr r3, =_sidata
 8006430:	08006ce8 	.word	0x08006ce8
  ldr r0, =_sdata
 8006434:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006438:	200000c8 	.word	0x200000c8
  ldr r2, =_sbss
 800643c:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 8006440:	200003b8 	.word	0x200003b8

08006444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006444:	e7fe      	b.n	8006444 <ADC1_IRQHandler>
	...

08006448 <__errno>:
 8006448:	4b01      	ldr	r3, [pc, #4]	; (8006450 <__errno+0x8>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000060 	.word	0x20000060

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	2500      	movs	r5, #0
 8006458:	4e0c      	ldr	r6, [pc, #48]	; (800648c <__libc_init_array+0x38>)
 800645a:	4c0d      	ldr	r4, [pc, #52]	; (8006490 <__libc_init_array+0x3c>)
 800645c:	1ba4      	subs	r4, r4, r6
 800645e:	10a4      	asrs	r4, r4, #2
 8006460:	42a5      	cmp	r5, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	f000 fbf0 	bl	8006c48 <_init>
 8006468:	2500      	movs	r5, #0
 800646a:	4e0a      	ldr	r6, [pc, #40]	; (8006494 <__libc_init_array+0x40>)
 800646c:	4c0a      	ldr	r4, [pc, #40]	; (8006498 <__libc_init_array+0x44>)
 800646e:	1ba4      	subs	r4, r4, r6
 8006470:	10a4      	asrs	r4, r4, #2
 8006472:	42a5      	cmp	r5, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800647c:	4798      	blx	r3
 800647e:	3501      	adds	r5, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006486:	4798      	blx	r3
 8006488:	3501      	adds	r5, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	08006ce0 	.word	0x08006ce0
 8006490:	08006ce0 	.word	0x08006ce0
 8006494:	08006ce0 	.word	0x08006ce0
 8006498:	08006ce4 	.word	0x08006ce4

0800649c <memset>:
 800649c:	4603      	mov	r3, r0
 800649e:	4402      	add	r2, r0
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d100      	bne.n	80064a6 <memset+0xa>
 80064a4:	4770      	bx	lr
 80064a6:	f803 1b01 	strb.w	r1, [r3], #1
 80064aa:	e7f9      	b.n	80064a0 <memset+0x4>

080064ac <fmax>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	4616      	mov	r6, r2
 80064b4:	461f      	mov	r7, r3
 80064b6:	f000 f82b 	bl	8006510 <__fpclassifyd>
 80064ba:	b158      	cbz	r0, 80064d4 <fmax+0x28>
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f000 f826 	bl	8006510 <__fpclassifyd>
 80064c4:	b140      	cbz	r0, 80064d8 <fmax+0x2c>
 80064c6:	4632      	mov	r2, r6
 80064c8:	463b      	mov	r3, r7
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7fa faeb 	bl	8000aa8 <__aeabi_dcmpgt>
 80064d2:	b908      	cbnz	r0, 80064d8 <fmax+0x2c>
 80064d4:	4634      	mov	r4, r6
 80064d6:	463d      	mov	r5, r7
 80064d8:	4620      	mov	r0, r4
 80064da:	4629      	mov	r1, r5
 80064dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064de <fmin>:
 80064de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e0:	4604      	mov	r4, r0
 80064e2:	460d      	mov	r5, r1
 80064e4:	4616      	mov	r6, r2
 80064e6:	461f      	mov	r7, r3
 80064e8:	f000 f812 	bl	8006510 <__fpclassifyd>
 80064ec:	b158      	cbz	r0, 8006506 <fmin+0x28>
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f000 f80d 	bl	8006510 <__fpclassifyd>
 80064f6:	b140      	cbz	r0, 800650a <fmin+0x2c>
 80064f8:	4632      	mov	r2, r6
 80064fa:	463b      	mov	r3, r7
 80064fc:	4620      	mov	r0, r4
 80064fe:	4629      	mov	r1, r5
 8006500:	f7fa fab4 	bl	8000a6c <__aeabi_dcmplt>
 8006504:	b908      	cbnz	r0, 800650a <fmin+0x2c>
 8006506:	4634      	mov	r4, r6
 8006508:	463d      	mov	r5, r7
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006510 <__fpclassifyd>:
 8006510:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8006514:	b510      	push	{r4, lr}
 8006516:	d01b      	beq.n	8006550 <__fpclassifyd+0x40>
 8006518:	4a0f      	ldr	r2, [pc, #60]	; (8006558 <__fpclassifyd+0x48>)
 800651a:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 800651e:	4294      	cmp	r4, r2
 8006520:	d910      	bls.n	8006544 <__fpclassifyd+0x34>
 8006522:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 8006526:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <__fpclassifyd+0x48>)
 8006528:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 800652c:	4291      	cmp	r1, r2
 800652e:	d909      	bls.n	8006544 <__fpclassifyd+0x34>
 8006530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006534:	d308      	bcc.n	8006548 <__fpclassifyd+0x38>
 8006536:	4a09      	ldr	r2, [pc, #36]	; (800655c <__fpclassifyd+0x4c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d107      	bne.n	800654c <__fpclassifyd+0x3c>
 800653c:	fab0 f080 	clz	r0, r0
 8006540:	0940      	lsrs	r0, r0, #5
 8006542:	bd10      	pop	{r4, pc}
 8006544:	2004      	movs	r0, #4
 8006546:	e7fc      	b.n	8006542 <__fpclassifyd+0x32>
 8006548:	2003      	movs	r0, #3
 800654a:	e7fa      	b.n	8006542 <__fpclassifyd+0x32>
 800654c:	2000      	movs	r0, #0
 800654e:	e7f8      	b.n	8006542 <__fpclassifyd+0x32>
 8006550:	2800      	cmp	r0, #0
 8006552:	d1e6      	bne.n	8006522 <__fpclassifyd+0x12>
 8006554:	2002      	movs	r0, #2
 8006556:	e7f4      	b.n	8006542 <__fpclassifyd+0x32>
 8006558:	7fdfffff 	.word	0x7fdfffff
 800655c:	7ff00000 	.word	0x7ff00000

08006560 <atan2>:
 8006560:	f000 b856 	b.w	8006610 <__ieee754_atan2>

08006564 <sqrt>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	b08b      	sub	sp, #44	; 0x2c
 800656a:	4604      	mov	r4, r0
 800656c:	460d      	mov	r5, r1
 800656e:	f000 f92d 	bl	80067cc <__ieee754_sqrt>
 8006572:	4b24      	ldr	r3, [pc, #144]	; (8006604 <sqrt+0xa0>)
 8006574:	4680      	mov	r8, r0
 8006576:	f993 a000 	ldrsb.w	sl, [r3]
 800657a:	4689      	mov	r9, r1
 800657c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006580:	d02b      	beq.n	80065da <sqrt+0x76>
 8006582:	4622      	mov	r2, r4
 8006584:	462b      	mov	r3, r5
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7fa fa97 	bl	8000abc <__aeabi_dcmpun>
 800658e:	4683      	mov	fp, r0
 8006590:	bb18      	cbnz	r0, 80065da <sqrt+0x76>
 8006592:	2600      	movs	r6, #0
 8006594:	2700      	movs	r7, #0
 8006596:	4632      	mov	r2, r6
 8006598:	463b      	mov	r3, r7
 800659a:	4620      	mov	r0, r4
 800659c:	4629      	mov	r1, r5
 800659e:	f7fa fa65 	bl	8000a6c <__aeabi_dcmplt>
 80065a2:	b1d0      	cbz	r0, 80065da <sqrt+0x76>
 80065a4:	2301      	movs	r3, #1
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4b17      	ldr	r3, [pc, #92]	; (8006608 <sqrt+0xa4>)
 80065aa:	f8cd b020 	str.w	fp, [sp, #32]
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80065b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80065b8:	f1ba 0f00 	cmp.w	sl, #0
 80065bc:	d112      	bne.n	80065e4 <sqrt+0x80>
 80065be:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80065c2:	4668      	mov	r0, sp
 80065c4:	f000 fb3e 	bl	8006c44 <matherr>
 80065c8:	b1b8      	cbz	r0, 80065fa <sqrt+0x96>
 80065ca:	9b08      	ldr	r3, [sp, #32]
 80065cc:	b11b      	cbz	r3, 80065d6 <sqrt+0x72>
 80065ce:	f7ff ff3b 	bl	8006448 <__errno>
 80065d2:	9b08      	ldr	r3, [sp, #32]
 80065d4:	6003      	str	r3, [r0, #0]
 80065d6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80065da:	4640      	mov	r0, r8
 80065dc:	4649      	mov	r1, r9
 80065de:	b00b      	add	sp, #44	; 0x2c
 80065e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7fa f8f6 	bl	80007dc <__aeabi_ddiv>
 80065f0:	f1ba 0f02 	cmp.w	sl, #2
 80065f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065f8:	d1e3      	bne.n	80065c2 <sqrt+0x5e>
 80065fa:	f7ff ff25 	bl	8006448 <__errno>
 80065fe:	2321      	movs	r3, #33	; 0x21
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	e7e2      	b.n	80065ca <sqrt+0x66>
 8006604:	200000c4 	.word	0x200000c4
 8006608:	08006c98 	.word	0x08006c98
 800660c:	00000000 	.word	0x00000000

08006610 <__ieee754_atan2>:
 8006610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	4256      	negs	r6, r2
 8006616:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800661a:	4316      	orrs	r6, r2
 800661c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80067c8 <__ieee754_atan2+0x1b8>
 8006620:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8006624:	454e      	cmp	r6, r9
 8006626:	4604      	mov	r4, r0
 8006628:	460d      	mov	r5, r1
 800662a:	469e      	mov	lr, r3
 800662c:	d808      	bhi.n	8006640 <__ieee754_atan2+0x30>
 800662e:	4246      	negs	r6, r0
 8006630:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006634:	4306      	orrs	r6, r0
 8006636:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800663a:	454e      	cmp	r6, r9
 800663c:	4688      	mov	r8, r1
 800663e:	d906      	bls.n	800664e <__ieee754_atan2+0x3e>
 8006640:	4620      	mov	r0, r4
 8006642:	4629      	mov	r1, r5
 8006644:	f7f9 fdea 	bl	800021c <__adddf3>
 8006648:	4604      	mov	r4, r0
 800664a:	460d      	mov	r5, r1
 800664c:	e030      	b.n	80066b0 <__ieee754_atan2+0xa0>
 800664e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006652:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006656:	4316      	orrs	r6, r2
 8006658:	d103      	bne.n	8006662 <__ieee754_atan2+0x52>
 800665a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665e:	f000 b963 	b.w	8006928 <atan>
 8006662:	179e      	asrs	r6, r3, #30
 8006664:	f006 0602 	and.w	r6, r6, #2
 8006668:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800666c:	ea57 0100 	orrs.w	r1, r7, r0
 8006670:	d107      	bne.n	8006682 <__ieee754_atan2+0x72>
 8006672:	2e02      	cmp	r6, #2
 8006674:	d079      	beq.n	800676a <__ieee754_atan2+0x15a>
 8006676:	2e03      	cmp	r6, #3
 8006678:	d11a      	bne.n	80066b0 <__ieee754_atan2+0xa0>
 800667a:	a541      	add	r5, pc, #260	; (adr r5, 8006780 <__ieee754_atan2+0x170>)
 800667c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006680:	e016      	b.n	80066b0 <__ieee754_atan2+0xa0>
 8006682:	ea5c 0102 	orrs.w	r1, ip, r2
 8006686:	d106      	bne.n	8006696 <__ieee754_atan2+0x86>
 8006688:	f1b8 0f00 	cmp.w	r8, #0
 800668c:	da71      	bge.n	8006772 <__ieee754_atan2+0x162>
 800668e:	a53e      	add	r5, pc, #248	; (adr r5, 8006788 <__ieee754_atan2+0x178>)
 8006690:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006694:	e00c      	b.n	80066b0 <__ieee754_atan2+0xa0>
 8006696:	45cc      	cmp	ip, r9
 8006698:	d123      	bne.n	80066e2 <__ieee754_atan2+0xd2>
 800669a:	4567      	cmp	r7, ip
 800669c:	d114      	bne.n	80066c8 <__ieee754_atan2+0xb8>
 800669e:	2e02      	cmp	r6, #2
 80066a0:	d00a      	beq.n	80066b8 <__ieee754_atan2+0xa8>
 80066a2:	2e03      	cmp	r6, #3
 80066a4:	d00c      	beq.n	80066c0 <__ieee754_atan2+0xb0>
 80066a6:	2e01      	cmp	r6, #1
 80066a8:	d15b      	bne.n	8006762 <__ieee754_atan2+0x152>
 80066aa:	a539      	add	r5, pc, #228	; (adr r5, 8006790 <__ieee754_atan2+0x180>)
 80066ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066b0:	4620      	mov	r0, r4
 80066b2:	4629      	mov	r1, r5
 80066b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b8:	a537      	add	r5, pc, #220	; (adr r5, 8006798 <__ieee754_atan2+0x188>)
 80066ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066be:	e7f7      	b.n	80066b0 <__ieee754_atan2+0xa0>
 80066c0:	a537      	add	r5, pc, #220	; (adr r5, 80067a0 <__ieee754_atan2+0x190>)
 80066c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066c6:	e7f3      	b.n	80066b0 <__ieee754_atan2+0xa0>
 80066c8:	2e02      	cmp	r6, #2
 80066ca:	d04e      	beq.n	800676a <__ieee754_atan2+0x15a>
 80066cc:	2e03      	cmp	r6, #3
 80066ce:	d0d4      	beq.n	800667a <__ieee754_atan2+0x6a>
 80066d0:	2e01      	cmp	r6, #1
 80066d2:	f04f 0400 	mov.w	r4, #0
 80066d6:	d102      	bne.n	80066de <__ieee754_atan2+0xce>
 80066d8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80066dc:	e7e8      	b.n	80066b0 <__ieee754_atan2+0xa0>
 80066de:	2500      	movs	r5, #0
 80066e0:	e7e6      	b.n	80066b0 <__ieee754_atan2+0xa0>
 80066e2:	454f      	cmp	r7, r9
 80066e4:	d0d0      	beq.n	8006688 <__ieee754_atan2+0x78>
 80066e6:	eba7 070c 	sub.w	r7, r7, ip
 80066ea:	153f      	asrs	r7, r7, #20
 80066ec:	2f3c      	cmp	r7, #60	; 0x3c
 80066ee:	dc1e      	bgt.n	800672e <__ieee754_atan2+0x11e>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	da01      	bge.n	80066f8 <__ieee754_atan2+0xe8>
 80066f4:	373c      	adds	r7, #60	; 0x3c
 80066f6:	db1e      	blt.n	8006736 <__ieee754_atan2+0x126>
 80066f8:	4620      	mov	r0, r4
 80066fa:	4629      	mov	r1, r5
 80066fc:	f7fa f86e 	bl	80007dc <__aeabi_ddiv>
 8006700:	f000 fa9c 	bl	8006c3c <fabs>
 8006704:	f000 f910 	bl	8006928 <atan>
 8006708:	4604      	mov	r4, r0
 800670a:	460d      	mov	r5, r1
 800670c:	2e01      	cmp	r6, #1
 800670e:	d015      	beq.n	800673c <__ieee754_atan2+0x12c>
 8006710:	2e02      	cmp	r6, #2
 8006712:	d017      	beq.n	8006744 <__ieee754_atan2+0x134>
 8006714:	2e00      	cmp	r6, #0
 8006716:	d0cb      	beq.n	80066b0 <__ieee754_atan2+0xa0>
 8006718:	a323      	add	r3, pc, #140	; (adr r3, 80067a8 <__ieee754_atan2+0x198>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	4620      	mov	r0, r4
 8006720:	4629      	mov	r1, r5
 8006722:	f7f9 fd79 	bl	8000218 <__aeabi_dsub>
 8006726:	a322      	add	r3, pc, #136	; (adr r3, 80067b0 <__ieee754_atan2+0x1a0>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	e016      	b.n	800675c <__ieee754_atan2+0x14c>
 800672e:	a522      	add	r5, pc, #136	; (adr r5, 80067b8 <__ieee754_atan2+0x1a8>)
 8006730:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006734:	e7ea      	b.n	800670c <__ieee754_atan2+0xfc>
 8006736:	2400      	movs	r4, #0
 8006738:	2500      	movs	r5, #0
 800673a:	e7e7      	b.n	800670c <__ieee754_atan2+0xfc>
 800673c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006740:	461d      	mov	r5, r3
 8006742:	e7b5      	b.n	80066b0 <__ieee754_atan2+0xa0>
 8006744:	a318      	add	r3, pc, #96	; (adr r3, 80067a8 <__ieee754_atan2+0x198>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	4620      	mov	r0, r4
 800674c:	4629      	mov	r1, r5
 800674e:	f7f9 fd63 	bl	8000218 <__aeabi_dsub>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	a116      	add	r1, pc, #88	; (adr r1, 80067b0 <__ieee754_atan2+0x1a0>)
 8006758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800675c:	f7f9 fd5c 	bl	8000218 <__aeabi_dsub>
 8006760:	e772      	b.n	8006648 <__ieee754_atan2+0x38>
 8006762:	a517      	add	r5, pc, #92	; (adr r5, 80067c0 <__ieee754_atan2+0x1b0>)
 8006764:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006768:	e7a2      	b.n	80066b0 <__ieee754_atan2+0xa0>
 800676a:	a511      	add	r5, pc, #68	; (adr r5, 80067b0 <__ieee754_atan2+0x1a0>)
 800676c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006770:	e79e      	b.n	80066b0 <__ieee754_atan2+0xa0>
 8006772:	a511      	add	r5, pc, #68	; (adr r5, 80067b8 <__ieee754_atan2+0x1a8>)
 8006774:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006778:	e79a      	b.n	80066b0 <__ieee754_atan2+0xa0>
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w
 8006780:	54442d18 	.word	0x54442d18
 8006784:	c00921fb 	.word	0xc00921fb
 8006788:	54442d18 	.word	0x54442d18
 800678c:	bff921fb 	.word	0xbff921fb
 8006790:	54442d18 	.word	0x54442d18
 8006794:	bfe921fb 	.word	0xbfe921fb
 8006798:	7f3321d2 	.word	0x7f3321d2
 800679c:	4002d97c 	.word	0x4002d97c
 80067a0:	7f3321d2 	.word	0x7f3321d2
 80067a4:	c002d97c 	.word	0xc002d97c
 80067a8:	33145c07 	.word	0x33145c07
 80067ac:	3ca1a626 	.word	0x3ca1a626
 80067b0:	54442d18 	.word	0x54442d18
 80067b4:	400921fb 	.word	0x400921fb
 80067b8:	54442d18 	.word	0x54442d18
 80067bc:	3ff921fb 	.word	0x3ff921fb
 80067c0:	54442d18 	.word	0x54442d18
 80067c4:	3fe921fb 	.word	0x3fe921fb
 80067c8:	7ff00000 	.word	0x7ff00000

080067cc <__ieee754_sqrt>:
 80067cc:	4b54      	ldr	r3, [pc, #336]	; (8006920 <__ieee754_sqrt+0x154>)
 80067ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	438b      	bics	r3, r1
 80067d4:	4606      	mov	r6, r0
 80067d6:	460d      	mov	r5, r1
 80067d8:	460a      	mov	r2, r1
 80067da:	460c      	mov	r4, r1
 80067dc:	d10f      	bne.n	80067fe <__ieee754_sqrt+0x32>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	f7f9 fed1 	bl	8000588 <__aeabi_dmul>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4630      	mov	r0, r6
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7f9 fd15 	bl	800021c <__adddf3>
 80067f2:	4606      	mov	r6, r0
 80067f4:	460d      	mov	r5, r1
 80067f6:	4630      	mov	r0, r6
 80067f8:	4629      	mov	r1, r5
 80067fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067fe:	2900      	cmp	r1, #0
 8006800:	4607      	mov	r7, r0
 8006802:	4603      	mov	r3, r0
 8006804:	dc0e      	bgt.n	8006824 <__ieee754_sqrt+0x58>
 8006806:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800680a:	ea5c 0707 	orrs.w	r7, ip, r7
 800680e:	d0f2      	beq.n	80067f6 <__ieee754_sqrt+0x2a>
 8006810:	b141      	cbz	r1, 8006824 <__ieee754_sqrt+0x58>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	f7f9 fcff 	bl	8000218 <__aeabi_dsub>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	f7f9 ffdd 	bl	80007dc <__aeabi_ddiv>
 8006822:	e7e6      	b.n	80067f2 <__ieee754_sqrt+0x26>
 8006824:	1512      	asrs	r2, r2, #20
 8006826:	d074      	beq.n	8006912 <__ieee754_sqrt+0x146>
 8006828:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800682c:	07d5      	lsls	r5, r2, #31
 800682e:	f04f 0500 	mov.w	r5, #0
 8006832:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006836:	bf48      	it	mi
 8006838:	0fd9      	lsrmi	r1, r3, #31
 800683a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800683e:	bf44      	itt	mi
 8006840:	005b      	lslmi	r3, r3, #1
 8006842:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006846:	1051      	asrs	r1, r2, #1
 8006848:	0fda      	lsrs	r2, r3, #31
 800684a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800684e:	4628      	mov	r0, r5
 8006850:	2216      	movs	r2, #22
 8006852:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	1987      	adds	r7, r0, r6
 800685a:	42a7      	cmp	r7, r4
 800685c:	bfde      	ittt	le
 800685e:	19b8      	addle	r0, r7, r6
 8006860:	1be4      	suble	r4, r4, r7
 8006862:	19ad      	addle	r5, r5, r6
 8006864:	0fdf      	lsrs	r7, r3, #31
 8006866:	3a01      	subs	r2, #1
 8006868:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800686c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006870:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006874:	d1f0      	bne.n	8006858 <__ieee754_sqrt+0x8c>
 8006876:	f04f 0c20 	mov.w	ip, #32
 800687a:	4696      	mov	lr, r2
 800687c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006880:	4284      	cmp	r4, r0
 8006882:	eb06 070e 	add.w	r7, r6, lr
 8006886:	dc02      	bgt.n	800688e <__ieee754_sqrt+0xc2>
 8006888:	d112      	bne.n	80068b0 <__ieee754_sqrt+0xe4>
 800688a:	429f      	cmp	r7, r3
 800688c:	d810      	bhi.n	80068b0 <__ieee754_sqrt+0xe4>
 800688e:	2f00      	cmp	r7, #0
 8006890:	eb07 0e06 	add.w	lr, r7, r6
 8006894:	da42      	bge.n	800691c <__ieee754_sqrt+0x150>
 8006896:	f1be 0f00 	cmp.w	lr, #0
 800689a:	db3f      	blt.n	800691c <__ieee754_sqrt+0x150>
 800689c:	f100 0801 	add.w	r8, r0, #1
 80068a0:	1a24      	subs	r4, r4, r0
 80068a2:	4640      	mov	r0, r8
 80068a4:	429f      	cmp	r7, r3
 80068a6:	bf88      	it	hi
 80068a8:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 80068ac:	1bdb      	subs	r3, r3, r7
 80068ae:	4432      	add	r2, r6
 80068b0:	0064      	lsls	r4, r4, #1
 80068b2:	f1bc 0c01 	subs.w	ip, ip, #1
 80068b6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80068ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80068be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068c2:	d1dd      	bne.n	8006880 <__ieee754_sqrt+0xb4>
 80068c4:	4323      	orrs	r3, r4
 80068c6:	d006      	beq.n	80068d6 <__ieee754_sqrt+0x10a>
 80068c8:	1c54      	adds	r4, r2, #1
 80068ca:	bf0b      	itete	eq
 80068cc:	4662      	moveq	r2, ip
 80068ce:	3201      	addne	r2, #1
 80068d0:	3501      	addeq	r5, #1
 80068d2:	f022 0201 	bicne.w	r2, r2, #1
 80068d6:	106b      	asrs	r3, r5, #1
 80068d8:	0852      	lsrs	r2, r2, #1
 80068da:	07e8      	lsls	r0, r5, #31
 80068dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80068e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80068e4:	bf48      	it	mi
 80068e6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80068ea:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80068ee:	4616      	mov	r6, r2
 80068f0:	e781      	b.n	80067f6 <__ieee754_sqrt+0x2a>
 80068f2:	0adc      	lsrs	r4, r3, #11
 80068f4:	3915      	subs	r1, #21
 80068f6:	055b      	lsls	r3, r3, #21
 80068f8:	2c00      	cmp	r4, #0
 80068fa:	d0fa      	beq.n	80068f2 <__ieee754_sqrt+0x126>
 80068fc:	02e6      	lsls	r6, r4, #11
 80068fe:	d50a      	bpl.n	8006916 <__ieee754_sqrt+0x14a>
 8006900:	f1c2 0020 	rsb	r0, r2, #32
 8006904:	fa23 f000 	lsr.w	r0, r3, r0
 8006908:	1e55      	subs	r5, r2, #1
 800690a:	4093      	lsls	r3, r2
 800690c:	4304      	orrs	r4, r0
 800690e:	1b4a      	subs	r2, r1, r5
 8006910:	e78a      	b.n	8006828 <__ieee754_sqrt+0x5c>
 8006912:	4611      	mov	r1, r2
 8006914:	e7f0      	b.n	80068f8 <__ieee754_sqrt+0x12c>
 8006916:	0064      	lsls	r4, r4, #1
 8006918:	3201      	adds	r2, #1
 800691a:	e7ef      	b.n	80068fc <__ieee754_sqrt+0x130>
 800691c:	4680      	mov	r8, r0
 800691e:	e7bf      	b.n	80068a0 <__ieee754_sqrt+0xd4>
 8006920:	7ff00000 	.word	0x7ff00000
 8006924:	00000000 	.word	0x00000000

08006928 <atan>:
 8006928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	4bb6      	ldr	r3, [pc, #728]	; (8006c08 <atan+0x2e0>)
 800692e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006932:	429e      	cmp	r6, r3
 8006934:	4604      	mov	r4, r0
 8006936:	460d      	mov	r5, r1
 8006938:	468b      	mov	fp, r1
 800693a:	dd17      	ble.n	800696c <atan+0x44>
 800693c:	4bb3      	ldr	r3, [pc, #716]	; (8006c0c <atan+0x2e4>)
 800693e:	429e      	cmp	r6, r3
 8006940:	dc01      	bgt.n	8006946 <atan+0x1e>
 8006942:	d109      	bne.n	8006958 <atan+0x30>
 8006944:	b140      	cbz	r0, 8006958 <atan+0x30>
 8006946:	4622      	mov	r2, r4
 8006948:	462b      	mov	r3, r5
 800694a:	4620      	mov	r0, r4
 800694c:	4629      	mov	r1, r5
 800694e:	f7f9 fc65 	bl	800021c <__adddf3>
 8006952:	4604      	mov	r4, r0
 8006954:	460d      	mov	r5, r1
 8006956:	e005      	b.n	8006964 <atan+0x3c>
 8006958:	f1bb 0f00 	cmp.w	fp, #0
 800695c:	4cac      	ldr	r4, [pc, #688]	; (8006c10 <atan+0x2e8>)
 800695e:	f340 8121 	ble.w	8006ba4 <atan+0x27c>
 8006962:	4dac      	ldr	r5, [pc, #688]	; (8006c14 <atan+0x2ec>)
 8006964:	4620      	mov	r0, r4
 8006966:	4629      	mov	r1, r5
 8006968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	4baa      	ldr	r3, [pc, #680]	; (8006c18 <atan+0x2f0>)
 800696e:	429e      	cmp	r6, r3
 8006970:	dc11      	bgt.n	8006996 <atan+0x6e>
 8006972:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006976:	429e      	cmp	r6, r3
 8006978:	dc0a      	bgt.n	8006990 <atan+0x68>
 800697a:	a38b      	add	r3, pc, #556	; (adr r3, 8006ba8 <atan+0x280>)
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f7f9 fc4c 	bl	800021c <__adddf3>
 8006984:	2200      	movs	r2, #0
 8006986:	4ba5      	ldr	r3, [pc, #660]	; (8006c1c <atan+0x2f4>)
 8006988:	f7fa f88e 	bl	8000aa8 <__aeabi_dcmpgt>
 800698c:	2800      	cmp	r0, #0
 800698e:	d1e9      	bne.n	8006964 <atan+0x3c>
 8006990:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006994:	e027      	b.n	80069e6 <atan+0xbe>
 8006996:	f000 f951 	bl	8006c3c <fabs>
 800699a:	4ba1      	ldr	r3, [pc, #644]	; (8006c20 <atan+0x2f8>)
 800699c:	4604      	mov	r4, r0
 800699e:	429e      	cmp	r6, r3
 80069a0:	460d      	mov	r5, r1
 80069a2:	f300 80b8 	bgt.w	8006b16 <atan+0x1ee>
 80069a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80069aa:	429e      	cmp	r6, r3
 80069ac:	f300 809c 	bgt.w	8006ae8 <atan+0x1c0>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	f7f9 fc32 	bl	800021c <__adddf3>
 80069b8:	2200      	movs	r2, #0
 80069ba:	4b98      	ldr	r3, [pc, #608]	; (8006c1c <atan+0x2f4>)
 80069bc:	f7f9 fc2c 	bl	8000218 <__aeabi_dsub>
 80069c0:	2200      	movs	r2, #0
 80069c2:	4606      	mov	r6, r0
 80069c4:	460f      	mov	r7, r1
 80069c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069ca:	4620      	mov	r0, r4
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7f9 fc25 	bl	800021c <__adddf3>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4630      	mov	r0, r6
 80069d8:	4639      	mov	r1, r7
 80069da:	f7f9 feff 	bl	80007dc <__aeabi_ddiv>
 80069de:	f04f 0a00 	mov.w	sl, #0
 80069e2:	4604      	mov	r4, r0
 80069e4:	460d      	mov	r5, r1
 80069e6:	4622      	mov	r2, r4
 80069e8:	462b      	mov	r3, r5
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7f9 fdcb 	bl	8000588 <__aeabi_dmul>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4680      	mov	r8, r0
 80069f8:	4689      	mov	r9, r1
 80069fa:	f7f9 fdc5 	bl	8000588 <__aeabi_dmul>
 80069fe:	a36c      	add	r3, pc, #432	; (adr r3, 8006bb0 <atan+0x288>)
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	f7f9 fdbe 	bl	8000588 <__aeabi_dmul>
 8006a0c:	a36a      	add	r3, pc, #424	; (adr r3, 8006bb8 <atan+0x290>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fc03 	bl	800021c <__adddf3>
 8006a16:	4632      	mov	r2, r6
 8006a18:	463b      	mov	r3, r7
 8006a1a:	f7f9 fdb5 	bl	8000588 <__aeabi_dmul>
 8006a1e:	a368      	add	r3, pc, #416	; (adr r3, 8006bc0 <atan+0x298>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fbfa 	bl	800021c <__adddf3>
 8006a28:	4632      	mov	r2, r6
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	f7f9 fdac 	bl	8000588 <__aeabi_dmul>
 8006a30:	a365      	add	r3, pc, #404	; (adr r3, 8006bc8 <atan+0x2a0>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fbf1 	bl	800021c <__adddf3>
 8006a3a:	4632      	mov	r2, r6
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	f7f9 fda3 	bl	8000588 <__aeabi_dmul>
 8006a42:	a363      	add	r3, pc, #396	; (adr r3, 8006bd0 <atan+0x2a8>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f7f9 fbe8 	bl	800021c <__adddf3>
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	463b      	mov	r3, r7
 8006a50:	f7f9 fd9a 	bl	8000588 <__aeabi_dmul>
 8006a54:	a360      	add	r3, pc, #384	; (adr r3, 8006bd8 <atan+0x2b0>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f7f9 fbdf 	bl	800021c <__adddf3>
 8006a5e:	4642      	mov	r2, r8
 8006a60:	464b      	mov	r3, r9
 8006a62:	f7f9 fd91 	bl	8000588 <__aeabi_dmul>
 8006a66:	a35e      	add	r3, pc, #376	; (adr r3, 8006be0 <atan+0x2b8>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	4689      	mov	r9, r1
 8006a70:	4630      	mov	r0, r6
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7f9 fd88 	bl	8000588 <__aeabi_dmul>
 8006a78:	a35b      	add	r3, pc, #364	; (adr r3, 8006be8 <atan+0x2c0>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7f9 fbcb 	bl	8000218 <__aeabi_dsub>
 8006a82:	4632      	mov	r2, r6
 8006a84:	463b      	mov	r3, r7
 8006a86:	f7f9 fd7f 	bl	8000588 <__aeabi_dmul>
 8006a8a:	a359      	add	r3, pc, #356	; (adr r3, 8006bf0 <atan+0x2c8>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fbc2 	bl	8000218 <__aeabi_dsub>
 8006a94:	4632      	mov	r2, r6
 8006a96:	463b      	mov	r3, r7
 8006a98:	f7f9 fd76 	bl	8000588 <__aeabi_dmul>
 8006a9c:	a356      	add	r3, pc, #344	; (adr r3, 8006bf8 <atan+0x2d0>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f7f9 fbb9 	bl	8000218 <__aeabi_dsub>
 8006aa6:	4632      	mov	r2, r6
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	f7f9 fd6d 	bl	8000588 <__aeabi_dmul>
 8006aae:	a354      	add	r3, pc, #336	; (adr r3, 8006c00 <atan+0x2d8>)
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	f7f9 fbb0 	bl	8000218 <__aeabi_dsub>
 8006ab8:	4632      	mov	r2, r6
 8006aba:	463b      	mov	r3, r7
 8006abc:	f7f9 fd64 	bl	8000588 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	f7f9 fba8 	bl	800021c <__adddf3>
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	f7f9 fd5a 	bl	8000588 <__aeabi_dmul>
 8006ad4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	d144      	bne.n	8006b68 <atan+0x240>
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7f9 fb99 	bl	8000218 <__aeabi_dsub>
 8006ae6:	e734      	b.n	8006952 <atan+0x2a>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4b4c      	ldr	r3, [pc, #304]	; (8006c1c <atan+0x2f4>)
 8006aec:	f7f9 fb94 	bl	8000218 <__aeabi_dsub>
 8006af0:	2200      	movs	r2, #0
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	4b49      	ldr	r3, [pc, #292]	; (8006c1c <atan+0x2f4>)
 8006af8:	4620      	mov	r0, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	f7f9 fb8e 	bl	800021c <__adddf3>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f7f9 fe68 	bl	80007dc <__aeabi_ddiv>
 8006b0c:	f04f 0a01 	mov.w	sl, #1
 8006b10:	4604      	mov	r4, r0
 8006b12:	460d      	mov	r5, r1
 8006b14:	e767      	b.n	80069e6 <atan+0xbe>
 8006b16:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <atan+0x2fc>)
 8006b18:	429e      	cmp	r6, r3
 8006b1a:	dc1a      	bgt.n	8006b52 <atan+0x22a>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4b42      	ldr	r3, [pc, #264]	; (8006c28 <atan+0x300>)
 8006b20:	f7f9 fb7a 	bl	8000218 <__aeabi_dsub>
 8006b24:	2200      	movs	r2, #0
 8006b26:	4606      	mov	r6, r0
 8006b28:	460f      	mov	r7, r1
 8006b2a:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <atan+0x300>)
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f7f9 fd2a 	bl	8000588 <__aeabi_dmul>
 8006b34:	2200      	movs	r2, #0
 8006b36:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <atan+0x2f4>)
 8006b38:	f7f9 fb70 	bl	800021c <__adddf3>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4630      	mov	r0, r6
 8006b42:	4639      	mov	r1, r7
 8006b44:	f7f9 fe4a 	bl	80007dc <__aeabi_ddiv>
 8006b48:	f04f 0a02 	mov.w	sl, #2
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	e749      	b.n	80069e6 <atan+0xbe>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	2000      	movs	r0, #0
 8006b58:	4934      	ldr	r1, [pc, #208]	; (8006c2c <atan+0x304>)
 8006b5a:	f7f9 fe3f 	bl	80007dc <__aeabi_ddiv>
 8006b5e:	f04f 0a03 	mov.w	sl, #3
 8006b62:	4604      	mov	r4, r0
 8006b64:	460d      	mov	r5, r1
 8006b66:	e73e      	b.n	80069e6 <atan+0xbe>
 8006b68:	4b31      	ldr	r3, [pc, #196]	; (8006c30 <atan+0x308>)
 8006b6a:	4e32      	ldr	r6, [pc, #200]	; (8006c34 <atan+0x30c>)
 8006b6c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006b70:	4456      	add	r6, sl
 8006b72:	449a      	add	sl, r3
 8006b74:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b78:	f7f9 fb4e 	bl	8000218 <__aeabi_dsub>
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	462b      	mov	r3, r5
 8006b80:	f7f9 fb4a 	bl	8000218 <__aeabi_dsub>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b8c:	f7f9 fb44 	bl	8000218 <__aeabi_dsub>
 8006b90:	f1bb 0f00 	cmp.w	fp, #0
 8006b94:	4604      	mov	r4, r0
 8006b96:	460d      	mov	r5, r1
 8006b98:	f6bf aee4 	bge.w	8006964 <atan+0x3c>
 8006b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	e6df      	b.n	8006964 <atan+0x3c>
 8006ba4:	4d24      	ldr	r5, [pc, #144]	; (8006c38 <atan+0x310>)
 8006ba6:	e6dd      	b.n	8006964 <atan+0x3c>
 8006ba8:	8800759c 	.word	0x8800759c
 8006bac:	7e37e43c 	.word	0x7e37e43c
 8006bb0:	e322da11 	.word	0xe322da11
 8006bb4:	3f90ad3a 	.word	0x3f90ad3a
 8006bb8:	24760deb 	.word	0x24760deb
 8006bbc:	3fa97b4b 	.word	0x3fa97b4b
 8006bc0:	a0d03d51 	.word	0xa0d03d51
 8006bc4:	3fb10d66 	.word	0x3fb10d66
 8006bc8:	c54c206e 	.word	0xc54c206e
 8006bcc:	3fb745cd 	.word	0x3fb745cd
 8006bd0:	920083ff 	.word	0x920083ff
 8006bd4:	3fc24924 	.word	0x3fc24924
 8006bd8:	5555550d 	.word	0x5555550d
 8006bdc:	3fd55555 	.word	0x3fd55555
 8006be0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006be4:	bfa2b444 	.word	0xbfa2b444
 8006be8:	52defd9a 	.word	0x52defd9a
 8006bec:	3fadde2d 	.word	0x3fadde2d
 8006bf0:	af749a6d 	.word	0xaf749a6d
 8006bf4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006bf8:	fe231671 	.word	0xfe231671
 8006bfc:	3fbc71c6 	.word	0x3fbc71c6
 8006c00:	9998ebc4 	.word	0x9998ebc4
 8006c04:	3fc99999 	.word	0x3fc99999
 8006c08:	440fffff 	.word	0x440fffff
 8006c0c:	7ff00000 	.word	0x7ff00000
 8006c10:	54442d18 	.word	0x54442d18
 8006c14:	3ff921fb 	.word	0x3ff921fb
 8006c18:	3fdbffff 	.word	0x3fdbffff
 8006c1c:	3ff00000 	.word	0x3ff00000
 8006c20:	3ff2ffff 	.word	0x3ff2ffff
 8006c24:	40037fff 	.word	0x40037fff
 8006c28:	3ff80000 	.word	0x3ff80000
 8006c2c:	bff00000 	.word	0xbff00000
 8006c30:	08006cc0 	.word	0x08006cc0
 8006c34:	08006ca0 	.word	0x08006ca0
 8006c38:	bff921fb 	.word	0xbff921fb

08006c3c <fabs>:
 8006c3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c40:	4619      	mov	r1, r3
 8006c42:	4770      	bx	lr

08006c44 <matherr>:
 8006c44:	2000      	movs	r0, #0
 8006c46:	4770      	bx	lr

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
